[{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/__tests__/TemplateEditor.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/__tests__/TemplateFields.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'render' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TemplateFields' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'describe' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'it' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'expect' is defined but never used.","line":3,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render } from '@testing-library/react';\nimport TemplateFields from '@/components/admin/templates/template-fields';\nimport { describe, it, expect } from 'vitest';\n\n// describe('TemplateFields', () => {\n//   it('matches snapshot', () => {\n//   const { asFragment } = render(\n//     <TemplateFields\n//       template={{\n//         industry: 'towing',\n//         layout: 'default',\n//         color_scheme: 'blue-yellow',\n//         data: { pages: [] },\n//         name: 'test',\n//         theme: 'default',\n//         brand: 'default'\n//       }}\n//       onChange={() => {}}\n//     />\n//   );\n//   expect(asFragment()).toMatchSnapshot();\n// });\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/__tests__/TemplateHeader.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'render' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TemplateHeader' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'describe' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'it' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'expect' is defined but never used.","line":3,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render } from '@testing-library/react';\nimport TemplateHeader from '@/components/admin/templates/template-header';\nimport { describe, it, expect } from 'vitest';\n\n// describe('TemplateHeader', () => {\n//   it('matches snapshot', () => {\n//   const { asFragment } = render(\n//     <TemplateHeader\n//       template={{\n//         name: 'snapshot-template',\n//         updatedAt: '2025-05-24T20:00:00Z',\n//         duplicateUrl: '/admin/templates-new?copy=snapshot-template'\n//       }}\n//     />\n//   );\n//   expect(asFragment()).toMatchSnapshot();\n// });\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/__tests__/TemplateJsonEditor.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'render' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TemplateJsonEditor' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'describe' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'it' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'expect' is defined but never used.","line":3,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render } from '@testing-library/react';\nimport TemplateJsonEditor from '@/components/admin/templates/template-json-editor';\nimport { describe, it, expect } from 'vitest';\n\n// describe('TemplateJsonEditor', () => {\n//   it('matches snapshot', () => {\n//   const { asFragment } = render(\n//     <TemplateJsonEditor rawJson='{\"pages\":[]}' setRawJson={() => {}} />\n//   );\n//   expect(asFragment()).toMatchSnapshot();\n// });\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/__tests__/TemplateSaveBar.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'render' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TemplateSaveBar' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'describe' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'it' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'expect' is defined but never used.","line":3,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render } from '@testing-library/react';\nimport TemplateSaveBar from '@/components/admin/templates/template-save-bar';\nimport { describe, it, expect } from 'vitest';\n\n// describe('TemplateSaveBar', () => {\n//   it('matches snapshot', () => {\n//   const { asFragment } = render(\n//     <TemplateSaveBar\n//       template={{\n//         industry: 'towing',\n//         layout: 'default',\n//         color_scheme: 'blue-yellow',\n//         data: { pages: [] },\n//         name: 'test',\n//         theme: 'default',\n//         brand: 'default'\n//       }}\n//       rawJson={JSON.stringify({})}\n//       commitMessage={'test'}\n//     />\n//   );\n//   expect(asFragment()).toMatchSnapshot();\n// });\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/__tests__/parseTypedQueryValue.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/__tests__/useCurrentUser.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/api/compare-slugs/full-validated-endpoint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/api/compare-slugs/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'query' is defined but never used. Allowed unused args must match /^_/u.","line":32,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\nimport { withInputOutputValidation } from '../../../lib/api/withInputOutputValidation.js';\nimport { withQueryValidation } from '../../../lib/api/withQueryValidation.js';\n\nconst SlugsSchema = z.object({\n  slugs: z.array(z.string()),\n});\n\nconst PostInputSchema = z.object({\n  values: z.array(z.string().min(1)),\n});\n\nconst QuerySchema = z.object({\n  mode: z.enum(['basic', 'extended']),\n});\n\nfunction getPermutations(values: string[]): string[] {\n  const results: string[] = [];\n  for (let i = 0; i < values.length; i++) {\n    for (let j = i + 1; j < values.length; j++) {\n      results.push(`${values[i]}-vs-${values[j]}`);\n    }\n  }\n  return results;\n}\n\nasync function getSlugs(): Promise<{ slugs: string[] }> {\n  return { slugs: ['alpha-vs-beta', 'gamma-vs-delta'] };\n}\n\n// GET with cast to prevent TS deep type instantiation\nconst handleGet = withQueryValidation(QuerySchema as any, async (query: any): Promise<any> => {\n  const result = await getSlugs();\n  const parsed = SlugsSchema.safeParse(result);\n  if (!parsed.success) {\n    return Response.json({ error: 'Invalid output format' }, { status: 500 });\n  }\n  return Response.json(parsed.data);\n});\n\n// POST with full input/output validation and cast\nconst handlePost = withInputOutputValidation(\n  PostInputSchema as any,\n  SlugsSchema as any,\n  async (input: any): Promise<any> => {\n    const slugs = getPermutations(input.values);\n    return { slugs };\n  }\n);\n\nexport const GET = handleGet;\nexport const POST = handlePost;\nexport const runtime = 'experimental-edge';\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/api/delete-og-zip/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/campaigns.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/campaigns/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/compare/[slug]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/config/routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/dashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filter'. Either include it or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [filter, filterClaimed]","fix":{"range":[1016,1031],"text":"[filter, filterClaimed]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport Link from 'next/link';\n\ntype DomainRow = {\n  id: string;\n  domain: string;\n  city: string;\n  state: string;\n  template: string;\n  claimed: boolean;\n};\n\nexport default function Dashboard() {\n  const [filterClaimed, setFilterClaimed] = useState<'all' | 'claimed' | 'unclaimed'>('all');\n  const [sites, setSites] = useState<DomainRow[]>([]);\n\n  const filter =\n    filterClaimed === 'claimed'\n      ? { column: 'claimed', operator: 'eq', value: true }\n      : filterClaimed === 'unclaimed'\n        ? { column: 'claimed', operator: 'eq', value: false }\n        : undefined;\n\n  useEffect(() => {\n    let mounted = true;\n    const loadData = async () => {\n      const mod = await import('../hooks/useLiveTableWrapper.jsx');\n      const result = await mod.useLiveTableWrapper<DomainRow>('domains', filter, {\n        column: 'city',\n      });\n      if (mounted) setSites(result);\n    };\n    loadData();\n\n    return () => {\n      mounted = false;\n    };\n  }, [filterClaimed]);\n\n  return (\n    <div style={{ padding: '2rem' }}>\n      <h1 style={{ marginBottom: '1rem' }}>Claimed Sites</h1>\n\n      <div style={{ marginBottom: '1.5rem' }}>\n        <label htmlFor=\"filter\">Filter:&nbsp;</label>\n        <select\n          id=\"filter\"\n          value={filterClaimed}\n          onChange={(e) => setFilterClaimed(e.target.value as 'all' | 'claimed' | 'unclaimed')}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"claimed\">Claimed</option>\n          <option value=\"unclaimed\">Unclaimed</option>\n        </select>\n      </div>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Domain</th>\n            <th>City</th>\n            <th>State</th>\n            <th>Template</th>\n            <th>Claimed</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sites.map((site) => (\n            <tr key={site.id}>\n              <td>{site.domain}</td>\n              <td>{site.city}</td>\n              <td>{site.state}</td>\n              <td>{site.template}</td>\n              <td>{site.claimed ? '✅' : '—'}</td>\n              <td>\n                <Link href={`/sites/${site.domain}`}>View</Link>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/drafts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/guest-tokens/CampaignFunnelTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'campaign' is assigned a value but never used.","line":76,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'isInRange'. Either include it or remove the dependency array.","line":105,"column":6,"nodeType":"ArrayExpression","endLine":105,"endColumn":54,"suggestions":[{"desc":"Update the dependencies array to be: [events, isInRange, logs, minViews]","fix":{"range":[3536,3584],"text":"[events, isInRange, logs, minViews]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'isInRange'. Either include it or remove the dependency array.","line":120,"column":6,"nodeType":"ArrayExpression","endLine":120,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [events, isInRange]","fix":{"range":[4032,4064],"text":"[events, isInRange]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* /admin/guest-tokens/CampaignFunnelTable.tsx */\n\n'use client';\n\nimport { useMemo, useState } from 'react';\nimport { parseISO, isAfter, isBefore } from 'date-fns';\nimport { Button } from '../../components/ui/button';\nimport { Card } from '../../components/ui/card';\nimport { ResponsiveContainer, PieChart, Pie, Cell, Tooltip, Legend } from 'recharts';\n\ninterface UpgradeEvent {\n  id: string;\n  user_id: string | null;\n  email: string | null;\n  context: string | null;\n  event_type: string;\n  trigger_reason: string | null;\n  utm_campaign: string | null;\n  utm_source?: string | null;\n  created_at: string;\n}\n\ninterface UserLog {\n  user_id: string;\n  event_type: string;\n  created_at: string;\n}\n\ninterface Props {\n  events: UpgradeEvent[];\n  logs: UserLog[];\n  dateRange: { from?: Date; to?: Date };\n}\n\nconst COLORS = ['#6366f1', '#10b981', '#f59e0b', '#ef4444', '#3b82f6', '#a855f7', '#14b8a6'];\n\nexport function CampaignFunnelTable({ events, logs, dateRange }: Props) {\n  const [showAllTime, setShowAllTime] = useState(false);\n  const [expandedCampaign, setExpandedCampaign] = useState<string | null>(null);\n  const [minViews, setMinViews] = useState(10);\n\n  const getKey = (e: UpgradeEvent) => e.user_id || e.email || `anon-${e.id}`;\n  const isInRange = (date: Date) =>\n    showAllTime ||\n    ((!dateRange.from || isAfter(date, dateRange.from)) &&\n      (!dateRange.to || isBefore(date, dateRange.to)));\n\n  const campaignStats = useMemo(() => {\n    const campaignMap = new Map<string, Record<string, Set<string>>>();\n\n    for (const e of events) {\n      const key = getKey(e);\n      const date = parseISO(e.created_at);\n      if (!isInRange(date)) continue;\n      const campaign = e.utm_campaign || '(none)';\n      const bucket = campaignMap.get(campaign) ?? {\n        view: new Set(),\n        click: new Set(),\n        signup: new Set(),\n        publish: new Set(),\n        users: new Set(),\n        sources: new Set(),\n        userList: new Map(),\n      };\n      if (e.event_type === 'view') bucket.view.add(key);\n      if (e.event_type === 'click') bucket.click.add(key);\n      if (e.utm_source) bucket.sources.add(e.utm_source);\n      bucket.users.add(key);\n      (bucket.userList as Map<string, string>).set(key, e.email || e.user_id || key);\n      campaignMap.set(campaign, bucket as Record<string, Set<string>>);\n    }\n\n    for (const log of logs) {\n      const date = parseISO(log.created_at);\n      if (!isInRange(date)) continue;\n      for (const [campaign, bucket] of campaignMap.entries()) {\n        if (log.user_id && bucket.users.has(log.user_id)) {\n          if (log.event_type === 'signup_complete') bucket.signup.add(log.user_id);\n          if (log.event_type === 'site_published') bucket.publish.add(log.user_id);\n        }\n      }\n    }\n\n    return Array.from(campaignMap.entries())\n      .map(([campaign, bucket]) => {\n        const views = bucket.view.size;\n        const clicks = bucket.click.size;\n        const signups = bucket.signup.size;\n        const publishes = bucket.publish.size;\n        const conversion = views > 0 ? ((signups / views) * 100).toFixed(1) + '%' : '—';\n        return {\n          campaign,\n          views,\n          clicks,\n          signups,\n          publishes,\n          conversion,\n          sources: Array.from(bucket.sources),\n          users: Array.from(bucket.users),\n          userList: Array.from((bucket.userList as unknown as Map<string, string>).entries()),\n        };\n      })\n      .filter((row) => row.views >= minViews)\n      .sort((a, b) => b.views - a.views);\n  }, [events, logs, dateRange, showAllTime, minViews]);\n\n  const sourcePieData = useMemo(() => {\n    const count: Record<string, Set<string>> = {};\n    for (const e of events) {\n      const key = getKey(e);\n      if (!isInRange(parseISO(e.created_at))) continue;\n      const source = e.utm_source || '(none)';\n      count[source] ??= new Set();\n      count[source].add(key);\n    }\n    return Object.entries(count).map(([source, users]) => ({\n      name: source,\n      value: users.size,\n    }));\n  }, [events, dateRange, showAllTime]);\n\n  const exportCampaignCSV = () => {\n    const headers = ['Campaign', 'Views', 'Clicks', 'Signups', 'Publishes', 'Conversion'];\n    const rows = campaignStats.map((r) =>\n      [r.campaign, r.views, r.clicks, r.signups, r.publishes, r.conversion].join(',')\n    );\n    const blob = new Blob([headers.join(',') + '\\n' + rows.join('\\n')], {\n      type: 'text/csv',\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'campaign_funnel_stats.csv';\n    a.click();\n  };\n\n  const exportUserList = (campaign: string, users: [string, string][]) => {\n    const headers = ['ID', 'Label'];\n    const rows = users.map(([id, label]) => `${id},${label}`);\n    const blob = new Blob([headers.join(',') + '\\n' + rows.join('\\n')], {\n      type: 'text/csv',\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${campaign.replace(/\\s+/g, '_')}_users.csv`;\n    a.click();\n  };\n\n  return (\n    <Card className=\"p-4 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-lg font-semibold\">Campaign Cohorts</h2>\n        <div className=\"flex gap-2\">\n          <input\n            type=\"number\"\n            value={minViews}\n            min={0}\n            onChange={(e) => setMinViews(Number(e.target.value))}\n            className=\"w-20 text-sm border rounded px-2 py-1\"\n            placeholder=\"Min views\"\n          />\n          <Button variant=\"outline\" size=\"sm\" onClick={exportCampaignCSV}>\n            Export CSV\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setShowAllTime(!showAllTime)}>\n            {showAllTime ? 'Show Date Range' : 'Show All Time'}\n          </Button>\n        </div>\n      </div>\n\n      <ResponsiveContainer width=\"100%\" height={250}>\n        <PieChart>\n          <Pie data={sourcePieData} dataKey=\"value\" nameKey=\"name\" outerRadius={100} label>\n            {sourcePieData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n            ))}\n          </Pie>\n          <Tooltip />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead className=\"text-muted-foreground text-left\">\n            <tr>\n              <th className=\"py-1\">Campaign</th>\n              <th className=\"py-1\">👁️ Views</th>\n              <th className=\"py-1\">🚀 Clicks</th>\n              <th className=\"py-1\">✅ Signups</th>\n              <th className=\"py-1\">📤 Publishes</th>\n              <th className=\"py-1\">💡 Conversion</th>\n            </tr>\n          </thead>\n          <tbody>\n            {campaignStats.map((row) => (\n              <>\n                <tr\n                  key={row.campaign}\n                  className=\"border-t cursor-pointer hover:bg-muted\"\n                  onClick={() =>\n                    setExpandedCampaign(row.campaign === expandedCampaign ? null : row.campaign)\n                  }\n                >\n                  <td className=\"py-1 font-medium\">{row.campaign}</td>\n                  <td className=\"py-1\">{row.views}</td>\n                  <td className=\"py-1\">{row.clicks}</td>\n                  <td className=\"py-1\">{row.signups}</td>\n                  <td className=\"py-1\">{row.publishes}</td>\n                  <td className=\"py-1\">{row.conversion}</td>\n                </tr>\n                {expandedCampaign === row.campaign && (\n                  <tr className=\"text-xs text-muted-foreground\">\n                    <td colSpan={6} className=\"pl-4 py-2 bg-muted\">\n                      <div className=\"space-y-2\">\n                        <div>\n                          <strong>Users:</strong> {row.users.length}\n                        </div>\n                        <div>\n                          <strong>Sources:</strong> {row.sources.join(', ') || '—'}\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => exportUserList(row.campaign, row.userList)}\n                        >\n                          Download Users CSV\n                        </Button>\n                        <ul className=\"text-xs list-disc pl-4 max-h-32 overflow-y-auto\">\n                          {row.userList.map(([id, label]) => (\n                            <li key={id}>{label}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    </td>\n                  </tr>\n                )}\n              </>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/guest-tokens/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDistanceToNow' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FilterIcon' is defined but never used.","line":10,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TagIcon' is defined but never used.","line":10,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ResponsiveContainer' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart' is defined but never used.","line":11,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bar' is defined but never used.","line":11,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'XAxis' is defined but never used.","line":11,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'YAxis' is defined but never used.","line":11,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used.","line":11,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cn' is defined but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setContextFilter' is assigned a value but never used.","line":31,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":41},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'supabase'. Either include it or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [supabase]","fix":{"range":[2219,2221],"text":"[supabase]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* app/admin/guest-tokens/page.tsx */\n\n'use client';\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { formatDistanceToNow, isAfter, isBefore, parseISO, subDays } from 'date-fns';\n// import { Card, CardContent } from '@/components/ui/card';\n// import { Button } from '@/components/ui/button';\nimport { CalendarIcon, DownloadIcon, FilterIcon, TagIcon } from 'lucide-react';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip } from 'recharts';\nimport { DateRange } from 'react-day-picker';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface UpgradeEvent {\n  id: string;\n  user_id: string | null;\n  email: string | null;\n  context: string | null;\n  event_type: string;\n  trigger_reason: string | null;\n  created_at: string;\n}\n\nexport default function GuestUpgradeDashboard() {\n  const [events, setEvents] = useState<UpgradeEvent[]>([]);\n  const [userLogs, setUserLogs] = useState<any[]>([]);\n  const [contextFilter, setContextFilter] = useState<string | null>(null);\n  const [dateRange, setDateRange] = useState<DateRange | undefined>({\n    from: subDays(new Date(), 7),\n    to: new Date(),\n  });\n  const [openStep, setOpenStep] = useState<string | null>(null);\n\n  const supabase = createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  );\n\n  const toggleStep = (key: string) => setOpenStep((prev) => (prev === key ? null : key));\n\n  useEffect(() => {\n    const loadEvents = async () => {\n      const { data, error } = await supabase\n        .from('guest_upgrade_events')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(1000);\n      if (!error) setEvents(data);\n    };\n    const loadUserLogs = async () => {\n      const { data, error } = await supabase\n        .from('user_action_logs')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(1000);\n      if (!error) setUserLogs(data);\n    };\n    loadEvents();\n    loadUserLogs();\n  }, []);\n\n  const filtered = useMemo(() => {\n    return events.filter((e) => {\n      const date = parseISO(e.created_at);\n      const inRange =\n        (!dateRange?.from || isAfter(date, dateRange.from)) &&\n        (!dateRange?.to || isBefore(date, dateRange.to));\n      const inContext = !contextFilter || e.context === contextFilter;\n      return inRange && inContext;\n    });\n  }, [events, contextFilter, dateRange]);\n\n  const getKey = (e: { user_id: string | null; email?: string | null; id: string }) =>\n    e.user_id || e.email || `anon-${e.id}`;\n  const getLabel = (e: { user_id: string | null; email?: string | null }) =>\n    e.email || e.user_id || 'anonymous';\n\n  const funnelCounts = useMemo(() => {\n    const views = new Set<string>();\n    const clicks = new Set<string>();\n    const signups = new Set<string>();\n    const publishes = new Set<string>();\n\n    for (const e of filtered) {\n      const key = getKey(e);\n      if (e.event_type === 'view') views.add(key);\n      if (e.event_type === 'click') clicks.add(key);\n    }\n\n    for (const log of userLogs) {\n      const logDate = parseISO(log.created_at);\n      const inRange =\n        (!dateRange?.from || isAfter(logDate, dateRange.from)) &&\n        (!dateRange?.to || isBefore(logDate, dateRange.to));\n      if (!log.user_id || !inRange) continue;\n      if (log.event_type === 'signup_complete') signups.add(log.user_id);\n      if (log.event_type === 'site_published') publishes.add(log.user_id);\n    }\n\n    return {\n      views: views.size,\n      clicks: clicks.size,\n      signups: signups.size,\n      publishes: publishes.size,\n    };\n  }, [filtered, userLogs, dateRange]);\n\n  const funnelDetails = useMemo(() => {\n    const views = new Map<string, string>();\n    const clicks = new Map<string, string>();\n    const signups = new Map<string, string>();\n    const publishes = new Map<string, string>();\n\n    for (const e of filtered) {\n      const key = getKey(e);\n      const label = getLabel(e);\n      if (e.event_type === 'view') views.set(key, label);\n      if (e.event_type === 'click') clicks.set(key, label);\n    }\n\n    for (const log of userLogs) {\n      const logDate = parseISO(log.created_at);\n      const inRange =\n        (!dateRange?.from || isAfter(logDate, dateRange.from)) &&\n        (!dateRange?.to || isBefore(logDate, dateRange.to));\n      if (!log.user_id || !inRange) continue;\n      if (log.event_type === 'signup_complete') signups.set(log.user_id, log.user_id);\n      if (log.event_type === 'site_published') publishes.set(log.user_id, log.user_id);\n    }\n\n    return {\n      views: [...views.entries()],\n      clicks: [...clicks.entries()],\n      signups: [...signups.entries()],\n      publishes: [...publishes.entries()],\n    };\n  }, [filtered, userLogs, dateRange]);\n\n  const exportFunnelCSV = () => {\n    const rows = [\n      ['Step', 'Count'],\n      ['Modal Viewed', funnelCounts.views],\n      ['Clicked Upgrade', funnelCounts.clicks],\n      ['Signup Complete', funnelCounts.signups],\n      ['Site Published', funnelCounts.publishes],\n    ];\n    const blob = new Blob([rows.map((r) => r.join(',')).join('\\n')], {\n      type: 'text/csv',\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'funnel_counts.csv';\n    link.click();\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-4 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Guest Upgrade Funnel</h1>\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button variant=\"outline\" className=\"w-[280px] justify-start text-left font-normal\">\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              {dateRange?.from ? (\n                dateRange.to ? (\n                  <>\n                    {dateRange.from.toLocaleDateString()} - {dateRange.to.toLocaleDateString()}\n                  </>\n                ) : (\n                  dateRange.from.toLocaleDateString()\n                )\n              ) : (\n                <span>Select date range</span>\n              )}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\">\n            <Calendar\n              mode=\"range\"\n              selected={dateRange}\n              onSelect={setDateRange}\n              numberOfMonths={2}\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold flex items-center gap-2\">\n            🧭 Funnel Drop-Off (unique users)\n          </h2>\n          <Button size=\"sm\" variant=\"outline\" onClick={exportFunnelCSV}>\n            <DownloadIcon className=\"w-4 h-4 mr-2\" /> Export Funnel\n          </Button>\n        </div>\n\n        {(\n          [\n            {\n              key: 'views',\n              label: '👁️ Modal Viewed',\n              count: funnelCounts.views,\n            },\n            {\n              key: 'clicks',\n              label: '🚀 Clicked Upgrade',\n              count: funnelCounts.clicks,\n            },\n            {\n              key: 'signups',\n              label: '✅ Signup Complete',\n              count: funnelCounts.signups,\n            },\n            {\n              key: 'publishes',\n              label: '📤 Site Published',\n              count: funnelCounts.publishes,\n            },\n          ] as const\n        ).map((step) => (\n          <div\n            key={step.key}\n            className=\"w-full bg-muted rounded-md p-2 cursor-pointer\"\n            onClick={() => toggleStep(step.key)}\n          >\n            <div className=\"flex items-center justify-between\">\n              <span>{step.label}</span>\n              <span className=\"font-bold\">{step.count}</span>\n            </div>\n            {openStep === step.key && (\n              <div className=\"mt-2 pl-2 text-sm text-muted-foreground space-y-1 max-h-40 overflow-y-auto\">\n                {(funnelDetails as any)[step.key]?.map(([id, label]: [string, string]) => (\n                  <div key={id} className=\"truncate\">\n                    • {label}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/autosave.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/createSharedPreview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/db.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/defaultSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/domainTracker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/generateSocialCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/getSnapshotWithBranding.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/guestTracking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/links/buildSafeLink.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/links/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/links/hooks/useLinkBuilder.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_t' is assigned a value but never used.","line":25,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_h' is assigned a value but never used.","line":25,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_t' is assigned a value but never used.","line":46,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_h' is assigned a value but never used.","line":46,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Link from 'next/link';\nimport { useUrlBuilder } from './useUrlBuilder';\nimport { buildSafeLink } from '@/admin/lib/links/buildSafeLink';\nimport { linkThemeMap } from '@/admin/lib/links';\nimport type { ReactNode } from 'react';\n\ntype LinkProps = React.ComponentProps<typeof Link> & {\n  theme?: keyof typeof linkThemeMap;\n};\n\nexport function useLinkBuilder() {\n  const { getTemplateUrl, getSnapshotUrl } = useUrlBuilder();\n\n  const templateLink = (\n    id: string,\n    query?: Record<string, string | number | boolean>,\n    children?: ReactNode,\n    linkProps?: LinkProps\n  ) => {\n    const href = getTemplateUrl(id, query);\n    if (!href) return null;\n\n    const resolved = linkProps?.theme ? linkThemeMap[linkProps.theme] : linkThemeMap.primary;\n\n    const { theme: _t, href: _h, prefetch: _p, target: _tg, ...rest } = linkProps || {};\n    const target = _tg as '_blank' | '_self' | '_parent' | '_top' | undefined;\n    return buildSafeLink(id, href.toString(), 'templateLink', children, {\n      className: resolved,\n      prefetch: _p ?? undefined,\n      target,\n      ...rest,\n    });\n  };\n\n  const snapshotLink = (\n    id: string,\n    query?: Record<string, string | number | boolean>,\n    children?: ReactNode,\n    linkProps?: LinkProps\n  ) => {\n    const href = getSnapshotUrl(id, query);\n    if (!href) return null;\n\n    const resolved = linkProps?.theme ? linkThemeMap[linkProps.theme] : linkThemeMap.primary;\n\n    const { theme: _t, href: _h, prefetch: _p, ...rest } = linkProps || {};\n    return buildSafeLink(id, href.toString(), 'snapshotLink', children, {\n      className: resolved,\n      prefetch: _p ?? undefined,\n      target: undefined as any,\n      ...rest,\n    });\n  };\n\n  return {\n    templateLink,\n    snapshotLink,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/links/hooks/useSaveTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/links/hooks/useUrlBuilder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/links/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/links/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/links/url.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/logBrandingEvent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/logEmbedView.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/logWithSlack.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/query/parseTypedQueryValue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/query/queryParamSchemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/queryParamSchemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/queryUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/saveAsTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/schemaStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/sendDigestEmails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/sendToSlack.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/snapshotSharing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/snapshots.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/supabaseAdmin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/uploadSnapshotToSupabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/useLocale.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRouter } from 'next/navigation';\n\nconst translations: Record<string, Record<string, string>> = {\n  en: {\n    title: 'Welcome to our site!',\n    footer: 'Powered by GoodRobot',\n  },\n  es: {\n    title: '¡Bienvenidos!',\n    footer: 'Desarrollado por GoodRobot',\n  },\n  fr: {\n    title: 'Bienvenue !',\n    footer: 'Propulsé par GoodRobot',\n  },\n};\n\nexport function useLocale(lang: string = 'en') {\n  return translations[lang] || translations['en'];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/useRealtimeLayout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/withAuth.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'displayName' is assigned a value but never used.","line":6,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ProtectedComponent' is assigned a value but never used.","line":7,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.","line":15,"column":8,"nodeType":"ArrayExpression","endLine":15,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [router, session]","fix":{"range":[594,603],"text":"[router, session]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useSession } from '@supabase/auth-helpers-react';\nimport { useRouter } from 'next/navigation';\nimport { useEffect } from 'react';\n\nexport function withAuth<P extends object>(WrappedComponent: React.ComponentType<P>) {\n  const displayName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n  const ProtectedComponent = function (props: P) {\n    const session = useSession();\n    const router = useRouter();\n\n    useEffect(() => {\n      if (session === null) {\n        router.push(`/login?redirectTo=${encodeURIComponent(window.location.pathname)}`);\n      }\n    }, [session]);\n\n    if (session === null) return null;\n    return <WrappedComponent {...props} />;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/lib/zod/blockSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/og/compare/[slug]/route.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/query-usecases.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/tools/prebuild-og/page.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":110,"column":15,"nodeType":"JSXOpeningElement","endLine":114,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\n\nexport default function PrebuildOGPage() {\n  const [slugs, setSlugs] = useState<string[]>([]);\n  const [results, setResults] = useState<Record<string, 'pending' | 'success' | 'error'>>({});\n  const [loading, setLoading] = useState(false);\n  const [totalMB, setTotalMB] = useState<string>('0.0');\n\n  const fetchSlugs = async () => {\n    const res = await fetch('/api/compare-slugs');\n    const data = await res.json();\n    setSlugs(data.slugs);\n    setResults(Object.fromEntries(data.slugs.map((slug: string) => [slug, 'pending'])));\n  };\n\n  const fetchStorageInfo = async () => {\n    const res = await fetch('/api/list-og-zips');\n    const data = await res.json();\n    setTotalMB(data.totalMB || '0.0');\n  };\n\n  const triggerBuilds = async () => {\n    setLoading(true);\n    for (const slug of slugs) {\n      try {\n        const res = await fetch(`/og/compare/${slug}`);\n        if (res.ok) {\n          setResults((prev) => ({ ...prev, [slug]: 'success' }));\n        } else {\n          setResults((prev) => ({ ...prev, [slug]: 'error' }));\n        }\n      } catch {\n        setResults((prev) => ({ ...prev, [slug]: 'error' }));\n      }\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchSlugs();\n    fetchStorageInfo();\n  }, []);\n\n  const overQuota = parseFloat(totalMB) > 100;\n\n  return (\n    <main className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex flex-col gap-2\">\n          <h1 className=\"text-2xl font-bold\">\n            Prebuild OG Images{' '}\n            {overQuota ? (\n              <span className=\"text-sm text-red-500 ml-2\">({totalMB} MB used – over quota)</span>\n            ) : (\n              <span className=\"text-sm text-muted-foreground ml-2\">({totalMB} MB used)</span>\n            )}\n          </h1>\n          <div className=\"w-full h-3 bg-gray-200 rounded overflow-hidden\">\n            <div\n              className={`h-full ${overQuota ? 'bg-red-500' : 'bg-blue-500'}`}\n              style={{ width: `${Math.min(100, parseFloat(totalMB))}%` }}\n            />\n          </div>\n        </div>\n        <Button\n          variant=\"outline\"\n          onClick={() => {\n            const zipUrl = `/api/download-og-zip?slugs=${encodeURIComponent(\n              slugs.filter((s) => results[s] === 'success').join(',')\n            )}`;\n            window.open(zipUrl, '_blank');\n          }}\n          disabled={!slugs.some((s) => results[s] === 'success')}\n        >\n          Download All as ZIP\n        </Button>\n      </div>\n\n      {overQuota && (\n        <div className=\"text-sm text-yellow-600 bg-yellow-100 border border-yellow-300 rounded px-4 py-2\">\n          Storage limit exceeded. Please delete old exports before generating new ones.\n        </div>\n      )}\n\n      <Button onClick={triggerBuilds} disabled={loading || slugs.length === 0 || overQuota}>\n        {loading ? 'Generating...' : 'Start Prebuild'}\n      </Button>\n\n      <ul className=\"text-sm space-y-4\">\n        {slugs.map((slug) => (\n          <li key={slug} className=\"border p-4 rounded shadow-sm\">\n            <div className=\"flex justify-between mb-2\">\n              <span className=\"font-mono text-sm\">{slug}</span>\n              <span\n                className={\n                  results[slug] === 'success'\n                    ? 'text-green-500'\n                    : results[slug] === 'error'\n                      ? 'text-red-500'\n                      : 'text-muted-foreground'\n                }\n              >\n                {results[slug]}\n              </span>\n            </div>\n            {results[slug] === 'success' && (\n              <img\n                src={`/og/compare/${slug}`}\n                alt={`OG image for ${slug}`}\n                className=\"w-full border rounded\"\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/utils/getSupportEmail.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/utils/jsonSchemaToZod.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/utils/logEvent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/utils/normalizeTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/utils/publishSite.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/utils/renderVersionDiff.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/utils/roles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/utils/uploadQRCodeImage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/utils/zodToJsonSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/admin/views.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/_sites/[slug]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/access-requests.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/analytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GetServerSideProps' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PieChart' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Pie' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Cell' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used.","line":16,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GetServerSideProps } from 'next';\nimport { createClient } from '@supabase/supabase-js';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  Legend,\n} from 'recharts';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function SharedAnalytics({ domain, views }: { domain: string; views: any[] }) {\n  const byDay: Record<string, number> = {};\n  views.forEach((v) => {\n    const day = new Date(v.viewed_at).toISOString().slice(0, 10);\n    byDay[day] = (byDay[day] || 0) + 1;\n  });\n\n  return (\n    <div className=\"max-w-5xl mx-auto p-6 space-y-6\">\n      <h1 className=\"text-2xl font-bold\">Analytics for {domain}</h1>\n\n      <div className=\"flex items-center gap-4 mb-4\">\n        <button\n          onClick={async () => {\n            const QRCode = await import('qrcode');\n            const url = window.location.href;\n            QRCode.toDataURL(url).then((dataUrl: string) => {\n              const win = window.open();\n              if (win) win.document.write(`<img src='${dataUrl}' /><p>${url}</p>`);\n            });\n          }}\n          className=\"text-sm text-blue-600 underline\"\n        >\n          📸 Generate QR Code\n        </button>\n\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            const email = (\n              (e.target as HTMLFormElement).querySelector('input[type=email]') as HTMLInputElement\n            )?.value;\n            if (email) {\n              await fetch('/api/subscribe', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ domain, email }),\n              });\n              alert('Subscribed to updates for ' + domain);\n            }\n          }}\n          className=\"flex gap-2 items-center\"\n        >\n          <input\n            type=\"email\"\n            required\n            placeholder=\"you@example.com\"\n            className=\"border rounded px-2 py-1 text-sm\"\n          />\n          <button type=\"submit\" className=\"text-sm text-green-600 underline\">\n            📬 Subscribe to reports\n          </button>\n        </form>\n      </div>\n\n      <section>\n        <h2 className=\"text-lg font-semibold mb-2\">Views per Day</h2>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={Object.entries(byDay).map(([day, count]) => ({ day, count }))}>\n            <XAxis dataKey=\"day\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"count\" fill=\"#6366f1\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </section>\n\n      <p className=\"text-sm text-muted-foreground\">Total views: {views.length}</p>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/audit.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/branding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/branding/[id].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":110,"column":13,"nodeType":"JSXOpeningElement","endLine":110,"endColumn":87},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":116,"column":11,"nodeType":"JSXOpeningElement","endLine":120,"endColumn":13},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":126,"column":13,"nodeType":"JSXOpeningElement","endLine":126,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport QRCode from 'qrcode';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function BrandingProfilePage() {\n  const searchParams = useSearchParams();\n  const id = searchParams?.get('id') as string;\n  const [profile, setProfile] = useState<any>(null);\n  const [qr, setQr] = useState<string | null>(null);\n  const [accessOk, setAccessOk] = useState(false);\n  const [passwordAttempt, setPasswordAttempt] = useState('');\n\n  useEffect(() => {\n    if (!id || typeof id !== 'string') return;\n\n    supabase\n      .from('branding_profiles')\n      .select('*')\n      .eq('id', id)\n      .single()\n      .then(({ data }) => {\n        if (data) {\n          const accessParam = new URLSearchParams(window.location.search).get('access');\n          if (!data.access_token && !data.password) {\n            setAccessOk(true);\n          } else if (data.access_token && accessParam === data.access_token) {\n            setAccessOk(true);\n          } else {\n            setAccessOk(false);\n          }\n          setProfile(data);\n          const previewUrl = `${window.location.origin}/api/og/snapshot?theme=${data.theme}&brand=${data.brand}`;\n          QRCode.toDataURL(previewUrl).then(setQr);\n        }\n      });\n  }, [id]);\n\n  if (!profile) return <p className=\"p-6 text-sm text-muted-foreground\">Loading profile...</p>;\n\n  if (!accessOk && profile?.password) {\n    return (\n      <div className=\"p-6\">\n        <h2 className=\"text-lg font-semibold mb-2\">Password Required</h2>\n        <input\n          className=\"border px-2 py-1 rounded mr-2\"\n          placeholder=\"Enter password\"\n          value={passwordAttempt}\n          onChange={(e) => setPasswordAttempt(e.target.value)}\n        />\n        <button\n          className=\"bg-black text-white px-3 py-1 rounded\"\n          onClick={() => {\n            if (passwordAttempt === profile.password) setAccessOk(true);\n            else alert('Incorrect password');\n          }}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  const previewUrl = `/api/og/snapshot?theme=${profile.theme}&brand=${profile.brand}`;\n\n  async function downloadPDF() {\n    const html2pdf = (await import('html2pdf.js')).default;\n\n    const element = document.getElementById('branding-preview-pdf');\n    if (element) {\n      html2pdf()\n        .set({\n          filename: `${profile.name}-preview.pdf`,\n          margin: 10,\n          html2canvas: { scale: 2 },\n          jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\n        })\n        .from(element)\n        .save();\n    }\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-6 space-y-6\">\n      <div id=\"branding-preview-pdf\" className=\"space-y-6\">\n        <h1 className=\"text-2xl font-bold\">{profile.name}</h1>\n\n        <div className=\"flex items-center gap-4\">\n          <span className=\"text-sm font-medium\">Theme:</span>\n          <span className=\"px-2 py-1 rounded bg-gray-200\">{profile.theme}</span>\n\n          <span className=\"text-sm font-medium\">Brand:</span>\n          <span className=\"px-2 py-1 rounded bg-gray-200\">{profile.brand}</span>\n\n          {profile.accent_color && (\n            <span\n              className=\"w-5 h-5 rounded-full border\"\n              style={{ backgroundColor: profile.accent_color }}\n            />\n          )}\n\n          {profile.logo_url && (\n            <img src={profile.logo_url} alt=\"Logo\" className=\"w-8 h-8 rounded-full\" />\n          )}\n        </div>\n\n        <div>\n          <p className=\"text-sm text-muted-foreground mb-1\">OG Preview:</p>\n          <img\n            src={previewUrl}\n            alt=\"OG Preview\"\n            className=\"w-full max-w-xl border shadow rounded\"\n          />\n        </div>\n\n        {qr && (\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-1\">QR Code:</p>\n            <img src={qr} alt=\"QR Code\" className=\"w-32 h-32 border rounded\" />\n          </div>\n        )}\n\n        <div>\n          <p className=\"text-sm\">Link:</p>\n          <code className=\"text-xs bg-gray-100 p-2 rounded block\">{previewUrl}</code>\n        </div>\n      </div>\n\n      <button className=\"bg-blue-600 text-white px-4 py-2 rounded mt-4\" onClick={downloadPDF}>\n        Download PDF Preview\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/branding/import.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":19,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function BrandingImportPage() {\n  const [importData, setImportData] = useState('');\n  const [feedback, setFeedback] = useState('');\n\n  const handleImport = async () => {\n    try {\n      const parsed = JSON.parse(importData);\n      const { error } = await supabase.from('branding_profiles').insert([parsed]);\n      if (error) throw error;\n      setFeedback('✅ Imported successfully');\n    } catch (e) {\n      setFeedback('❌ Invalid JSON or import error');\n    }\n  };\n\n  const handleExport = async () => {\n    const { data } = await supabase.from('branding_profiles').select('*').limit(1);\n    if (data && data.length > 0) {\n      const blob = new Blob([JSON.stringify(data[0], null, 2)], {\n        type: 'application/json',\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'branding-profile.json';\n      a.click();\n      URL.revokeObjectURL(url);\n    }\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 space-y-4\">\n      <h1 className=\"text-xl font-bold\">Import / Export Branding Profile</h1>\n\n      <button onClick={handleExport} className=\"bg-blue-600 text-white px-4 py-2 rounded\">\n        Export Sample\n      </button>\n\n      <textarea\n        className=\"w-full border rounded p-2 text-sm h-48\"\n        placeholder=\"Paste exported branding_profile JSON here...\"\n        value={importData}\n        onChange={(e) => setImportData(e.target.value)}\n      />\n\n      <button onClick={handleImport} className=\"bg-green-600 text-white px-4 py-2 rounded\">\n        Import\n      </button>\n\n      {feedback && <p className=\"text-sm\">{feedback}</p>}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/branding/og-editor/[id].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":74,"column":11,"nodeType":"JSXOpeningElement","endLine":74,"endColumn":92}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRouter, useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nconst defaultLayout = [\n  { type: 'hero', active: true },\n  { type: 'features', active: true },\n  { type: 'testimonials', active: true },\n  { type: 'cta', active: true },\n];\n\nexport default function OGLayoutEditor() {\n  const searchParams = useSearchParams();\n  const id = searchParams?.get('id') as string;\n  const [layout, setLayout] = useState(defaultLayout);\n  const [profile, setProfile] = useState<any>(null);\n\n  useEffect(() => {\n    if (!id || typeof id !== 'string') return;\n\n    supabase\n      .from('branding_profiles')\n      .select('*')\n      .eq('id', id)\n      .single()\n      .then(({ data }) => {\n        if (data?.layout) setLayout(data.layout);\n        setProfile(data);\n      });\n  }, [id]);\n\n  const toggleBlock = (type: string) => {\n    setLayout(layout.map((b) => (b.type === type ? { ...b, active: !b.active } : b)));\n  };\n\n  const saveLayout = async () => {\n    await supabase.from('branding_profiles').update({ layout }).eq('id', id);\n    alert('Layout saved!');\n  };\n\n  const previewURL = `/api/og/snapshot?snapshotId=${id}`;\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white px-6 py-10\">\n      <div className=\"max-w-xl mx-auto bg-gray-800 p-6 rounded-lg shadow space-y-6\">\n        <h1 className=\"text-xl font-bold mb-4\">OG Layout Editor: {profile?.name}</h1>\n\n        {layout.map((block, index) => (\n          <label key={index} className=\"flex items-center gap-2 mb-2\">\n            <input\n              type=\"checkbox\"\n              className=\"accent-blue-500\"\n              checked={block.active}\n              onChange={() => toggleBlock(block.type)}\n            />\n            <span className=\"capitalize\">{block.type}</span>\n          </label>\n        ))}\n\n        <button\n          onClick={saveLayout}\n          className=\"bg-blue-600 hover:bg-blue-500 text-white px-4 py-2 rounded\"\n        >\n          Save Layout\n        </button>\n\n        <div className=\"pt-6\">\n          <p className=\"text-sm text-muted-foreground mb-1\">OG Preview:</p>\n          <img src={previewURL} alt=\"Preview\" className=\"rounded border border-gray-700\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/admin/dashboard.tsx\nimport Head from 'next/head';\nimport { json } from '@/lib/api/json';\nimport { useCurrentUser } from '@/hooks/useCurrentUser';\nimport SeedButton from '@/components/admin/admin/seed-button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { useEffect, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nexport default function AdminDashboard() {\n  const { hasRole } = useCurrentUser();\n\n  const [embedViews, setEmbedViews] = useState<number>(0);\n  const [dailyViews, setDailyViews] = useState<number>(0);\n  const [links, setLinks] = useState<number>(0);\n  const [emails, setEmails] = useState<number>(0);\n  const [logs, setLogs] = useState<number>(0);\n\n  useEffect(() => {\n    const fetchCounts = async () => {\n      const [\n        { count: viewsCount },\n        { count: linksCount },\n        { count: emailsCount },\n        { count: logsCount },\n      ] = await Promise.all([\n        supabase.from('embed_views').select('*', { count: 'exact', head: true }),\n        supabase.from('schema_links').select('*', { count: 'exact', head: true }),\n        supabase.from('email_summaries').select('*', { count: 'exact', head: true }),\n        supabase.from('log_events').select('*', { count: 'exact', head: true }),\n      ]);\n\n      setEmbedViews(viewsCount || 0);\n      setLinks(linksCount || 0);\n      setEmails(emailsCount || 0);\n      setLogs(logsCount || 0);\n\n      const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\n      const { count: viewsToday } = await supabase\n        .from('embed_views')\n        .select('*', { count: 'exact', head: true })\n        .gt('created_at', dayAgo);\n\n      setDailyViews(viewsToday || 0);\n    };\n    fetchCounts();\n  }, []);\n\n  return (\n    <>\n      <Head>\n        <title>Admin Dashboard</title>\n      </Head>\n\n      <div className=\"max-w-5xl mx-auto p-6 space-y-6\">\n        <h1 className=\"text-2xl font-bold mb-4\">🛠 Admin Tools</h1>\n\n        {hasRole(['admin', 'owner']) && (\n          <Card>\n            <CardHeader className=\"text-lg font-semibold\">Seed Tools</CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-500 mb-2\">\n                Quickly add an example template to test the builder.\n              </p>\n              <SeedButton />\n            </CardContent>\n          </Card>\n        )}\n\n        {hasRole(['admin', 'owner']) && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card className=\"relative border-l-4 border-blue-500 transition-transform duration-200 hover:scale-[1.01] hover:shadow-md\">\n              <div\n                className={`absolute top-2 right-3 text-sm font-mono ${dailyViews > 100 ? 'text-green-500 animate-pulse' : 'text-blue-600'}`}\n              >\n                +{embedViews} views\n                <br />({dailyViews} today)\n              </div>\n              <CardHeader className=\"text-lg font-semibold text-blue-600\">\n                📊 Embed Views\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-500 mb-2\">Track views by location and volume.</p>\n                <a href=\"/admin/embed-views\" className=\"text-blue-600 text-sm underline\">\n                  View Logs →\n                </a>\n                <button\n                  onClick={async () => {\n                    const token = localStorage.getItem('sb-access-token');\n                    const res = await fetch('/api/admin/logs-export-csv?table=embed_views', {\n                      method: 'POST',\n                      headers: { Authorization: `Bearer ${token}` },\n                    });\n                    const blob = await res.blob();\n                    const url = URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    a.href = url;\n                    a.download = 'embed-views.csv';\n                    a.click();\n                    URL.revokeObjectURL(url);\n                  }}\n                  className=\"mt-2 text-xs text-blue-600 underline hover:text-blue-700\"\n                >\n                  Download Embed Views CSV\n                </button>\n              </CardContent>\n            </Card>\n            <Card className=\"relative border-l-4 border-green-500 transition-transform duration-200 hover:scale-[1.01] hover:shadow-md\">\n              <div\n                className={`absolute top-2 right-3 text-sm font-mono ${links > 50 ? 'text-green-600 animate-pulse' : 'text-green-600'}`}\n              >\n                {links} links\n              </div>\n              <CardHeader className=\"text-lg font-semibold text-green-600\">\n                🔗 Shortlink Manager\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-500 mb-2\">Create and manage short schema links.</p>\n                <a href=\"/admin/links\" className=\"text-blue-600 text-sm underline\">\n                  Open Shortlinks →\n                </a>\n                <button\n                  onClick={async () => {\n                    const token = localStorage.getItem('sb-access-token');\n                    const res = await fetch('/api/admin/logs-export-csv?table=schema_links', {\n                      method: 'POST',\n                      headers: { Authorization: `Bearer ${token}` },\n                    });\n                    const blob = await res.blob();\n                    const url = URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    a.href = url;\n                    a.download = 'schema-links.csv';\n                    a.click();\n                    URL.revokeObjectURL(url);\n                  }}\n                  className=\"mt-2 text-xs text-green-600 underline hover:text-green-700\"\n                >\n                  Download Schema Links CSV\n                </button>\n              </CardContent>\n            </Card>\n            <Card className=\"border-l-4 border-yellow-500\">\n              <div\n                className={`absolute top-2 right-3 text-sm font-mono ${emails > 10 ? 'text-yellow-600 animate-pulse' : 'text-yellow-600'}`}\n              >\n                {emails} emails\n              </div>\n              <CardHeader className=\"text-lg font-semibold text-yellow-600\">\n                📬 Email Summary\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-500 mb-2\">\n                  Review auto-generated summaries or drafts.\n                </p>\n                <a href=\"/admin/email-summary\" className=\"text-blue-600 text-sm underline\">\n                  Check Inbox →\n                </a>\n              </CardContent>\n            </Card>\n            <Card className=\"relative border-l-4 border-purple-500 transition-transform duration-200 hover:scale-[1.01] hover:shadow-md\">\n              <div\n                className={`absolute top-2 right-3 text-sm font-mono ${logs > 25 ? 'text-purple-600 animate-pulse' : 'text-purple-600'}`}\n              >\n                {logs} logs\n              </div>\n              <CardHeader className=\"text-lg font-semibold text-purple-600\">\n                📥 Export Logs\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-500 mb-2\">\n                  Download platform usage logs and events.\n                </p>\n                <button\n                  onClick={async () => {\n                    const token = localStorage.getItem('sb-access-token');\n                    const res = await fetch('/api/admin/logs-export-csv?table=log_events', {\n                      method: 'POST',\n                      headers: { Authorization: `Bearer ${token}` },\n                    });\n                    const blob = await res.blob();\n                    const url = URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    a.href = url;\n                    a.download = 'logs-export.csv';\n                    a.click();\n                    URL.revokeObjectURL(url);\n                  }}\n                  className=\"mt-2 text-xs text-blue-600 underline hover:text-blue-700\"\n                >\n                  Download Logs CSV\n                </button>\n                <button\n                  onClick={async () => {\n                    if (!confirm('Are you sure you want to clear all logs?')) return;\n                    const token = localStorage.getItem('sb-access-token');\n                    const res = await fetch('/api/admin/clear-logs', {\n                      method: 'POST',\n                      headers: { Authorization: `Bearer ${token}` },\n                    });\n                    const result = await res.json();\n\n                    if (res.ok) {\n                      alert('Logs cleared successfully');\n                      setLogs(0);\n                    } else {\n                      alert(`Failed to clear logs: ${result.error}`);\n                    }\n                  }}\n                  className=\"mt-2 text-xs text-red-500 underline hover:text-red-600\"\n                >\n                  Clear Logs\n                </button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/docs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fs' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\n\nexport default function DocsPage() {\n  const [html, setHtml] = useState('');\n\n  useEffect(() => {\n    fetch('/api/readme')\n      .then((res) => res.text())\n      .then(setHtml);\n  }, []);\n\n  return (\n    <div className=\"prose mx-auto max-w-4xl p-6\">\n      <div dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/embed-views.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'views'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [views]","fix":{"range":[2076,2078],"text":"[views]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/admin/embed-views.tsx\nimport { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport Head from 'next/head';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nfunction getFlagEmoji(countryCode: string) {\n  if (!countryCode || countryCode.length !== 2) return '🌐';\n  return countryCode\n    .toUpperCase()\n    .replace(/./g, (char) => String.fromCodePoint(127397 + char.charCodeAt(0)));\n}\n\nexport default function EmbedViewsDashboard() {\n  const [views, setViews] = useState<any[]>([]);\n  const [locationTotals, setLocationTotals] = useState<Record<string, number>>({});\n  const [startDate, setStartDate] = useState<string>('');\n  const [endDate, setEndDate] = useState<string>('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const recentCounts = views.reduce(\n      (acc, v) => {\n        const now = new Date();\n        const ts = new Date(v.created_at);\n        const deltaHours = (now.getTime() - ts.getTime()) / 36e5;\n        if (deltaHours <= 24) {\n          acc[v.schema_id] = (acc[v.schema_id] || 0) + 1;\n        }\n        return acc;\n      },\n      {} as Record<string, number>\n    );\n    for (const [schema_id, count] of Object.entries(recentCounts)) {\n      if ((count as number) >= 100) {\n        fetch('/api/slack/embed-alert', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ schema_id, count }),\n        });\n      }\n    }\n    supabase\n      .from('embed_views')\n      .select('*')\n      .order('created_at', { ascending: false })\n      .then(({ data }) => {\n        setViews(data || []);\n        const locs: Record<string, number> = {};\n        (data || []).forEach((v) => {\n          const loc = v.location || 'Unknown';\n          locs[loc] = (locs[loc] || 0) + 1;\n        });\n        setLocationTotals(locs);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <Head>\n        <title>Embed View Logs</title>\n      </Head>\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <div className=\"flex gap-4 mb-4\">\n          <label className=\"text-sm text-gray-500\">Date Range:</label>\n          <input\n            type=\"date\"\n            className=\"border px-2 py-1 rounded text-sm\"\n            onChange={(e) => setStartDate(e.target.value)}\n          />\n          <span className=\"text-gray-500\">to</span>\n          <input\n            type=\"date\"\n            className=\"border px-2 py-1 rounded text-sm\"\n            onChange={(e) => setEndDate(e.target.value)}\n          />\n        </div>\n        <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-4\">\n          <input\n            type=\"text\"\n            placeholder=\"Filter by schema ID, referrer, or date...\"\n            onChange={(e) => {\n              const val = e.target.value.toLowerCase();\n              setViews((prev) =>\n                prev.filter(\n                  (v) =>\n                    v.schema_id.toLowerCase().includes(val) ||\n                    (v.referrer || '').toLowerCase().includes(val) ||\n                    new Date(v.created_at).toLocaleString().toLowerCase().includes(val)\n                )\n              );\n            }}\n            className=\"border text-sm px-2 py-1 rounded w-full md:max-w-xs\"\n          />\n          <button\n            onClick={() => {\n              const csv = [\n                ['schema_id', 'referrer', 'created_at'],\n                ...views.map((v) => [v.schema_id, v.referrer || '', v.created_at]),\n              ]\n                .map((r) => r.join(','))\n                .join('\\n');\n              const blob = new Blob([csv], { type: 'text/csv' });\n              const url = URL.createObjectURL(blob);\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = 'embed-views.csv';\n              a.click();\n              URL.revokeObjectURL(url);\n            }}\n            className=\"bg-blue-700 text-white text-sm px-4 py-1 rounded\"\n          >\n            Export CSV\n          </button>\n        </div>\n        <h1 className=\"text-xl font-bold mb-4\">📊 Embed View Logs</h1>\n        <div className=\"w-full h-64 mb-6\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={views.reduce(\n                (acc, v) => {\n                  const day = new Date(v.created_at).toISOString().slice(0, 10);\n                  const ref = v.referrer || 'Other';\n                  const key = `${day}|${ref}`;\n                  const existing = acc.find((d: { key: string }) => d.key === key);\n                  if (existing) existing.count++;\n                  else acc.push({ date: day, referrer: ref, count: 1, key });\n                  return acc;\n                },\n                [] as {\n                  date: string;\n                  referrer: string;\n                  count: number;\n                  key: string;\n                }[]\n              )}\n            >\n              <XAxis dataKey=\"date\" interval=\"preserveStartEnd\" fontSize={12} />\n              <YAxis allowDecimals={false} fontSize={12} />\n              <Tooltip />\n              {[...new Set(views.map((v) => v.referrer || 'Other'))].map((ref, i) => (\n                <Bar\n                  key={ref}\n                  dataKey={(entry) => (entry.referrer === ref ? entry.count : 0)}\n                  name={ref}\n                  stackId=\"a\"\n                  fill={`hsl(${(i * 70) % 360}, 60%, 60%)`}\n                />\n              ))}\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"text-sm text-gray-600\">Filter by country:</label>\n          <select\n            onChange={(e) => {\n              const c = e.target.value;\n              if (c === '') return;\n              setViews((prev) => prev.filter((v) => v.country_code === c));\n            }}\n            className=\"border px-2 py-1 text-sm rounded w-full md:max-w-sm\"\n          >\n            <option value=\"\">-- All Countries --</option>\n            {[...new Set(views.map((v) => v.country_code).filter(Boolean))].map((code) => (\n              <option key={code} value={code}>\n                {code}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"text-sm text-gray-600\">Filter by schema ID:</label>\n          <select\n            onChange={(e) => {\n              const id = e.target.value;\n              if (id === '') return;\n              setViews((prev) => prev.filter((v) => v.schema_id === id));\n            }}\n            className=\"border px-2 py-1 text-sm rounded w-full md:max-w-sm\"\n          >\n            <option value=\"\">-- All Schemas --</option>\n            {[...new Set(views.map((v) => v.schema_id))].map((id) => (\n              <option key={id} value={id}>\n                {id}\n              </option>\n            ))}\n          </select>\n        </div>\n        <input\n          type=\"text\"\n          placeholder=\"Filter by schema ID, referrer, or date...\"\n          onChange={(e) => {\n            const val = e.target.value.toLowerCase();\n            setViews((prev) =>\n              prev.filter(\n                (v) =>\n                  v.schema_id.toLowerCase().includes(val) ||\n                  (v.referrer || '').toLowerCase().includes(val) ||\n                  new Date(v.created_at).toLocaleString().toLowerCase().includes(val)\n              )\n            );\n          }}\n          className=\"border text-sm px-2 py-1 rounded w-full mb-4\"\n        />\n        {loading && <p className=\"text-gray-400\">Loading...</p>}\n        {!loading && views.length === 0 && <p>No embed views recorded.</p>}\n        <table className=\"w-full text-sm border mt-4\">\n          <thead>\n            <tr className=\"bg-gray-100 text-left\">\n              <th className=\"p-2\">Schema ID</th>\n              <th className=\"p-2\">Country</th>\n              <th className=\"p-2\">Region</th>\n              <th className=\"p-2\">Schema ID</th>\n              <th className=\"p-2\">Referrer</th>\n              <th className=\"p-2\">Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {views\n              .filter((v) => {\n                const created = new Date(v.created_at);\n                const start = startDate ? new Date(startDate) : null;\n                const end = endDate ? new Date(endDate + 'T23:59:59') : null;\n                return (!start || created >= start) && (!end || created <= end);\n              })\n              .map((v) => (\n                <tr key={v.id} className=\"border-t\">\n                  <td className=\"p-2 text-blue-600\">\n                    <a\n                      href={`/admin/zod-playground?schema_id=${v.schema_id}`}\n                      className=\"underline\"\n                    >\n                      {v.schema_id}\n                    </a>\n                  </td>\n                  <td className=\"p-2 text-gray-600\">{v.country_code || '—'}</td>\n                  <td className=\"p-2 text-gray-600\">{v.region || '—'}</td>\n                  <td className=\"p-2 text-gray-600\">{v.referrer || '—'}</td>\n                  <td className=\"p-2 text-gray-500\">{new Date(v.created_at).toLocaleString()}</td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n\n        <div className=\"mt-8\">\n          <h2 className=\"text-lg font-semibold mb-2\">🌍 Views by Location</h2>\n          <ul className=\"text-sm text-gray-600 list-disc pl-5\">\n            {Object.entries(locationTotals).map(([loc, count]) => (\n              <li key={loc}>\n                {loc}: {count}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"mt-8\">\n          <h2 className=\"text-lg font-semibold mb-2\">🌐 Views by Country</h2>\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 text-sm text-gray-600\">\n            {Object.entries(locationTotals).map(([loc, count]) => (\n              <div key={loc} className=\"flex items-center gap-2\">\n                <span className=\"text-xl\">{getFlagEmoji(loc)}</span>\n                <span>\n                  {loc}: {count}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <button\n          onClick={() => {\n            const csv = [\n              ['schema_id', 'referrer', 'created_at'],\n              ...views.map((v) => [v.schema_id, v.referrer || '', v.created_at]),\n            ]\n              .map((r) => r.join(','))\n              .join('\\n');\n            const blob = new Blob([csv], { type: 'text/csv' });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = 'embed-views.csv';\n            a.click();\n            URL.revokeObjectURL(url);\n          }}\n          className=\"mt-6 bg-blue-700 text-white px-4 py-1 rounded\"\n        >\n          Export CSV\n        </button>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/links.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/logs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setFilterType' is assigned a value but never used.","line":24,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setFilterUser' is assigned a value but never used.","line":25,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setStartDate' is assigned a value but never used.","line":26,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setEndDate' is assigned a value but never used.","line":27,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useCurrentUser } from '@/hooks/useCurrentUser';\nimport { Bar, Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nexport default function AdminLogsPage() {\n  const { user } = useCurrentUser();\n  const [logs, setLogs] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filterType, setFilterType] = useState('');\n  const [filterUser, setFilterUser] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n\n  const isAdmin = user?.role === 'admin';\n\n  useEffect(() => {\n    if (!isAdmin) return;\n    const fetchLogs = async () => {\n      let query = supabase\n        .from('site_events')\n        .select('*')\n        .order('created_at', { ascending: false });\n      if (filterType) query = query.eq('type', filterType);\n      if (filterUser) query = query.ilike('payload->>user_email', `%${filterUser}%`);\n      if (startDate) query = query.gte('created_at', startDate);\n      if (endDate) query = query.lte('created_at', endDate + 'T23:59:59Z');\n      const { data, error } = await query;\n      if (error) console.error(error);\n      else setLogs(data || []);\n      setLoading(false);\n    };\n    fetchLogs();\n  }, [filterType, filterUser, startDate, endDate, isAdmin]);\n\n  const exportCSV = () => {\n    const rows = logs.map((log) => ({\n      created_at: log.created_at,\n      type: log.type,\n      user_email: log.payload?.user_email || '',\n      payload: JSON.stringify(log.payload),\n    }));\n    const csv =\n      'created_at,type,user_email,payload\\n' +\n      rows\n        .map((r) => `${r.created_at},${r.type},${r.user_email},\"${r.payload.replace(/\"/g, '\"\"')}\"`)\n        .join('\\n');\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'logs.csv';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const downloadPayload = (payload: any, id: string) => {\n    const blob = new Blob([JSON.stringify(payload, null, 2)], {\n      type: 'application/json',\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `payload-${id}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const chartData = (() => {\n    const counts: Record<string, number> = {};\n    logs.forEach((log) => {\n      const date = new Date(log.created_at).toISOString().split('T')[0];\n      counts[date] = (counts[date] || 0) + 1;\n    });\n    const labels = Object.keys(counts).sort();\n    return {\n      labels,\n      datasets: [\n        {\n          label: 'Logs per Day',\n          data: labels.map((label) => counts[label]),\n          backgroundColor: 'rgba(59, 130, 246, 0.7)',\n        },\n      ],\n    };\n  })();\n\n  const exportChartImage = (canvasId: string, filename: string) => {\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) return;\n    const url = canvas.toDataURL('image/png');\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n  };\n\n  const exportWeeklySummaryPDF = async () => {\n    const html2pdf = (await import('html2pdf.js')).default;\n    const element = document.getElementById('weekly-summary-container');\n    if (!element) return;\n    html2pdf()\n      .set({\n        margin: 0.5,\n        filename: 'weekly-summary.pdf',\n        html2canvas: { scale: 2 },\n        jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' },\n      })\n      .from(element)\n      .save();\n  };\n\n  const emailWeeklySummary = async () => {\n    const session = await supabase.auth.getSession();\n    const accessToken = session.data.session?.access_token;\n    const userEmail = session.data.session?.user?.user_metadata?.email;\n\n    const res = await fetch('https://<your-project>.functions.supabase.co/email-weekly-summary', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify({ summary: chartData, userEmail }),\n    });\n\n    const result = await res.json();\n    alert(result.message || 'Email request sent');\n  };\n\n  if (!user?.id) return <p className=\"p-6 text-center\">🔒 You must be signed in to view logs.</p>;\n  if (!isAdmin)\n    return <p className=\"p-6 text-center text-red-600\">⛔ Access denied. Admins only.</p>;\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">📜 Deployment Logs</h1>\n        <button onClick={exportCSV} className=\"bg-gray-800 text-white px-4 py-2 rounded text-sm\">\n          Export CSV\n        </button>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <button onClick={exportCSV} className=\"text-sm text-green-700 underline\">\n          Export CSV\n        </button>\n        <button\n          onClick={() => exportChartImage('weekly-summary-canvas', 'weekly-summary.png')}\n          className=\"text-sm text-blue-600 underline\"\n        >\n          Export Chart as Image\n        </button>\n        <button onClick={exportWeeklySummaryPDF} className=\"text-sm text-purple-700 underline\">\n          Download Weekly PDF\n        </button>\n        <button onClick={emailWeeklySummary} className=\"text-sm text-amber-700 underline\">\n          Email Summary\n        </button>\n      </div>\n\n      <div id=\"weekly-summary-container\" className=\"bg-white p-4 border rounded shadow space-y-4\">\n        <h2 className=\"text-lg font-semibold\">📊 Log Breakdown</h2>\n        <Bar\n          id=\"weekly-summary-canvas\"\n          data={chartData}\n          options={{\n            responsive: true,\n            plugins: { legend: { position: 'top' } },\n          }}\n        />\n        <h2 className=\"text-lg font-semibold\">📈 Total Logs Over Time</h2>\n        <Line\n          data={chartData}\n          options={{\n            responsive: true,\n            plugins: { legend: { position: 'top' } },\n          }}\n        />\n      </div>\n\n      {loading && <p>Loading...</p>}\n      {!loading && logs.length === 0 && <p>No logs found.</p>}\n      <div className=\"space-y-4\">\n        {logs.map((log) => (\n          <div key={log.id} className=\"bg-white p-4 border rounded shadow text-sm\">\n            <p className=\"text-gray-500\">🕒 {new Date(log.created_at).toLocaleString()}</p>\n            <p className=\"font-semibold text-blue-700\">{log.type}</p>\n            <p className=\"text-xs text-gray-600\">👤 {log.payload?.user_email || 'N/A'}</p>\n            <pre className=\"overflow-auto max-h-64 bg-gray-100 mt-2 p-2 rounded\">\n              {JSON.stringify(log.payload, null, 2)}\n            </pre>\n            <button\n              onClick={() => downloadPayload(log.payload, log.id)}\n              className=\"mt-2 text-xs text-blue-600 underline\"\n            >\n              Download Payload JSON\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/param-lab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'summarizeQuery' is defined but never used.","line":8,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deletePreset' is assigned a value but never used.","line":113,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleApply' is assigned a value but never used.","line":125,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleShare' is assigned a value but never used.","line":131,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'query' is defined but never used. Allowed unused args must match /^_/u.","line":190,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/admin/param-lab.tsx\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport QRCode from 'react-qr-code';\nimport { createClient } from '@supabase/supabase-js';\n\nimport { queryParamSchemas } from '@/admin/lib/queryParamSchemas';\nimport { extractTags, summarizeQuery } from '@/admin/lib/queryUtils';\nimport QueryParamEditor from '@/components/admin/query-param-editor';\nimport TagFilterControls from '@/components/admin/tag-filter-controls';\nimport { useCurrentUser } from '@/hooks/useCurrentUser';\n// import PresetCard from '@/components/admin/preset-card';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function ParamLabPage() {\n  const searchParams = useSearchParams();\n  const { user } = useCurrentUser();\n  const slug = (searchParams?.get('slug') || 'campaign') as string;\n  const schema = queryParamSchemas[slug];\n\n  const [paramsString, setParamsString] = useState('');\n  const [shareUrl, setShareUrl] = useState('');\n  const [presets, setPresets] = useState<Record<string, string>>({});\n  const [presetName, setPresetName] = useState('');\n  const [tagFilter, setTagFilter] = useState<string[]>(() => {\n    if (typeof window !== 'undefined') {\n      const url = new URL(window.location.href);\n      const param = url.searchParams.get('tags');\n      return param\n        ? param\n            .split(',')\n            .map((t) => t.trim().toLowerCase())\n            .filter(Boolean)\n        : [];\n    }\n    return [];\n  });\n  const [tagMatchMode, setTagMatchMode] = useState<'any' | 'all'>(() => {\n    if (typeof window !== 'undefined') {\n      const url = new URL(window.location.href);\n      const mode = url.searchParams.get('tagMode');\n      return mode === 'any' ? 'any' : 'all';\n    }\n    return 'all';\n  });\n\n  const updateShareInfo = () => {\n    const url = new URL(window.location.href);\n    const paramEntries = Array.from(url.searchParams.entries()).filter(([k]) => k !== 'slug');\n    const query = paramEntries.map(([k, v]) => `${k}=${encodeURIComponent(v)}`).join('&');\n    setParamsString(query);\n    setShareUrl(window.location.href);\n  };\n\n  useEffect(() => {\n    updateShareInfo();\n  }, [slug, searchParams]);\n\n  useEffect(() => {\n    if (!user?.id) return;\n    supabase\n      .from('param_presets')\n      .select('*')\n      .eq('slug', slug)\n      .eq('user_id', user.id)\n      .then(({ data }) => {\n        const fromCloud = data?.reduce(\n          (acc, curr) => {\n            acc[`☁️ ${curr.name}`] = curr.query;\n            return acc;\n          },\n          {} as Record<string, string>\n        );\n        const local = JSON.parse(localStorage.getItem('param-presets') || '{}');\n        setPresets({ ...fromCloud, ...local });\n      });\n  }, [slug, user]);\n\n  const allTags = Object.entries(\n    Object.values(presets)\n      .flatMap((query) => extractTags(query))\n      .reduce(\n        (acc, tag) => {\n          const key = tag.toLowerCase();\n          acc[key] = (acc[key] || 0) + 1;\n          return acc;\n        },\n        {} as Record<string, number>\n      )\n  )\n    .filter(([_, count]) => count >= 2)\n    .sort((a, b) => b[1] - a[1]);\n\n  const savePreset = async () => {\n    const updated = { ...presets, [presetName]: paramsString };\n    setPresets(updated);\n    localStorage.setItem('param-presets', JSON.stringify(updated));\n    if (user?.id) {\n      await supabase.from('param_presets').upsert({\n        slug,\n        name: presetName,\n        query: paramsString,\n        user_id: user.id,\n      });\n    }\n    alert('Preset saved!');\n  };\n\n  const deletePreset = async (name: string) => {\n    if (!confirm(`Delete preset \"${name}\"?`)) return;\n    const updated = { ...presets };\n    delete updated[name];\n    setPresets(updated);\n    localStorage.setItem('param-presets', JSON.stringify(updated));\n    await supabase\n      .from('param_presets')\n      .delete()\n      .match({ slug, name: name.replace(/^☁️ /, ''), user_id: user?.id });\n  };\n\n  const handleApply = (query: string) => {\n    const url = new URL(window.location.href);\n    url.search = `?slug=${slug}&${query}`;\n    window.location.href = url.pathname + url.search;\n  };\n\n  const handleShare = (name: string, query: string) => {\n    const url = `${window.location.origin}/admin/param-lab?slug=${slug}&${query}`;\n    navigator.clipboard.writeText(url);\n    alert(`Copied shareable link for \"${name}\"!`);\n  };\n\n  if (!schema) return <div className=\"p-4 text-red-600\">Unknown schema: {slug}</div>;\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">🧪 Param Lab</h1>\n        <select\n          className=\"border px-2 py-1 rounded\"\n          value={slug}\n          onChange={(e) => (window.location.href = `/admin/param-lab?slug=${e.target.value}`)}\n        >\n          {Object.keys(queryParamSchemas).map((key) => (\n            <option key={key} value={key}>\n              {key}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"text-sm text-gray-500 space-y-2\">\n        <p>\n          <strong>Query Preview:</strong> {paramsString || '(none)'}\n        </p>\n        <div className=\"border p-2 inline-block bg-white\">\n          <QRCode value={shareUrl} />\n        </div>\n      </div>\n      <TagFilterControls\n        tagFilter={tagFilter}\n        setTagFilter={setTagFilter}\n        tagMatchMode={tagMatchMode}\n        setTagMatchMode={setTagMatchMode}\n        allTags={allTags}\n      />\n      <div className=\"flex gap-2\">\n        <input\n          value={presetName}\n          onChange={(e) => setPresetName(e.target.value)}\n          placeholder=\"Preset name\"\n          className=\"border px-2 py-1 rounded w-full\"\n        />\n        <button onClick={savePreset} className=\"text-sm bg-green-600 text-white px-4 py-1 rounded\">\n          Save Preset\n        </button>\n      </div>\n      <ul className=\"space-y-2\">\n        {Object.entries(presets)\n          .sort(([a], [b]) => a.localeCompare(b))\n          .filter(([_, query]) => {\n            const tags = extractTags(query).map((t) => t.toLowerCase());\n            return tagMatchMode === 'all'\n              ? tagFilter.every((f) => tags.includes(f))\n              : tagFilter.length === 0 || tagFilter.some((f) => tags.includes(f));\n          })\n          .map(([name, query]) => (\n            // <PresetCard\n            //   key={name}\n            //   name={name}\n            //   query={query}\n            //   slug={slug}\n            //   onDelete={deletePreset}\n            //   onShare={handleShare}\n            //   onApply={handleApply}\n            // />\n            <div key={name}>{name}</div>\n          ))}\n      </ul>\n      <QueryParamEditor schema={schema as any} slug={slug} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/schemas.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/screenshots.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function ScreenshotQueuePage() {\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/screenshot/queue')\n      .then((res) => res.json())\n      .then(setItems);\n  }, []);\n\n  return (\n    <div className=\"p-6 text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">📸 Screenshot Queue</h1>\n      <table className=\"w-full text-sm text-left border-collapse\">\n        <thead>\n          <tr>\n            <th className=\"border-b p-2\">Domain</th>\n            <th className=\"border-b p-2\">Status</th>\n            <th className=\"border-b p-2\">Requested</th>\n            <th className=\"border-b p-2\">Completed</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((item: any) => (\n            <tr key={item.id}>\n              <td className=\"p-2\">{item.domain}</td>\n              <td className=\"p-2\">{item.status}</td>\n              <td className=\"p-2\">{new Date(item.requested_at).toLocaleString()}</td>\n              <td className=\"p-2\">\n                {item.completed_at ? new Date(item.completed_at).toLocaleString() : '-'}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/share/[id].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":61,"column":11,"nodeType":"JSXOpeningElement","endLine":61,"endColumn":94}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRouter, useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function SharePage() {\n  const searchParams = useSearchParams();\n  const id = searchParams?.get('id') as string;\n  const [profile, setProfile] = useState<any>(null);\n\n  useEffect(() => {\n    if (!id || typeof id !== 'string') return;\n\n    supabase\n      .from('branding_profiles')\n      .select('*')\n      .eq('id', id)\n      .single()\n      .then(({ data }) => {\n        if (data) setProfile(data);\n      });\n  }, [id]);\n\n  const handleExport = async () => {\n    const html2pdf = (await import('html2pdf.js')).default;\n    const el = document.getElementById('pdf-container');\n    if (el) {\n      html2pdf()\n        .set({\n          filename: `${profile.name}-preview.pdf`,\n          margin: 10,\n          html2canvas: { scale: 2 },\n          jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\n        })\n        .from(el)\n        .save();\n    }\n  };\n\n  if (!profile) return <p className=\"p-6\">Loading profile...</p>;\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6 space-y-6\">\n      <div id=\"pdf-container\" className=\"space-y-6 p-6 bg-white rounded shadow\">\n        <h1 className=\"text-xl font-bold\">{profile.name}</h1>\n\n        <div className=\"flex items-center gap-4\">\n          <p className=\"text-sm\">\n            Theme: <strong>{profile.theme}</strong>\n          </p>\n          <p className=\"text-sm\">\n            Brand: <strong>{profile.brand}</strong>\n          </p>\n        </div>\n\n        {profile.logo_url && (\n          <img src={profile.logo_url} alt=\"Logo\" className=\"h-10 w-10 rounded-full border\" />\n        )}\n\n        <p className=\"text-xs text-gray-400 text-right\">Powered by QuickSites Studio</p>\n      </div>\n\n      <button className=\"bg-blue-600 text-white px-4 py-2 rounded\" onClick={handleExport}>\n        Download PDF\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/sites.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/sites/new.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/smartlinks/debug.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/smartlinks/gallery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/smartlinks/grid-view.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":4,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'parseISO' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isAfter' is defined but never used.","line":5,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isBefore' is defined but never used.","line":5,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRouter } from 'next/navigation.js';\nimport { useMemo, useState } from 'react';\nimport { parseISO, isAfter, isBefore } from 'date-fns';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport SmartLinkGrid from '@/components/admin/smart-link-grid';\nimport SmartLinkGallery from '@/components/admin/smart-link-gallery';\nimport { SmartLinkProvider } from '@/components/admin/smart-link-provider';\nimport { mockSmartLinks } from '@/tests/mocks/mocks/mockSmartLinks';\nimport type { SmartLinkItem } from '@/types/SmartLinkItem';\n\nexport default function SmartLinkGridPage() {\n  const items: SmartLinkItem[] = mockSmartLinks;\n  const router = useRouter();\n\n  const searchParams = new URLSearchParams(\n    typeof window !== 'undefined' ? window.location.search : ''\n  );\n  const sort = searchParams.get('sort') || '';\n  const view = searchParams.get('view') || 'grid';\n  const tag = searchParams.get('tag') || '';\n\n  const updateSearchParam = (key: string, value: string) => {\n    const params = new URLSearchParams(window.location.search);\n    params.set(key, value);\n    return `?${params.toString()}`;\n  };\n\n  const sorted = [...items].sort((a, b) => {\n    if (sort === 'type') return a.type.localeCompare(b.type);\n    if (sort === 'theme') return (a.theme || '').localeCompare(b.theme || '');\n    return 0;\n  });\n\n  return (\n    <SmartLinkProvider>\n      <main className=\"p-6\">\n        <div className=\"flex items-center justify-between flex-wrap gap-4 mb-4\">\n          <h1 className=\"text-xl font-bold text-white\">🧱 SmartLink Grid View</h1>\n          <div className=\"flex flex-wrap gap-2 items-center\">\n            <button\n              className=\"text-xs px-3 py-1 rounded bg-zinc-800 hover:bg-zinc-700 border border-zinc-700\"\n              onClick={() => router.push(updateSearchParam('sort', 'type'))}\n            >\n              Sort by Type\n            </button>\n            <button\n              className=\"text-xs px-3 py-1 rounded bg-zinc-800 hover:bg-zinc-700 border border-zinc-700\"\n              onClick={() => router.push(updateSearchParam('sort', 'theme'))}\n            >\n              Sort by Theme\n            </button>\n          </div>\n\n          <div className=\"flex gap-2 flex-wrap\">\n            {['template', 'snapshot'].map((t) => (\n              <button\n                key={t}\n                className={`text-xs px-3 py-1 rounded border border-zinc-600 hover:bg-zinc-700 ${\n                  tag === t ? 'bg-blue-600 text-white' : 'bg-zinc-800 text-zinc-300'\n                }`}\n                onClick={() => router.push(updateSearchParam('tag', t))}\n              >\n                {t}\n              </button>\n            ))}\n            <button\n              className={`text-xs px-3 py-1 rounded border ${\n                view === 'grid' ? 'bg-blue-700 text-white' : 'bg-zinc-800 text-zinc-300'\n              } border-zinc-600`}\n              onClick={() => router.push(updateSearchParam('view', 'grid'))}\n            >\n              Grid\n            </button>\n            <button\n              className={`text-xs px-3 py-1 rounded border ${\n                view === 'gallery' ? 'bg-blue-700 text-white' : 'bg-zinc-800 text-zinc-300'\n              } border-zinc-600`}\n              onClick={() => router.push(updateSearchParam('view', 'gallery'))}\n            >\n              Gallery\n            </button>\n          </div>\n        </div>\n\n        <AnimatePresence mode=\"wait\">\n          {view === 'gallery' ? (\n            <motion.div\n              key=\"gallery\"\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2 }}\n            >\n              <SmartLinkGallery items={sorted} />\n            </motion.div>\n          ) : (\n            <motion.div\n              key=\"grid\"\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2 }}\n            >\n              <SmartLinkGrid items={sorted} />\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </main>\n    </SmartLinkProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/smartlinks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/templates-new.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎············value={template.layout}⏎············onChange={(e)·=>·handleChange('layout',·e.target.value)}⏎·········` with `·value={template.layout}·onChange={(e)·=>·handleChange('layout',·e.target.value)}`","line":106,"column":17,"nodeType":null,"messageId":"replace","endLine":109,"endColumn":10,"fix":{"range":[2864,2979],"text":" value={template.layout} onChange={(e) => handleChange('layout', e.target.value)}"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\n\nexport default function NewTemplatePage() {\n  const router = useRouter();\n  const searchParams = useSearchParams(); // ✅ must be at top-level\n\n  const [loading, setLoading] = useState(true);\n  const [template, setTemplate] = useState({\n    template_name: '',\n    industry: '',\n    layout: 'default',\n    color_scheme: 'blue-yellow',\n    data: `{\n  \"pages\": [\n    {\n      \"slug\": \"index\",\n      \"title\": \"{{business_name}}\",\n      \"meta_description\": \"\",\n      \"content_blocks\": []\n    }\n  ]\n}`,\n  });\n\n  // Load existing template if ?copy=template_name\n  useEffect(() => {\n    const copy = searchParams?.get('copy');\n    if (copy && typeof copy === 'string') {\n      fetch(`/api/templates/${copy}`)\n        .then((res) => res.json())\n        .then((data) => {\n          setTemplate({\n            template_name: `${data.template_name}-copy`,\n            industry: data.industry,\n            layout: data.layout,\n            color_scheme: data.color_scheme,\n            data: JSON.stringify(data.data, null, 2),\n          });\n        })\n        .finally(() => setLoading(false));\n    } else {\n      setLoading(false);\n    }\n  }, [searchParams]);\n\n  const handleChange = (field: string, value: string) => {\n    setTemplate((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleCreate = async () => {\n    try {\n      const payload = {\n        ...template,\n        data: JSON.parse(template.data),\n      };\n\n      const res = await fetch('/api/templates/create', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (res.ok) {\n        router.push('/admin/templates');\n      } else {\n        const err = await res.json();\n        alert('Error: ' + err.error);\n      }\n    } catch (e: any) {\n      alert('Invalid JSON: ' + e.message);\n    }\n  };\n\n  if (loading) return <p className=\"p-6\">Loading template...</p>;\n\n  return (\n    <div className=\"p-6 max-w-2xl space-y-6\">\n      <h2 className=\"text-xl font-bold\">Create New Template</h2>\n\n      <div className=\"grid gap-4\">\n        <div>\n          <Label>Template Name</Label>\n          <Input\n            value={template.template_name}\n            onChange={(e) => handleChange('template_name', e.target.value)}\n          />\n        </div>\n\n        <div>\n          <Label>Industry</Label>\n          <Input\n            value={template.industry}\n            onChange={(e) => handleChange('industry', e.target.value)}\n          />\n        </div>\n\n        <div>\n          <Label>Layout</Label>\n          <Input\n            value={template.layout}\n            onChange={(e) => handleChange('layout', e.target.value)}\n          />\n        </div>\n\n        <div>\n          <Label>Color Scheme</Label>\n          <Input\n            value={template.color_scheme}\n            onChange={(e) => handleChange('color_scheme', e.target.value)}\n          />\n        </div>\n\n        <div>\n          <Label>Template JSON (data)</Label>\n          <Textarea\n            rows={12}\n            className=\"font-mono text-sm\"\n            value={template.data}\n            onChange={(e) => handleChange('data', e.target.value)}\n          />\n        </div>\n\n        <Button onClick={handleCreate}>Save Template</Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/templates.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { createClient } from '@supabase/supabase-js';\nimport Link from 'next/link';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectTrigger,\n  SelectContent,\n  SelectItem,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport TemplateEditor from '@/components/admin/templates/template-editor';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function TemplatesPage() {\n  const [templateList, setTemplateList] = useState<any[]>([]);\n  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);\n\n  useEffect(() => {\n    supabase\n      .from('templates')\n      .select('template_name')\n      .order('updated_at', { ascending: false })\n      .then(({ data }) => {\n        if (data && data.length > 0) {\n          setTemplateList(data);\n          setSelectedTemplate(data[0].template_name);\n        }\n      });\n  }, []);\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-end\">\n        <div className=\"space-y-1\">\n          <Label>Select Template</Label>\n          <Select\n            value={selectedTemplate ?? ''}\n            onValueChange={(value) => setSelectedTemplate(value)}\n          >\n            <SelectTrigger className=\"w-[260px]\">\n              <SelectValue placeholder=\"Select\" />\n            </SelectTrigger>\n            <SelectContent>\n              {templateList.map((t) => (\n                <SelectItem key={t.template_name} value={t.template_name}>\n                  {t.template_name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"flex gap-3 items-end\">\n          {typeof window !== 'undefined' && selectedTemplate ? (\n            <Link href={`/admin/templates-new?copy=${selectedTemplate}`}>\n              <Button variant=\"secondary\">Duplicate</Button>\n            </Link>\n          ) : (\n            <Button variant=\"secondary\" disabled title=\"Waiting for hydration...\">\n              Duplicate\n            </Button>\n          )}\n          <Link href=\"/admin/templates-new\">\n            <Button>Create New</Button>\n          </Link>\n        </div>\n      </div>\n\n      {selectedTemplate && (\n        <div className=\"border rounded overflow-hidden mt-4\">\n          <TemplateEditor templateName={selectedTemplate} />\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/templates/[name]/activity.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GetServerSideProps' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used.","line":4,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport { GetServerSideProps } from 'next';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function TemplateActivity({ logs, name }: { logs: any[]; name: string }) {\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <h1 className=\"text-2xl font-bold mb-4\">Activity for: {name}</h1>\n      <div className=\"space-y-3\">\n        {logs.map((log) => (\n          <div key={log.id} className=\"border p-3 rounded bg-white shadow-sm\">\n            <p className=\"text-sm\">\n              <strong>{log.action}</strong> by {log.actor || 'unknown'}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              {new Date(log.timestamp).toLocaleString()}\n            </p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/templates/[name]/publish.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GetServerSideProps' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used.","line":8,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GetServerSideProps } from 'next';\nimport { createClient } from '@supabase/supabase-js';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\nimport QRCode from 'react-qr-code';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function PublishTemplate({\n  initialDomain,\n  template_name,\n}: {\n  initialDomain: string;\n  template_name: string;\n}) {\n  const [domain, setDomain] = useState(initialDomain);\n  const [status, setStatus] = useState('idle');\n\n  const handlePublish = async () => {\n    const res = await fetch('/api/templates/publish', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ template_name, domain }),\n    });\n    if (res.ok) {\n      setStatus('success');\n    } else {\n      setStatus('error');\n    }\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6\">\n      <h1 className=\"text-xl font-bold mb-4\">Publish Template: {template_name}</h1>\n      <Input\n        placeholder=\"e.g. demo.quicksite.io/my-tow\"\n        value={domain}\n        onChange={(e) => setDomain(e.target.value)}\n        className=\"mb-4\"\n      />\n      <Button onClick={handlePublish} disabled={!domain}>\n        Publish\n      </Button>\n      {domain && (\n        <div className=\"mt-4\">\n          <p className=\"text-sm mb-2\">Scan to view live site:</p>\n          <QRCode\n            value={`https://yourdomain.com/sites/${domain}`}\n            size={128}\n            style={{ height: 'auto', maxWidth: '128px', width: '128px' }}\n            viewBox={`0 0 128 128`}\n          />\n        </div>\n      )}\n      {status === 'success' && (\n        <p className=\"text-green-600 text-sm mt-2\">✅ Template published to {domain}</p>\n      )}\n      {status === 'error' && (\n        <p className=\"text-red-600 text-sm mt-2\">❌ Failed to publish template</p>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/trash.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GetServerSideProps' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used.","line":5,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport { GetServerSideProps } from 'next';\nimport { Button } from '@/components/ui/button';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function Trash({ templates }: { templates: any[] }) {\n  const restoreTemplate = async (template_name: string) => {\n    const toast = (await import('react-hot-toast')).default;\n\n    const res = await fetch('/api/templates/restore', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ template_name }),\n    });\n\n    if (res.ok) {\n      toast.success('Template restored.');\n      setTimeout(() => window.location.reload(), 1000);\n    } else {\n      toast.error('Restore failed.');\n    }\n  };\n\n  return (\n    <div className=\"max-w-5xl mx-auto p-6 space-y-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Deleted Templates</h1>\n      {templates.map((t) => (\n        <div\n          key={t.template_name}\n          className=\"flex justify-between items-center border p-4 rounded bg-white shadow-sm\"\n        >\n          <div>\n            <h2 className=\"text-lg font-semibold\">{t.template_name}</h2>\n            <p className=\"text-sm text-muted-foreground\">Industry: {t.industry}</p>\n          </div>\n          <Button size=\"sm\" variant=\"secondary\" onClick={() => restoreTemplate(t.template_name)}>\n            Restore\n          </Button>\n        </div>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/admin/views.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/analytics.exportable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ThemedBarChart' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'supabase'. Either exclude it or remove the dependency array. Outer scope values like 'supabase' aren't valid dependencies because mutating them doesn't re-render the component.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[967,977],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'siteId'. Either include it or remove the dependency array. Outer scope values like 'supabase' aren't valid dependencies because mutating them doesn't re-render the component.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [dateFrom, dateTo, mode, siteId]","fix":{"range":[2042,2076],"text":"[dateFrom, dateTo, mode, siteId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useState, useEffect } from 'react';\nimport { supabase } from '@/lib/supabase/client';\n\nimport ThemedBarChart from '@/components/ui/themed-bar-chart';\nimport { Modal } from '@/components/ui/modal';\nimport { Input, Label } from '@/components/ui/form';\nimport { Bar } from 'react-chartjs-2';\n\nexport default function AnalyticsPage() {\n  const [showModal, setShowModal] = useState(false);\n  const [dateFrom, setDateFrom] = useState('');\n  const [dateTo, setDateTo] = useState('');\n  const [mode, setMode] = useState<'views' | 'events'>('views');\n  const [siteId, setSiteId] = useState('');\n  const [siteOptions, setSiteOptions] = useState<{ id: string; domain?: string; name?: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    supabase\n      .from('public_sites')\n      .select('id, domain, name')\n      .then(({ data }: { data: { id: string; domain?: string; name?: string }[] | null }) => {\n        if (data) setSiteOptions(data);\n      });\n  }, [supabase]);\n\n  const [dataByDay, setDataByDay] = useState<Record<string, number>>({});\n\n  useEffect(() => {\n    if (!dateFrom || !dateTo) return;\n\n    const load = async () => {\n      const table = mode === 'views' ? 'published_site_views' : 'site_events';\n      const column = mode === 'views' ? 'viewed_at' : 'created_at';\n\n      const { data, error } = await supabase.from(table).select(`${column},site_id`);\n\n      if (error) return console.error(error);\n\n      // filter by site ID if necessary\n      const filtered = (data || []).filter((row: any) => {\n        if (mode === 'views' && siteId) {\n          return row.site_id === siteId;\n        }\n        return true;\n      });\n\n      // count by day\n      const counts: Record<string, number> = {};\n      for (const row of filtered) {\n        const value = row[column as keyof typeof row];\n        if (typeof value === 'string') {\n          const dayKey = value.slice(0, 10); // \"YYYY-MM-DD\"\n          counts[dayKey] = (counts[dayKey] || 0) + 1;\n        }\n      }\n\n      setDataByDay(counts);\n    };\n\n    load();\n  }, [dateFrom, dateTo, mode, supabase]);\n\n  const chartData = {\n    labels: Object.keys(dataByDay),\n    datasets: [\n      {\n        label: mode === 'views' ? 'Page Views' : 'Event Count',\n        data: Object.values(dataByDay),\n        backgroundColor: 'var(--color-accent)',\n      },\n    ],\n  };\n\n  return (\n    <div className=\"min-h-screen bg-surface text-text p-6 space-y-6\">\n      <h1 className=\"text-2xl font-bold\">📊 Analytics Dashboard</h1>\n\n      <div className=\"flex gap-4 items-end\">\n        <div>\n          <Label>Site ID</Label>\n          <select\n            value={siteId}\n            onChange={(e) => setSiteId(e.target.value)}\n            className=\"bg-zinc-800 text-white border border-zinc-600 rounded px-2 py-1\"\n          >\n            <option value=\"\">All</option>\n            {siteOptions.map((site) => (\n              <option key={site.id} value={site.id}>\n                {site.domain || site.name || site.id.slice(0, 6)}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <Label>Date From</Label>\n          <Input type=\"date\" value={dateFrom} onChange={(e) => setDateFrom(e.target.value)} />\n        </div>\n        <div>\n          <Label>Date To</Label>\n          <Input type=\"date\" value={dateTo} onChange={(e) => setDateTo(e.target.value)} />\n        </div>\n        <div>\n          <Label>Mode</Label>\n          <select\n            value={mode}\n            onChange={(e) => setMode(e.target.value as 'views' | 'events')}\n            className=\"bg-zinc-800 text-white border border-zinc-600 rounded px-2 py-1\"\n          >\n            <option value=\"views\">Page Views</option>\n            <option value=\"events\">Events</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"bg-zinc-900 rounded p-4 shadow\">\n        <Bar data={chartData} options={{ responsive: true }} />\n      </div>\n\n      <button\n        onClick={() => setShowModal(true)}\n        className=\"mt-4 px-4 py-2 bg-brand text-white rounded hover:opacity-90\"\n      >\n        Share / Export\n      </button>\n\n      <button\n        onClick={() => {\n          const rows = Object.entries(dataByDay).map(([date, value]) => ({\n            date,\n            count: value,\n          }));\n          const csv = ['Date,Count', ...rows.map((row) => `${row.date},${row.count}`)].join('\\n');\n          const blob = new Blob([csv], { type: 'text/csv' });\n          const url = URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.download = `analytics_${mode}_${siteId || 'all'}.csv`;\n          link.click();\n          URL.revokeObjectURL(url);\n        }}\n        className=\"ml-4 px-4 py-2 border border-zinc-600 text-text rounded hover:opacity-80\"\n      >\n        Export CSV\n      </button>\n\n      <Modal show={showModal} onClose={() => setShowModal(false)}>\n        <h2 className=\"text-lg font-semibold mb-2\">🔗 Share this report</h2>\n        <p className=\"text-sm text-zinc-300\">\n          Coming soon: PDF export, link share, and filters by domain.\n        </p>\n      </Modal>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/analytics.supabase.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ThemedBarChart' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `⏎`","line":10,"column":1,"nodeType":null,"messageId":"delete","endLine":11,"endColumn":1,"fix":{"range":[354,355],"text":""}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'supabase'. Either exclude it or remove the dependency array. Outer scope values like 'supabase' aren't valid dependencies because mutating them doesn't re-render the component.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [dateFrom, dateTo, mode]","fix":{"range":[1356,1390],"text":"[dateFrom, dateTo, mode]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\nimport { useState, useEffect } from 'react';\nimport ThemedBarChart from '@/components/ui/themed-bar-chart';\nimport { Modal } from '@/components/ui/modal';\nimport { Input, Label } from '@/components/ui/form';\nimport { Bar } from 'react-chartjs-2';\nimport { supabase } from '@/lib/supabase/client';\n\nexport default function AnalyticsPage() {\n\n  const [showModal, setShowModal] = useState(false);\n  const [dateFrom, setDateFrom] = useState('');\n  const [dateTo, setDateTo] = useState('');\n  const [mode, setMode] = useState<'views' | 'events'>('views');\n  const [dataByDay, setDataByDay] = useState<Record<string, number>>({});\n\n  useEffect(() => {\n    if (!dateFrom || !dateTo) return;\n\n    const load = async () => {\n      const table = mode === 'views' ? 'published_site_views' : 'site_events';\n      const column = mode === 'views' ? 'viewed_at' : 'created_at';\n\n      const { data, error } = await supabase\n        .from(table)\n        .select(column)\n        .gte(column, dateFrom)\n        .lte(column, dateTo);\n\n      if (error) return console.error(error);\n\n      const counts: Record<string, number> = {};\n      for (const row of data || []) {\n        const key = (row as Record<string, any>)[column]?.slice(0, 10); // yyyy-mm-dd\n        counts[key] = (counts[key] || 0) + 1;\n      }\n      setDataByDay(counts);\n    };\n    load();\n  }, [dateFrom, dateTo, mode, supabase]);\n\n  const chartData = {\n    labels: Object.keys(dataByDay),\n    datasets: [\n      {\n        label: mode === 'views' ? 'Page Views' : 'Event Count',\n        data: Object.values(dataByDay),\n        backgroundColor: 'var(--color-accent)',\n      },\n    ],\n  };\n\n  return (\n    <div className=\"min-h-screen bg-surface text-text p-6 space-y-6\">\n      <h1 className=\"text-2xl font-bold\">📊 Analytics Dashboard</h1>\n\n      <div className=\"flex gap-4 items-end\">\n        <div>\n          <Label>Date From</Label>\n          <Input type=\"date\" value={dateFrom} onChange={(e) => setDateFrom(e.target.value)} />\n        </div>\n        <div>\n          <Label>Date To</Label>\n          <Input type=\"date\" value={dateTo} onChange={(e) => setDateTo(e.target.value)} />\n        </div>\n        <div>\n          <Label>Mode</Label>\n          <select\n            value={mode}\n            onChange={(e) => setMode(e.target.value as 'views' | 'events')}\n            className=\"bg-zinc-800 text-white border border-zinc-600 rounded px-2 py-1\"\n          >\n            <option value=\"views\">Page Views</option>\n            <option value=\"events\">Events</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"bg-zinc-900 rounded p-4 shadow\">\n        <Bar data={chartData} options={{ responsive: true }} />\n      </div>\n\n      <button\n        onClick={() => setShowModal(true)}\n        className=\"mt-4 px-4 py-2 bg-brand text-white rounded hover:opacity-90\"\n      >\n        Share / Export\n      </button>\n\n      <Modal show={showModal} onClose={() => setShowModal(false)}>\n        <h2 className=\"text-lg font-semibold mb-2\">🔗 Share this report</h2>\n        <p className=\"text-sm text-zinc-300\">\n          Coming soon: PDF export, link share, and filters by domain.\n        </p>\n      </Modal>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/analytics/[slug].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GetServerSideProps' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PieChart' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Pie' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Cell' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used.","line":16,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GetServerSideProps } from 'next';\nimport { createClient } from '@supabase/supabase-js';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  Legend,\n} from 'recharts';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function SharedAnalytics({ domain, views }: { domain: string; views: any[] }) {\n  const byDay: Record<string, number> = {};\n  views.forEach((v) => {\n    const day = new Date(v.viewed_at).toISOString().slice(0, 10);\n    byDay[day] = (byDay[day] || 0) + 1;\n  });\n\n  return (\n    <div className=\"max-w-5xl mx-auto p-6 space-y-6\">\n      <h1 className=\"text-2xl font-bold\">Analytics for {domain}</h1>\n\n      <section>\n        <h2 className=\"text-lg font-semibold mb-2\">Views per Day</h2>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={Object.entries(byDay).map(([day, count]) => ({ day, count }))}>\n            <XAxis dataKey=\"day\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"count\" fill=\"#6366f1\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </section>\n\n      <p className=\"text-sm text-muted-foreground\">Total views: {views.length}</p>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/analytics/archive.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":23,"column":17,"nodeType":"JSXOpeningElement","endLine":27,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function AnalyticsArchivePage() {\n  const [files, setFiles] = useState<string[]>([]);\n  const [selectedFile, setSelectedFile] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetch('/reports/analytics/index.json')\n      .then((res) => res.json())\n      .then(setFiles);\n  }, []);\n\n  return (\n    <div className=\"p-6 text-text\">\n      <h1 className=\"text-xl font-bold mb-4\">📂 Archived Analytics Reports</h1>\n      <ul className=\"space-y-4\">\n        {files.map((file) => (\n          <li key={file}>\n            {file.endsWith('.pdf') ? (\n              <div className=\"flex gap-4 items-start\">\n                <img\n                  src={`/previews/${file.replace('.pdf', '.png')}`}\n                  alt=\"Preview\"\n                  className=\"w-40 rounded border border-zinc-600 shadow\"\n                />\n                <div>\n                  <button\n                    onClick={() => setSelectedFile(file)}\n                    className=\"text-green-400 hover:underline text-left font-mono\"\n                  >\n                    {file}\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <a\n                href={`/reports/analytics/${file}`}\n                className=\"text-blue-400 hover:underline\"\n                download\n              >\n                {file}\n              </a>\n            )}\n          </li>\n        ))}\n      </ul>\n\n      {selectedFile && selectedFile.endsWith('.pdf') && (\n        <div className=\"mt-6 border rounded bg-white p-2\">\n          <iframe\n            src={`/reports/analytics/${selectedFile}`}\n            className=\"w-full h-[80vh]\"\n            title=\"PDF Preview\"\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/audit.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function AuditLog() {\n  const [logs, setLogs] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/audit-logs')\n      .then((res) => res.json())\n      .then(setLogs);\n  }, []);\n\n  return (\n    <div className=\"p-6 text-white max-w-4xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">📜 Audit Log</h1>\n      <table className=\"w-full text-sm\">\n        <thead>\n          <tr>\n            <th className=\"border-b p-2\">Type</th>\n            <th className=\"border-b p-2\">Details</th>\n            <th className=\"border-b p-2\">Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          {logs.map((log: any, i) => (\n            <tr key={i}>\n              <td className=\"p-2\">{log.type}</td>\n              <td className=\"p-2 text-zinc-300\">{JSON.stringify(log.payload)}</td>\n              <td className=\"p-2 text-zinc-500\">{new Date(log.created_at).toLocaleString()}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/campaigns.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'i' is defined but never used. Allowed unused args must match /^_/u.","line":46,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport dayjs from 'dayjs';\nimport AdminLayout from '@/components/layout/admin-layout';\n\nexport default function CampaignsPage() {\n  const [campaigns, setCampaigns] = useState<any[]>([]);\n  const [leadsByCampaign, setLeadsByCampaign] = useState<Record<string, any[]>>({});\n  const [now, setNow] = useState(dayjs());\n  const [userEmail, setUserEmail] = useState<string | null>(null);\n\n  useEffect(() => {\n    supabase.auth.getUser().then(({ data }) => {\n      setUserEmail(data?.user?.email ?? null);\n    });\n\n    supabase\n      .from('campaigns')\n      .select('*')\n      .order('starts_at', { ascending: false })\n      .then(({ data }) => setCampaigns(data || []));\n\n    supabase\n      .from('leads')\n      .select('*, draft_sites:domain_id(domain, is_claimed), users:owner_id(email)')\n      .then(({ data }) => {\n        const grouped: Record<string, any[]> = {};\n        for (const lead of data || []) {\n          if (lead.campaign_id) {\n            if (!grouped[lead.campaign_id]) grouped[lead.campaign_id] = [];\n            grouped[lead.campaign_id].push(lead);\n          }\n        }\n        setLeadsByCampaign(grouped);\n      });\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(() => setNow(dayjs()), 60000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"p-6\">\n      <h1 className=\"text-2xl font-bold mb-4\">Campaigns</h1>\n      {campaigns.map((c, i) => {\n        const start = dayjs(c.starts_at);\n        const end = dayjs(c.ends_at);\n        const active = now.isAfter(start) && now.isBefore(end);\n        const expired = now.isAfter(end);\n        const duration = end.diff(start, 'minute');\n        const remaining = end.diff(now, 'minute');\n        const leads = leadsByCampaign[c.id] || [];\n\n        const claimed = leads.find((l) => l.draft_sites?.is_claimed);\n        const winner = claimed ? claimed.business_name : null;\n\n        return (\n          <div key={c.id} className=\"mb-6 bg-gray-800 p-4 rounded shadow\">\n            <h2 className=\"text-xl font-bold mb-2\">\n              {c.name} – {c.city}\n            </h2>\n            <p className=\"text-sm mb-1\">\n              {active ? '🟢 Active' : expired ? '🔴 Ended' : '🕓 Upcoming'} –\n              {active\n                ? ` ${remaining} min left`\n                : expired\n                  ? 'Ended'\n                  : `Starts in ${start.diff(now, 'minute')} min`}\n            </p>\n            {active && (\n              <div className=\"w-full h-2 bg-gray-700 rounded overflow-hidden mb-3\">\n                <div\n                  className=\"bg-green-500 h-full transition-all\"\n                  style={{ width: `${(1 - remaining / duration) * 100}%` }}\n                />\n              </div>\n            )}\n            {leads.length > 0 ? (\n              <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                {leads.map((l) => (\n                  <div\n                    key={l.id}\n                    className={`border p-3 rounded ${\n                      l.draft_sites?.is_claimed\n                        ? 'border-green-500'\n                        : userEmail && l.users?.email === userEmail\n                          ? 'border-yellow-400'\n                          : 'border-gray-600'\n                    }`}\n                  >\n                    <h3 className=\"font-semibold text-lg\">{l.business_name}</h3>\n                    <p className=\"text-xs\">{l.email || 'No email'}</p>\n                    <p className=\"text-xs\">{l.phone || 'No phone'}</p>\n                    <p className=\"text-xs\">Owner: {l.users?.email || '—'}</p>\n                    <p\n                      className={`text-xs mt-2 ${\n                        l.draft_sites?.is_claimed\n                          ? 'text-green-400'\n                          : userEmail && l.users?.email === userEmail\n                            ? 'text-yellow-300'\n                            : 'text-gray-400'\n                      }`}\n                    >\n                      {l.draft_sites?.is_claimed\n                        ? '🏁 Claimed'\n                        : userEmail && l.users?.email === userEmail\n                          ? '🔒 Yours'\n                          : 'Unclaimed'}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-400 mt-2\">No leads linked.</p>\n            )}\n            {winner && <p className=\"mt-3 text-green-400 font-bold\">🎉 Winner: {winner}</p>}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nCampaignsPage.getLayout = function getLayout(page: React.ReactNode) {\n  return <AdminLayout>{page}</AdminLayout>;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/click-analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BlockSettingsModal' is defined but never used.","line":13,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loaded' is assigned a value but never used.","line":39,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":11},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'router' and 'searchParams'. Either include them or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [activeDashboardId, router, searchParams]","fix":{"range":[1853,1872],"text":"[activeDashboardId, router, searchParams]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [role, router]","fix":{"range":[2344,2350],"text":"[role, router]"}}]},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `·`","line":85,"column":42,"nodeType":null,"messageId":"delete","endLine":85,"endColumn":43,"fix":{"range":[2912,2913],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `·`","line":86,"column":46,"nodeType":null,"messageId":"delete","endLine":86,"endColumn":47,"fix":{"range":[2959,2960],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `·`","line":87,"column":44,"nodeType":null,"messageId":"delete","endLine":87,"endColumn":45,"fix":{"range":[3004,3005],"text":""}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport Link from 'next/link';\nimport { useCurrentUser } from '@/hooks/useCurrentUser';\nimport { useCanonicalRole } from '@/hooks/useCanonicalRole';\nimport Page from '@/components/layout/page';\nimport AdminTabs from '@/components/admin/admin-tabs';\nimport { DashboardSelector } from '@/components/admin/dashboard-selector';\nimport { useDashboardLayout } from '@/hooks/useDashboardLayout';\nimport DashboardGridDraggable from '@/components/admin/dashboard-grid-draggable';\nimport BlockSettingsModal from '@/components/admin/block-settings-modal';\nimport type { DomainEntry } from '@/types/domain.types';\nimport ActivityWidget from '@/components/admin/admin/blocks/activity-widget';\nimport EngagementWidget from '@/components/admin/admin/blocks/engagement-widget';\nimport RetentionWidget from '@/components/admin/admin/blocks/retention-widget';\nimport TrafficWidget from '@/components/admin/admin/blocks/traffic-widget';\n\nfunction Dashboard() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const dashboardFromURL = searchParams?.get('dashboard') as string | undefined;\n\n  const { user } = useCurrentUser();\n  const { role } = useCanonicalRole();\n\n  const [domains, setDomains] = useState<DomainEntry[]>([]);\n  const [previewing, setPreviewing] = useState<string | null>(null);\n\n  const {\n    dashboards,\n    activeDashboardId,\n    setActiveDashboardId,\n    createDashboard,\n    order,\n    hidden,\n    save,\n    loaded,\n    loading,\n    settings,\n    updateBlockSetting,\n  } = useDashboardLayout(user?.id || null, dashboardFromURL);\n\n  useEffect(() => {\n    if (activeDashboardId && searchParams?.get('dashboard') !== activeDashboardId) {\n      router.replace(`?dashboard=${activeDashboardId}`);\n    }\n  }, [activeDashboardId]);\n\n  useEffect(() => {\n    if (!role) return;\n    if (role === 'viewer') {\n      router.push('/viewer');\n    } else if (!['admin', 'reseller', 'owner'].includes(role)) {\n      router.push('/login?error=unauthorized');\n    }\n\n    import('@/admin/lib/supabaseClient').then(({ supabase }) => {\n      supabase\n        .from('domains')\n        .select('*')\n        .order('date_created', { ascending: false })\n        .then(({ data }) => setDomains(data || []));\n    });\n  }, [role]);\n\n  if (loading) {\n    return <p className=\"text-gray-500 text-sm p-6\">Loading dashboard layout…</p>;\n  }\n\n  return (\n    <>\n      <AdminTabs />\n      <div className=\"p-6\">\n        <h1 className=\"text-2xl font-bold mb-4 text-white\">My Dashboard</h1>\n        <DashboardSelector\n          dashboards={dashboards}\n          activeDashboardId={activeDashboardId}\n          setActiveDashboardId={setActiveDashboardId}\n          onCreateNew={createDashboard}\n        />\n        <DashboardGridDraggable\n          renderers={{\n            activity: <ActivityWidget />, \n            engagement: <EngagementWidget />, \n            retention: <RetentionWidget />, \n            traffic: <TrafficWidget />,\n          }}\n          order={order}\n          hidden={hidden}\n          onSave={(o, h) => save(o, h)}\n          onAddBlock={(b) => {\n            if (!order.find((x) => x.id === b.id)) {\n              save([...order, b], hidden);\n            }\n          }}\n          settings={settings}\n          updateBlockSetting={updateBlockSetting}\n        />\n      </div>\n      <div className=\"p-6\">\n        <h2 className=\"text-xl font-bold mb-4 text-white\">Claimed Sites</h2>\n        <table className=\"w-full text-sm text-left text-gray-300 bg-gray-800 rounded overflow-hidden\">\n          <thead className=\"bg-gray-700 text-gray-100 uppercase text-xs tracking-wide\">\n            <tr>\n              <th className=\"px-4 py-2\">Domain</th>\n              <th className=\"px-4 py-2\">City</th>\n              <th className=\"px-4 py-2\">State</th>\n              <th className=\"px-4 py-2\">Template</th>\n              <th className=\"px-4 py-2\">Claimed</th>\n              <th className=\"px-4 py-2\">Preview</th>\n              <th className=\"px-4 py-2\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {domains.map((d, i) => (\n              <>\n                <tr key={d.id} className={i % 2 === 0 ? 'bg-gray-800' : 'bg-gray-900'}>\n                  <td className=\"px-4 py-2\">{d.domain}</td>\n                  <td className=\"px-4 py-2\">{d.city}</td>\n                  <td className=\"px-4 py-2\">{d.state}</td>\n                  <td className=\"px-4 py-2\">{d.template_id}</td>\n                  <td className=\"px-4 py-2\">{d.is_claimed ? 'Yes' : 'No'}</td>\n                  <td className=\"px-4 py-2\">\n                    <button\n                      className=\"text-blue-400 hover:underline text-xs\"\n                      onClick={() => setPreviewing(previewing === d.domain ? null : d.domain)}\n                    >\n                      {previewing === d.domain ? 'Hide' : 'Show'}\n                    </button>\n                    <a\n                      href={`https://${d.domain}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"ml-2 text-blue-400 hover:underline text-xs\"\n                    >\n                      Open\n                    </a>\n                  </td>\n                  <td className=\"px-4 py-2\">\n                    <Link href={`/domain/${d.domain}`}>\n                      <span className=\"text-blue-400 hover:underline\">View</span>\n                    </Link>\n                  </td>\n                </tr>\n                {previewing === d.domain && (\n                  <tr className=\"bg-black\">\n                    <td colSpan={7} className=\"p-4 text-center\">\n                      <iframe\n                        src={`https://${d.domain}`}\n                        className=\"w-full h-96 border rounded\"\n                        onError={(e) => {\n                          const img = document.createElement('img');\n                          img.src = `/screenshots/${d.domain}.png`;\n                          img.alt = 'Screenshot fallback';\n                          img.className = 'mx-auto max-w-full max-h-96 rounded';\n                          e.currentTarget.replaceWith(img);\n                        }}\n                      />\n                    </td>\n                  </tr>\n                )}\n              </>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nDashboard.getLayout = (page: React.ReactNode) => <Page>{page}</Page>;\n\nexport default Dashboard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/demo/[slug].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GetServerSideProps' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GetServerSideProps } from 'next';\nimport TemplatePreview from '@/components/admin/templates/template-preview';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nexport default function DemoTemplate({ data, slug }: { data: any; slug: string }) {\n  if (!data) return <p className=\"p-6\">No template found for: {slug}</p>;\n\n  return (\n    <div className=\"max-w-5xl mx-auto p-6\">\n      <h1 className=\"text-xl font-semibold mb-4\">Preview: {slug}</h1>\n      <ScrollArea className=\"h-[600px] border rounded bg-white\">\n        <TemplatePreview data={data} colorScheme={data.color_scheme || 'slate'} />\n      </ScrollArea>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/demo/list.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createClient' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GetServerSideProps' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport Link from 'next/link';\nimport { GetServerSideProps } from 'next';\nimport { Button } from '@/components/ui/button';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nexport default function DemoList({ templates }: { templates: any[] }) {\n  return (\n    <div className=\"max-w-5xl mx-auto p-6 space-y-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Available Public Demos</h1>\n      {templates.map((t) => (\n        <div\n          key={t.template_name}\n          className=\"flex justify-between items-center border p-4 rounded bg-white shadow-sm flex-wrap gap-4\"\n        >\n          <div>\n            <h2 className=\"text-lg font-semibold\">{t.template_name}</h2>\n            <p className=\"text-sm text-muted-foreground\">Industry: {t.industry}</p>\n            {t.tags?.length && (\n              <div className=\"text-xs text-muted-foreground mt-1 italic\">\n                Tags: {t.tags.join(', ')}\n              </div>\n            )}\n            {t.featured && <span className=\"text-xs text-yellow-600 font-bold\">★ Featured</span>}\n          </div>\n          <Link href={`/demo/${t.template_name}`} target=\"_blank\">\n            <Button size=\"sm\" variant=\"outline\">\n              View Preview\n            </Button>\n          </Link>\n        </div>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/domain/[slug].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useCanonicalRole } from '@/hooks/useCanonicalRole';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nexport default function DomainDetail() {\n  const searchParams = useSearchParams();\n  const slug = searchParams?.get('slug') as string;\n  const [domain, setDomain] = useState<any>(null);\n  const { role } = useCanonicalRole();\n\n  useEffect(() => {\n    if (!slug) return;\n\n    supabase\n      .from('domains')\n      .select('*')\n      .eq('domain', slug)\n      .single()\n      .then(({ data }) => setDomain(data));\n  }, [slug]);\n\n  const toggleClaim = async () => {\n    if (!domain) return;\n    await supabase.from('domains').update({ is_claimed: !domain.is_claimed }).eq('id', domain.id);\n\n    await supabase.from('user_action_logs').insert([\n      {\n        domain_id: domain.id,\n        action_type: 'site_claimed',\n        triggered_by: role,\n      },\n    ]);\n\n    setDomain({ ...domain, is_claimed: !domain.is_claimed });\n  };\n\n  return domain ? (\n    <div className=\"p-6 text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">{domain.domain}</h1>\n      <p>City: {domain.city}</p>\n      <p>Claimed: {domain.is_claimed ? 'Yes' : 'No'}</p>\n      {role === 'admin' && (\n        <button onClick={toggleClaim} className=\"mt-4 bg-blue-600 px-4 py-2 rounded\">\n          Toggle Claim\n        </button>\n      )}\n    </div>\n  ) : (\n    <p className=\"p-6 text-white\">Loading...</p>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/embed/[id].tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/gallery.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":36,"column":17,"nodeType":"JSXOpeningElement","endLine":36,"endColumn":95},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":36,"column":17,"nodeType":"JSXOpeningElement","endLine":36,"endColumn":95}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport Link from 'next/link';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function GalleryPage() {\n  const [sites, setSites] = useState<any[]>([]);\n\n  useEffect(() => {\n    supabase\n      .from('published_sites')\n      .select('*, branding_profiles(name, logo_url)')\n      .eq('status', 'published')\n      .eq('is_public', true)\n      .order('published_at', { ascending: false })\n      .then(({ data }) => setSites(data || []));\n  }, []);\n\n  return (\n    <div className=\"max-w-5xl mx-auto p-6\">\n      <h1 className=\"text-2xl font-bold mb-4\">🌐 GoodRobot Gallery</h1>\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        {sites.map((site) => (\n          <Link\n            key={site.id}\n            href={`/sites/${site.slug}`}\n            className=\"block border rounded p-4 hover:shadow transition\"\n          >\n            <div className=\"flex justify-between items-center mb-2\">\n              <strong>{site.branding_profiles?.name}</strong>\n              {site.branding_profiles?.logo_url && (\n                <img src={site.branding_profiles.logo_url} className=\"w-8 h-8 rounded-full\" />\n              )}\n            </div>\n            <p className=\"text-xs text-muted-foreground mb-1\">{site.slug}.quicksites.ai</p>\n            <p className=\"text-xs italic text-gray-400\">Language: {site.language || 'en'}</p>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/heatmap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/launch.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SitePreview' is assigned a value but never used.","line":10,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":16,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":31,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/launch.tsx\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport { publishSite } from '@/admin/utils/publishSite';\nimport { logEvent } from '@/admin/utils/logEvent';\nimport dynamic from 'next/dynamic';\n\nconst SitePreview = dynamic(() => import('@/components/admin/site-preview'), {\n  ssr: false,\n});\n\nexport default function LaunchPage() {\n  const params = useSearchParams();\n  const router = useRouter();\n  const [status, setStatus] = useState<'idle' | 'confirm' | 'publishing' | 'done' | 'error'>(\n    'idle'\n  );\n  const [siteParams, setSiteParams] = useState<Record<string, any> | null>(null);\n  const [resultUrl, setResultUrl] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const raw = params?.get('params');\n    if (!raw) return;\n    try {\n      const parsed = JSON.parse(decodeURIComponent(raw));\n      setSiteParams(parsed);\n      setStatus('confirm');\n    } catch (err: any) {\n      setError('Invalid parameters.');\n      setStatus('error');\n    }\n  }, [params]);\n\n  const handlePublish = async () => {\n    if (!siteParams) return;\n    setStatus('publishing');\n    try {\n      const url = await publishSite(siteParams as any);\n      await logEvent('deploy_site', {\n        params: siteParams,\n        resultUrl: url,\n      });\n      setResultUrl(url);\n      setStatus('done');\n    } catch (err: any) {\n      setError(err.message || 'Failed to publish');\n      setStatus('error');\n    }\n  };\n\n  return (\n    <div className=\"p-10 max-w-2xl mx-auto text-center space-y-6\">\n      <h1 className=\"text-3xl font-bold\">🚀 Launch QuickSite</h1>\n\n      {status === 'confirm' && siteParams && (\n        <div className=\"space-y-6\">\n          <p className=\"text-gray-700\">Please confirm the following parameters:</p>\n          <pre className=\"text-left text-sm bg-gray-100 p-4 rounded border overflow-auto max-h-96\">\n            {JSON.stringify(siteParams, null, 2)}\n          </pre>\n\n          <div className=\"border rounded bg-white p-4 shadow\">\n            <p className=\"text-left text-sm font-medium mb-2\">Preview:</p>\n            <div className=\"border rounded overflow-hidden\">\n              {/* <SitePreview params={siteParams} /> */}\n              <iframe\n                src={`/admin/preview?params=${encodeURIComponent(JSON.stringify(siteParams))}`}\n                className=\"w-full h-full\"\n              />\n            </div>\n          </div>\n\n          <button\n            onClick={handlePublish}\n            className=\"bg-purple-600 text-white px-4 py-2 rounded text-sm\"\n          >\n            ✅ Confirm and Deploy\n          </button>\n        </div>\n      )}\n\n      {status === 'publishing' && <p>Publishing your site, please wait...</p>}\n\n      {status === 'done' && resultUrl && (\n        <div className=\"space-y-4\">\n          <p className=\"text-green-600 font-semibold\">Site published successfully!</p>\n          <a\n            href={resultUrl}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"underline text-blue-600 hover:text-blue-800\"\n          >\n            View your live site\n          </a>\n        </div>\n      )}\n\n      {status === 'error' && <p className=\"text-red-600\">Error: {error}</p>}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/leads.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Papa' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CSVLeadRow' is defined but never used.","line":6,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'leads' is assigned a value but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'summary' is assigned a value but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSummary' is assigned a value but never used.","line":15,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'nextAction' is assigned a value but never used.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setNextAction' is assigned a value but never used.","line":21,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setError' is assigned a value but never used.","line":22,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSortField' is assigned a value but never used.","line":23,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fileInputRef' is assigned a value but never used.","line":25,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dropRef' is assigned a value but never used.","line":26,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setFilterSource' is assigned a value but never used.","line":29,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setFilterStatus' is assigned a value but never used.","line":30,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editingLeadId' is assigned a value but never used.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setEditingLeadId' is assigned a value but never used.","line":33,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editingLead' is assigned a value but never used.","line":34,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setEditingLead' is assigned a value but never used.","line":34,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedIds' is assigned a value but never used.","line":37,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedIds' is assigned a value but never used.","line":37,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":37},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'loaderRef.current'. Either exclude it or remove the dependency array. Mutable values like 'loaderRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [loading, fetchLeads]","fix":{"range":[2603,2643],"text":"[loading, fetchLeads]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'processFile' is assigned a value but never used.","line":74,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'saveReviewedLead' is assigned a value but never used.","line":107,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState, useRef, useCallback } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport Papa from 'papaparse';\nimport type { CSVLeadRow, Lead } from '@/types/lead.types';\nimport { createLeadFromPhoto } from '@/lib/leads/photoProcessor';\nimport Image from 'next/image';\n\nconst CONFIDENCE_THRESHOLD = 0.85;\nconst LEADS_PER_PAGE = 20;\n\nexport default function LeadsPage() {\n  const [leads, setLeads] = useState<Lead[]>([]);\n  const [summary, setSummary] = useState({\n    total: 0,\n    matchedDomains: 0,\n    matchedCampaigns: 0,\n    duplicates: 0,\n  });\n  const [nextAction, setNextAction] = useState(false);\n  const [error, setError] = useState('');\n  const [sortField, setSortField] = useState<'created_at' | 'address_city'>('created_at');\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const dropRef = useRef<HTMLDivElement>(null);\n  const loaderRef = useRef<HTMLDivElement>(null);\n\n  const [filterSource, setFilterSource] = useState<string>('all');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [reviewLead, setReviewLead] = useState<any | null>(null);\n  const [reviewImage, setReviewImage] = useState<string | null>(null);\n  const [editingLeadId, setEditingLeadId] = useState<number | null>(null);\n  const [editingLead, setEditingLead] = useState<any | null>(null);\n  const [page, setPage] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [selectedIds, setSelectedIds] = useState<number[]>([]);\n\n  const fetchLeads = useCallback(\n    async (reset = false) => {\n      setLoading(true);\n      let query = supabase\n        .from('leads')\n        .select('*')\n        .order(sortField, { ascending: sortField === 'address_city' });\n      if (filterSource !== 'all') query = query.eq('source', filterSource);\n      if (filterStatus !== 'all') query = query.eq('status', filterStatus);\n\n      const from = reset ? 0 : page * LEADS_PER_PAGE;\n      const to = from + LEADS_PER_PAGE - 1;\n      const { data } = await query.range(from, to);\n\n      setLeads((prev) => (reset ? data || [] : [...prev, ...(data || [])]));\n      setPage((prev) => (reset ? 1 : prev + 1));\n      setLoading(false);\n    },\n    [filterSource, filterStatus, sortField, page]\n  );\n\n  useEffect(() => {\n    fetchLeads(true);\n  }, [fetchLeads]);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting && !loading) {\n        fetchLeads();\n      }\n    });\n    if (loaderRef.current) observer.observe(loaderRef.current);\n    return () => observer.disconnect();\n  }, [loaderRef.current, loading, fetchLeads]);\n\n  const processFile = async (file: File) => {\n    const preview = URL.createObjectURL(file);\n    setReviewImage(preview);\n\n    const photoPath = `leads/photos/${Date.now()}-${file.name}`;\n    const { error: uploadError } = await supabase.storage.from('leads').upload(photoPath, file);\n\n    if (uploadError) {\n      console.error('Upload error:', uploadError);\n      alert('Failed to upload photo');\n      return;\n    }\n\n    const photoUrl = supabase.storage.from('leads').getPublicUrl(photoPath).data.publicUrl;\n\n    const { leadData, confidence }: { leadData: any; confidence: number } =\n      await createLeadFromPhoto(file);\n    leadData.id = crypto.randomUUID();\n    leadData.confidence = confidence || 0;\n    leadData.photo_url = photoUrl || null;\n    leadData.status = 'reviewed';\n    leadData.address_street = null;\n    leadData.address_zip = null;\n    leadData.address_country = null;\n\n    if (confidence >= CONFIDENCE_THRESHOLD) {\n      await supabase.from('leads').insert([leadData]);\n      fetchLeads();\n    } else {\n      setReviewLead({ ...leadData, confidence });\n    }\n  };\n\n  const saveReviewedLead = async () => {\n    if (!reviewLead) return;\n    const reviewedCopy = { ...reviewLead };\n    if (!reviewedCopy.status) reviewedCopy.status = 'needs_review';\n    await supabase.from('leads').insert([reviewedCopy]);\n    setReviewLead(null);\n    setReviewImage(null);\n    fetchLeads();\n  };\n\n  return (\n    <div>\n      {/* ... other JSX ... */}\n      {reviewLead && reviewImage && (\n        <Image src={reviewImage} alt=\"Lead preview\" width={300} height={200} className=\"rounded\" />\n      )}\n      <a>I&apos;m Interested</a>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/logs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport AdminTabs from '@/components/admin/admin-tabs';\n\nexport default function LogsPage() {\n  const [logs, setLogs] = useState<any[]>([]);\n  const [filter, setFilter] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    supabase\n      .from('user_action_logs')\n      .select('*')\n      .order('timestamp', { ascending: false })\n      .then(({ data, error }) => {\n        if (error) setError(error.message);\n        else setLogs(data || []);\n      });\n  }, []);\n\n  const filtered = logs.filter(\n    (log) =>\n      log.action_type.toLowerCase().includes(filter.toLowerCase()) ||\n      (log.triggered_by || '').toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const exportCSV = () => {\n    const rows = filtered.map(\n      (log) =>\n        `\"${log.timestamp}\",\"${log.action_type}\",\"${log.triggered_by || ''}\",\"${log.lead_id}\",\"${log.domain_id}\"`\n    );\n    const csv = 'Timestamp,Action,User,Lead,Domain\\n' + rows.join('\\n');\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const a = document.createElement('a');\n    a.href = URL.createObjectURL(blob);\n    a.download = 'user_action_logs.csv';\n    a.click();\n  };\n\n  return (\n    <>\n      <AdminTabs />\n      <div className=\"p-6 text-white\">\n        <h1 className=\"text-xl font-bold mb-4\">Lead Logs</h1>\n        <div className=\"mb-4 flex items-center gap-3\">\n          <input\n            type=\"text\"\n            placeholder=\"Search logs...\"\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            className=\"px-2 py-1 rounded bg-gray-700 border border-gray-500 text-sm\"\n          />\n          <button\n            onClick={exportCSV}\n            className=\"bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded text-sm text-white\"\n          >\n            Export CSV\n          </button>\n        </div>\n        <table className=\"w-full text-sm text-left text-gray-300 bg-gray-800 rounded overflow-hidden\">\n          <thead className=\"bg-gray-700 text-gray-100 uppercase text-xs tracking-wide\">\n            <tr>\n              <th className=\"px-4 py-2\">Time</th>\n              <th className=\"px-4 py-2\">Action</th>\n              <th className=\"px-4 py-2\">User</th>\n              <th className=\"px-4 py-2\">Lead ID</th>\n              <th className=\"px-4 py-2\">Domain ID</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filtered.map((log, i) => (\n              <tr key={log.id} className={i % 2 === 0 ? 'bg-gray-800' : 'bg-gray-900'}>\n                <td className=\"px-4 py-2\">{new Date(log.timestamp).toLocaleString()}</td>\n                <td className=\"px-4 py-2\">{log.action_type}</td>\n                <td className=\"px-4 py-2\">{log.triggered_by || '—'}</td>\n                <td className=\"px-4 py-2 text-xs\">{log.lead_id}</td>\n                <td className=\"px-4 py-2 text-xs\">{log.domain_id || '—'}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/logs/checkins.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useRouter, useSearchParams } from 'next/navigation';\n\nexport default function CheckinLog() {\n  const searchParams = useSearchParams();\n  const date = searchParams?.get('date');\n  const [rows, setRows] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/logs/checkins')\n      .then((res) => res.json())\n      .then((data) => {\n        if (date) {\n          setRows(data.filter((r: any) => r.viewed_at?.startsWith(date)));\n        } else {\n          setRows(data);\n        }\n      });\n  }, [date]);\n\n  return (\n    <div className=\"p-6 max-w-5xl mx-auto text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">\n        📍 Check-in Log {date ? `(Filtered: ${date})` : ''}\n      </h1>\n      <div className=\"bg-zinc-800 p-4 rounded overflow-x-auto\">\n        <table className=\"text-sm w-full\">\n          <thead className=\"text-zinc-400 border-b border-zinc-600\">\n            <tr>\n              <th>Site</th>\n              <th>Referrer</th>\n              <th>User Agent</th>\n              <th>Viewed At</th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows.map((r: any) => (\n              <tr key={r.id} className=\"border-b border-zinc-700\">\n                <td className=\"py-1\">{r.site_id}</td>\n                <td className=\"py-1\">{r.referrer}</td>\n                <td className=\"py-1 text-xs text-zinc-400\">{r.user_agent?.slice(0, 64)}…</td>\n                <td className=\"py-1 text-zinc-400\">{new Date(r.viewed_at).toLocaleString()}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/logs/dashboard.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··⏎`","line":32,"column":1,"nodeType":null,"messageId":"delete","endLine":33,"endColumn":1,"fix":{"range":[852,855],"text":""}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// /app/admin/logs/dashboard.tsx\nexport const dynamic = 'force-dynamic';\nexport const runtime = 'nodejs';\n\nimport { createClient } from '@supabase/supabase-js';\nimport { createServerClient } from '@supabase/ssr';\n\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport Link from 'next/link';\n\nconst supabaseAdmin = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nexport default async function Page() {\n  const cookieStore = cookies() as unknown as {\n    get(name: string): { value: string } | undefined;\n  };\n  const supa = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n      },\n    }\n  );\n  \n\n  const {\n    data: { session },\n  } = await supa.auth.getSession();\n\n  const user = session?.user;\n  const userId = user?.id;\n\n  if (!userId) {\n    redirect('/');\n  }\n\n  // Fetch canonical role from user_profiles\n  const { data: profile } = await supabaseAdmin\n    .from('user_profiles')\n    .select('role')\n    .eq('user_id', userId)\n    .maybeSingle();\n\n  if (profile?.role !== 'admin') {\n    redirect('/');\n  }\n\n  const { data: logs } = await supabaseAdmin\n    .from('dashboard_access_log')\n    .select('*')\n    .order('timestamp', { ascending: false })\n    .limit(100);\n\n  return <DashboardLog logs={logs || []} user={user} />;\n}\n\nexport function DashboardLog({ logs, user }: { logs: any[]; user: any }) {\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h1 className=\"text-2xl font-bold\">Dashboard Access Logs</h1>\n        <Link href=\"/admin/sites/dashboard\" className=\"text-sm text-blue-600 hover:underline\">\n          ← Back to Dashboard\n        </Link>\n      </div>\n      <p className=\"text-sm text-gray-500 mb-6\">Viewing as {user.email}</p>\n      <table className=\"min-w-full text-sm border\">\n        <thead>\n          <tr className=\"border-b bg-gray-100 text-left\">\n            <th className=\"p-2\">Timestamp</th>\n            <th className=\"p-2\">User ID</th>\n            <th className=\"p-2\">Email</th>\n            <th className=\"p-2\">IP</th>\n            <th className=\"p-2\">City</th>\n            <th className=\"p-2\">Region</th>\n            <th className=\"p-2\">Country</th>\n            <th className=\"p-2\">Agent</th>\n          </tr>\n        </thead>\n        <tbody>\n          {logs.map((log) => (\n            <tr key={log.id} className=\"border-b\">\n              <td className=\"p-2\">{new Date(log.timestamp).toLocaleString()}</td>\n              <td className=\"p-2 text-xs\">{log.user_id}</td>\n              <td className=\"p-2\">{log.email}</td>\n              <td className=\"p-2 text-xs\">{log.ip_address || '-'}</td>\n              <td className=\"p-2\">{log.city || '-'}</td>\n              <td className=\"p-2\">{log.region || '-'}</td>\n              <td className=\"p-2\">{log.country || '-'}</td>\n              <td className=\"p-2 text-xs max-w-xs truncate\">\n                {log.user_agent?.slice(0, 40) || '-'}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/logs/feedback.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useRouter, useSearchParams } from 'next/navigation';\n\nexport default function FeedbackLog() {\n  const searchParams = useSearchParams();\n  const date = searchParams?.get('date');\n  const [rows, setRows] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/logs/feedback')\n      .then((res) => res.json())\n      .then((data) => {\n        if (date) {\n          setRows(data.filter((r: any) => r.created_at?.startsWith(date)));\n        } else {\n          setRows(data);\n        }\n      });\n  }, [date]);\n\n  return (\n    <div className=\"p-6 max-w-5xl mx-auto text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">\n        🗣️ Feedback Log {date ? `(Filtered: ${date})` : ''}\n      </h1>\n      <div className=\"bg-zinc-800 p-4 rounded overflow-x-auto\">\n        <table className=\"text-sm w-full\">\n          <thead className=\"text-zinc-400 border-b border-zinc-600\">\n            <tr>\n              <th>Block</th>\n              <th>Action</th>\n              <th>Comment</th>\n              <th>Created</th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows.map((r: any) => (\n              <tr key={r.id} className=\"border-b border-zinc-700\">\n                <td className=\"py-1\">{r.block_id}</td>\n                <td className=\"py-1 text-green-400\">{r.action}</td>\n                <td className=\"py-1\">{r.comment}</td>\n                <td className=\"py-1 text-zinc-400\">{new Date(r.created_at).toLocaleString()}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/logs/notifications.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function NotificationLog() {\n  const [logs, setLogs] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/notification-logs')\n      .then((res) => res.json())\n      .then(setLogs);\n  }, []);\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto text-white space-y-4\">\n      <h1 className=\"text-2xl font-bold\">📨 Notification Failures</h1>\n      <p className=\"text-sm text-zinc-400\">\n        Logged entries from Supabase when creator emails fail to deliver.\n      </p>\n      <div className=\"bg-zinc-800 rounded p-4 overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead className=\"text-zinc-400 border-b border-zinc-600\">\n            <tr>\n              <th className=\"text-left py-1\">Slug</th>\n              <th className=\"text-left py-1\">Event</th>\n              <th className=\"text-left py-1\">Timestamp</th>\n            </tr>\n          </thead>\n          <tbody>\n            {logs.map((log: any) => (\n              <tr key={log.id} className=\"border-b border-zinc-700\">\n                <td className=\"py-1\">{log.slug}</td>\n                <td className=\"py-1 text-yellow-400\">{log.event}</td>\n                <td className=\"py-1 text-zinc-400\">{new Date(log.timestamp).toLocaleString()}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/logs/sessions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/page.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `(⏎····<p·className=\"text-center·p-6·text-sm·text-gray-400\">⏎······Redirecting·to·the·right·place...⏎····</p>⏎··)` with `<p·className=\"text-center·p-6·text-sm·text-gray-400\">Redirecting·to·the·right·place...</p>`","line":18,"column":10,"nodeType":null,"messageId":"replace","endLine":22,"endColumn":4,"fix":{"range":[414,526],"text":"<p className=\"text-center p-6 text-sm text-gray-400\">Redirecting to the right place...</p>"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// /app/admin/page.tsx\n'use client';\n\nimport { useAutoRedirectByRole } from '@/hooks/useAutoRedirectByRole';\n\nexport default function AdminHomeRedirect() {\n  useAutoRedirectByRole({\n    roleRoutes: {\n      admin: '/admin/dashboard',\n      owner: '/admin/dashboard',\n      reseller: '/admin/dashboard',\n      viewer: '/viewer',\n    },\n    fallbackRoute: '/unauthorized',\n    enableTestBypass: true,\n  });\n\n  return (\n    <p className=\"text-center p-6 text-sm text-gray-400\">\n      Redirecting to the right place...\n    </p>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/people-analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/people-chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/people-heatmap.download.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":128,"column":15,"nodeType":"JSXOpeningElement","endLine":131,"endColumn":17},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":128,"column":15,"nodeType":"JSXOpeningElement","endLine":131,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\ntype UserEntry = {\n  user_id: string;\n  avatar_url: string | null;\n  last_seen_at: string;\n  role: string;\n};\n\ntype UserMapEntry = {\n  avatar_url: string | null;\n  role: string;\n  days: Set<string>;\n};\n\ntype HeatmapUser = {\n  user_id: string;\n  avatar_url: string | null;\n  role: string;\n  active_days: Set<string>;\n};\n\nfunction getDayKey(date: string | Date): string {\n  return new Date(date).toISOString().split('T')[0];\n}\n\nfunction getDateArray(daysBack = 90): string[] {\n  const result: string[] = [];\n  const today = new Date();\n  for (let i = daysBack; i >= 0; i--) {\n    const d = new Date(today);\n    d.setDate(d.getDate() - i);\n    result.push(getDayKey(d));\n  }\n  return result;\n}\n\nexport default function UserHeatmapDownloadable() {\n  const [users, setUsers] = useState<HeatmapUser[]>([]);\n  const [role, setRole] = useState('');\n  const [days] = useState<string[]>(getDateArray());\n\n  useEffect(() => {\n    (async () => {\n      const { data: raw } = await supabase\n        .from('user_profiles')\n        .select('user_id, avatar_url, last_seen_at, role')\n        .not('last_seen_at', 'is', null);\n\n      const userMap: Record<string, UserMapEntry> = {};\n\n      raw?.forEach((entry: UserEntry) => {\n        const id = entry.user_id;\n        const day = getDayKey(entry.last_seen_at);\n        if (!userMap[id]) {\n          userMap[id] = {\n            avatar_url: entry.avatar_url,\n            role: entry.role,\n            days: new Set<string>(),\n          };\n        }\n        userMap[id].days.add(day);\n      });\n\n      const formatted: HeatmapUser[] = Object.entries(userMap).map(([id, info]) => ({\n        user_id: id,\n        avatar_url: info.avatar_url,\n        role: info.role,\n        active_days: info.days,\n      }));\n\n      setUsers(formatted);\n    })();\n  }, []);\n\n  const filteredUsers = role ? users.filter((u) => u.role === role) : users;\n\n  const handleDownload = () => {\n    const csv = [\n      ['user_id', 'role', 'active_day_count', 'days'],\n      ...filteredUsers.map((u) => [\n        u.user_id,\n        u.role,\n        u.active_days.size,\n        Array.from(u.active_days).join(';'),\n      ]),\n    ]\n      .map((row) => row.join(','))\n      .join('\\n');\n\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'user-activity.csv';\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h1 className=\"text-xl font-bold\">User Activity Overview</h1>\n        <button\n          className=\"text-sm bg-blue-600 text-white px-3 py-1 rounded\"\n          onClick={handleDownload}\n        >\n          Export CSV\n        </button>\n      </div>\n\n      <div className=\"mb-4 flex gap-3 items-center\">\n        <label className=\"text-sm\">Filter by Role:</label>\n        <select className=\"text-sm\" value={role} onChange={(e) => setRole(e.target.value)}>\n          <option value=\"\">All</option>\n          <option value=\"admin\">Admin</option>\n          <option value=\"user\">User</option>\n        </select>\n      </div>\n\n      <div className=\"grid gap-6 grid-cols-1 sm:grid-cols-2 md:grid-cols-3\">\n        {filteredUsers.map((user) => (\n          <div key={user.user_id} className=\"bg-white border rounded p-4 shadow\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <img\n                src={user.avatar_url || '/default-avatar.png'}\n                className=\"w-10 h-10 rounded-full border\"\n              />\n              <span className=\"text-xs text-gray-500\">{user.role || 'user'}</span>\n            </div>\n            <div className=\"grid grid-cols-27 gap-[2px] text-xs\">\n              {days.map((date) => (\n                <div\n                  key={date}\n                  title={date}\n                  style={{\n                    width: '10px',\n                    height: '10px',\n                    backgroundColor: user.active_days.has(date) ? '#2563eb' : '#e5e7eb',\n                    borderRadius: '2px',\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/people-heatmap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/people-heatmap.users.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":77,"column":15,"nodeType":"JSXOpeningElement","endLine":80,"endColumn":17},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":77,"column":15,"nodeType":"JSXOpeningElement","endLine":80,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nfunction getDayKey(date: Date) {\n  return new Date(date).toISOString().split('T')[0];\n}\n\nfunction getDateArray(daysBack = 90) {\n  const result = [];\n  const today = new Date();\n  for (let i = daysBack; i >= 0; i--) {\n    const d = new Date(today);\n    d.setDate(d.getDate() - i);\n    result.push(getDayKey(d));\n  }\n  return result;\n}\n\nexport default function MiniHeatmapsByUser() {\n  const [users, setUsers] = useState([]);\n  const days = getDateArray();\n\n  useEffect(() => {\n    (async () => {\n      const { data } = await supabase\n        .from('user_profiles')\n        .select('user_id, avatar_url, last_seen_at')\n        .not('last_seen_at', 'is', null);\n\n      const userMap: Record<string, { avatar_url: string | null; days: Set<string> }> = {};\n      data?.forEach((entry: any) => {\n        const id = entry.user_id;\n        const day = getDayKey(entry.last_seen_at);\n        if (!userMap[id]) {\n          userMap[id] = { avatar_url: entry.avatar_url, days: new Set() };\n        }\n        userMap[id].days.add(day);\n      });\n\n      const formatted = Object.entries(userMap).map(\n        ([id, info]: [string, { avatar_url: string | null; days: Set<string> }]) => {\n          const weekMap: Record<string, number> = {};\n          Array.from(info.days).forEach((day) => {\n            const week = day.slice(0, 7); // YYYY-MM\n            weekMap[week] = (weekMap[week] || 0) + 1;\n          });\n          const avgPerWeek = (\n            Object.values(weekMap).reduce((a: number, b: number) => a + b, 0) /\n            Object.keys(weekMap).length\n          ).toFixed(1);\n\n          return {\n            user_id: id,\n            avatar_url: info.avatar_url,\n            active_days: info.days,\n            avg: avgPerWeek,\n          };\n        }\n      );\n\n      setUsers(formatted as any);\n    })();\n  }, []);\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <h1 className=\"text-xl font-bold mb-6\">User Activity Heatmaps</h1>\n      <p className=\"text-sm text-gray-500 mb-4\">\n        Past 90 days · Weekly average activity shown next to avatar\n      </p>\n      <div className=\"grid gap-6 grid-cols-1 sm:grid-cols-2 md:grid-cols-3\">\n        {users.map((user: any) => (\n          <div key={user.user_id} className=\"bg-white border rounded p-4 shadow\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <img\n                src={user.avatar_url || '/default-avatar.png'}\n                className=\"w-10 h-10 rounded-full border\"\n              />\n              <span className=\"text-xs text-gray-500\">Avg: {user.avg}/week</span>\n            </div>\n            <div className=\"grid grid-cols-27 gap-[2px] text-xs\">\n              {days.map((date) => (\n                <div\n                  key={date}\n                  title={date}\n                  style={{\n                    width: '10px',\n                    height: '10px',\n                    backgroundColor: user.active_days.has(date) ? '#2563eb' : '#e5e7eb',\n                    borderRadius: '2px',\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/people-stats.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GetServerSideProps' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used.","line":4,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserProfileRow' is defined but never used.","line":15,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GetServerSideProps } from 'next';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\ntype ActivityMap = Record<string, number>;\n\ntype Props = {\n  stats: ActivityMap;\n};\n\ntype UserProfileRow = {\n  user_id: string;\n  last_seen_at: string;\n};\n\nexport default function PeopleStats({ stats }: Props) {\n  const days = Object.keys(stats).sort();\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <h1 className=\"text-xl font-bold mb-4\">Activity Heatmap (Last Seen by Day)</h1>\n      <div className=\"grid grid-cols-5 gap-2\">\n        {days.map((day) => (\n          <div\n            key={day}\n            className=\"flex items-center justify-between border p-2 rounded bg-gray-50\"\n          >\n            <span className=\"text-xs text-gray-600\">{day}</span>\n            <span className=\"font-semibold text-blue-600\">{stats[day]}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/people.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used. Allowed unused args must match /^_/u.","line":10,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":46},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":22,"column":1,"nodeType":null,"messageId":"delete","endLine":22,"endColumn":3,"fix":{"range":[641,643],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":26,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":28,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":22},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":54,"column":33,"nodeType":"JSXOpeningElement","endLine":54,"endColumn":92},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":54,"column":33,"nodeType":"JSXOpeningElement","endLine":54,"endColumn":92}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { createClient } from '@supabase/supabase-js';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { createServerClient } from '@supabase/ssr';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default async function Page({ req, res }: { req: NextApiRequest; res: NextApiResponse }) {\n  const supa = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return req.cookies?.[name] ?? undefined;\n        },\n      },\n    }\n  );\n  \n  const {\n    data: { session },\n  } = await supa.auth.getSession();\n  const user = session?.user;\n\n  const { data, error } = await supabase.from('user_profiles').select('*');\n  return <People profiles={data || []} />;\n}\n\nexport function People({ profiles }: { profiles: any[] }) {\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <h1 className=\"text-xl font-bold mb-4\">People Directory</h1>\n      <table className=\"min-w-full text-sm border\">\n        <thead>\n          <tr className=\"border-b bg-gray-100 text-left\">\n            <th className=\"p-2\">User ID</th>\n            <th className=\"p-2\">Last Seen</th>\n            <th className=\"p-2\">IP</th>\n            <th className=\"p-2\">Agent</th>\n            <th className=\"p-2\">Avatar</th>\n          </tr>\n        </thead>\n        <tbody>\n          {profiles.map((p) => (\n            <tr key={p.user_id} className=\"border-b\">\n              <td className=\"p-2 text-xs text-gray-600\">{p.user_id}</td>\n              <td className=\"p-2\">{new Date(p.last_seen_at).toLocaleString()}</td>\n              <td className=\"p-2 text-xs\">{p.last_seen_ip ?? '-'}</td>\n              <td className=\"p-2 text-xs truncate\">{p.last_seen_agent?.slice(0, 40) ?? '-'}</td>\n              <td className=\"p-2\">\n                {p.avatar_url ? <img src={p.avatar_url} className=\"w-8 h-8 rounded-full\" /> : '—'}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/pitch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/print/[id].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport QRCode from 'react-qr-code';\nimport Image from 'next/image';\n\nexport default function PrintCard() {\n  const searchParams = useSearchParams();\n  const id = searchParams?.get('id') as string;\n  const [lead, setLead] = useState<any>(null);\n  const [logs, setLogs] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (!id) return;\n\n    supabase\n      .from('leads')\n      .select('*, domains(domain)')\n      .eq('id', id)\n      .single()\n      .then(({ data }) => setLead(data));\n\n    supabase\n      .from('user_action_logs')\n      .select('*')\n      .eq('lead_id', id)\n      .order('timestamp', { ascending: false })\n      .then(({ data }) => setLogs(data || []));\n  }, [id]);\n\n  const claimUrl = lead?.domains?.domain\n    ? `https://${lead.domains.domain}`\n    : 'https://quicksites.ai/claim';\n\n  return lead ? (\n    <div className=\"p-6 max-w-lg mx-auto text-black bg-white print:bg-white print:text-black\">\n      <h1 className=\"text-2xl font-bold mb-4\">You&apos;ve Got a Site!</h1>\n      <p className=\"mb-2\">\n        Hey <strong>{lead.business_name}</strong>,\n      </p>\n      <p className=\"mb-2\">We built you a website and it&apos;s ready to preview or claim at:</p>\n      <p className=\"mb-2 text-blue-600\">{claimUrl}</p>\n\n      <div className=\"mt-4 w-full border rounded overflow-hidden\">\n        <Image\n          src={`/screenshots/${lead.domains?.domain || 'default'}.png`}\n          alt=\"Site preview\"\n          width={800}\n          height={450}\n          className=\"w-full h-auto\"\n          priority\n        />\n      </div>\n\n      <div className=\"mt-6 text-center\">\n        <p className=\"text-sm mb-1\">Scan this to preview or claim:</p>\n        <QRCode\n          value={claimUrl}\n          size={128}\n          style={{ height: 'auto', maxWidth: '128px', width: '128px' }}\n          viewBox={`0 0 128 128`}\n        />\n      </div>\n\n      {logs.length > 0 && (\n        <div className=\"mt-6 border-t pt-4 text-xs\">\n          <h2 className=\"font-bold text-gray-600 mb-2\">Recent Activity</h2>\n          <ul className=\"text-gray-700\">\n            {logs.map((log, idx) => (\n              <li key={idx}>\n                [{new Date(log.timestamp).toLocaleString()}] {log.action_type} by{' '}\n                {log.triggered_by || '—'}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  ) : (\n    <p className=\"p-6\">Loading...</p>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/profile.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":98,"column":11,"nodeType":"JSXOpeningElement","endLine":102,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useCurrentUser } from '@/hooks/useCurrentUser';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport { formatDistanceToNow } from 'date-fns';\nimport { format } from 'date-fns-tz';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-hot-toast';\n\nexport default function ProfilePage() {\n  const [latestLog, setLatestLog] = useState<any | null>(null);\n  const [showUtc, setShowUtc] = useState(false);\n  const [userMetadata, setUserMetadata] = useState<any | null>(null);\n  const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  useEffect(() => {\n    supabase\n      .from('user_deletion_logs')\n      .select('id, email, deleted_at, user_id, admin_actor, reason')\n      .order('deleted_at', { ascending: false })\n      .limit(1)\n      .then(({ data }: { data: any }) => {\n        if (data?.length) setLatestLog(data[0]);\n      });\n\n    supabase.auth.getUser().then(({ data }: { data: any }) => {\n      setUserMetadata(data.user ?? null);\n    });\n  }, []);\n\n  const { user } = useCurrentUser();\n  const [avatarUrl, setAvatarUrl] = useState(user?.avatar_url || '');\n  const [displayName, setDisplayName] = useState(user?.name || '');\n  const [bio, setBio] = useState(user?.bio || '');\n\n  const handleSave = async () => {\n    const { error } = await supabase.auth.updateUser({\n      data: { avatar_url: avatarUrl, name: displayName, bio },\n    });\n    if (error) {\n      if (typeof toast.error === 'function') {\n        toast.error('Failed to update profile');\n      } else {\n        console.error('Toast error function is not available.');\n      }\n    } else {\n      if (typeof toast.success === 'function') {\n        toast.success('Profile updated!');\n      } else {\n        console.error('Toast success function is not available.');\n      }\n    }\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto py-12 px-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Profile Settings</h1>\n\n      {userMetadata && (\n        <div className=\"bg-zinc-900 border border-zinc-700 p-4 rounded mb-6 text-sm\">\n          <h2 className=\"font-semibold mb-2\">User Metadata</h2>\n          <pre className=\"text-xs whitespace-pre-wrap\">{JSON.stringify(userMetadata, null, 2)}</pre>\n        </div>\n      )}\n\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"displayName\">Display Name</Label>\n          <Input\n            id=\"displayName\"\n            value={displayName}\n            onChange={(e) => setDisplayName(e.target.value)}\n            placeholder=\"e.g. Taylor Swift\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"bio\">Bio</Label>\n          <Input\n            id=\"bio\"\n            value={bio}\n            onChange={(e) => setBio(e.target.value)}\n            placeholder=\"Short description...\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"avatarUrl\">Avatar URL</Label>\n          <Input\n            id=\"avatarUrl\"\n            value={avatarUrl}\n            onChange={(e) => setAvatarUrl(e.target.value)}\n            placeholder=\"https://example.com/avatar.png\"\n          />\n        </div>\n        <div className=\"flex gap-2 items-center\">\n          <img\n            src={avatarUrl || '/default-avatar.png'}\n            alt=\"preview\"\n            className=\"w-16 h-16 rounded-full border border-white object-cover\"\n          />\n          <Button onClick={handleSave}>Save</Button>\n        </div>\n\n        <div className=\"pt-6 space-y-4 border-t border-zinc-700 mt-6\">\n          <h2 className=\"text-lg font-semibold\">Account Actions</h2>\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <Button\n              variant=\"secondary\"\n              onClick={async () => {\n                const { error } = await supabase.auth.resetPasswordForEmail(user?.email || '', {\n                  redirectTo: `${window.location.origin}/reset`,\n                });\n                if (error) {\n                  if (typeof toast.error === 'function') {\n                    toast.error('Failed to send reset email');\n                  } else {\n                    console.error('Toast error function is not available.');\n                  }\n                } else {\n                  if (typeof toast.success === 'function') {\n                    toast.success('Reset email sent!');\n                  } else {\n                    console.error('Toast success function is not available.');\n                  }\n                }\n              }}\n            >\n              Send Password Reset Email\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={async () => {\n                const { error } = await supabase.rpc('send_email_verification_with_log', {\n                  user_agent: navigator.userAgent,\n                  sent_from: 'profile_page',\n                });\n                if (error) {\n                  if (typeof toast.error === 'function') {\n                    toast.error('Failed to send verification');\n                  } else {\n                    console.error('Toast error function is not available.');\n                  }\n                } else {\n                  if (typeof toast.success === 'function') {\n                    toast.success('Verification email sent!');\n                  } else {\n                    console.error('Toast success function is not available.');\n                  }\n                }\n              }}\n            >\n              Resend Verification Email\n            </Button>\n          </div>\n\n          <div className=\"pt-6 space-y-4 border-t border-red-800 mt-6\">\n            <h2 className=\"text-lg font-semibold text-red-400\">Danger Zone</h2>\n            <Button\n              variant=\"destructive\"\n              onClick={async () => {\n                const password = window.prompt(\n                  'Please confirm your password to delete your account:'\n                );\n                if (!password) return;\n                const confirmed = window.confirm(\n                  'Are you absolutely sure? This action cannot be undone.'\n                );\n                if (!confirmed) return;\n\n                const { error } = await supabase.rpc('delete_current_user_with_log', {\n                  password_input: password,\n                });\n\n                if (error) {\n                  if (typeof toast.error === 'function') {\n                    toast.error('Failed to delete account');\n                  } else {\n                    console.error('Toast error function is not available.');\n                  }\n                } else {\n                  if (typeof toast.success === 'function') {\n                    toast.success('Account deleted');\n                  } else {\n                    console.error('Toast success function is not available.');\n                  }\n                  setTimeout(() => {\n                    window.location.href = '/goodbye';\n                  }, 1500);\n                }\n              }}\n            >\n              Delete My Account\n            </Button>\n          </div>\n\n          <div className=\"pt-6 space-y-4 border-t border-yellow-700 mt-6\">\n            <h2 className=\"text-lg font-semibold text-yellow-400\">Admin Log</h2>\n            <button\n              className=\"text-xs text-blue-400 hover:underline\"\n              onClick={() => setShowUtc((v) => !v)}\n            >\n              Toggle UTC ({showUtc ? 'Local' : 'UTC'})\n            </button>\n            <p className=\"text-sm text-zinc-400 mt-2\">\n              Most recent deletion:\n              <code className=\"ml-2 bg-zinc-800 px-2 py-1 rounded text-xs text-yellow-300\">\n                {latestLog\n                  ? `${latestLog.email} • ${format(new Date(latestLog.deleted_at), showUtc ? \"MMM d, yyyy HH:mm 'UTC'\" : 'MMM d, yyyy HH:mm zzz')}\n (${formatDistanceToNow(new Date(latestLog.deleted_at), { addSuffix: true })})` +\n                    (latestLog.admin_actor ? ` (by ${latestLog.admin_actor})` : '')\n                  : 'Loading...'}\n              </code>\n            </p>\n            <p className=\"text-sm text-zinc-400\">\n              Account deletions are recorded in{' '}\n              <code className=\"bg-zinc-800 px-1 rounded\">user_deletion_logs</code>. This table\n              stores the user ID, email, and timestamp. Admins can view and audit this log from the\n              Supabase dashboard or the audit UI. Local timezone is:{' '}\n              <code className=\"bg-zinc-800 px-1 rounded\">{timeZone}</code>. A similar log is\n              recorded for verification emails via the{' '}\n              <code className=\"bg-zinc-800 px-1 rounded\">verification_logs</code> table, including\n              user agent and origin info.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/queue.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/referrals.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [role, router]","fix":{"range":[1451,1457],"text":"[role, router]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useCanonicalRole } from '@/hooks/useCanonicalRole';\nimport { useRouter } from 'next/navigation';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nconst DEBUG = process.env.NEXT_PUBLIC_DEBUG_AUTH === 'true';\n\nexport default function ReferralsPage() {\n  const [users, setUsers] = useState<any[]>([]);\n  const [profiles, setProfiles] = useState<Record<string, any>>({});\n  const [error, setError] = useState('');\n  const { role } = useCanonicalRole();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (role === null) return;\n\n    if (role !== 'admin') {\n      router.push('/login?error=unauthorized');\n      return;\n    }\n\n    const fetchData = async () => {\n      if (DEBUG) console.log('[👥 Fetching Users + Profiles]');\n\n      const { data: userData, error: userError } = await supabase.auth.admin.listUsers();\n      if (userError) {\n        setError(userError.message);\n        return;\n      }\n      setUsers(userData?.users || []);\n\n      const { data: profileData } = await supabase\n        .from('user_profiles')\n        .select('user_id, role, referrer_id');\n\n      const profileMap: Record<string, any> = {};\n      profileData?.forEach((p) => {\n        profileMap[p.user_id] = { role: p.role, referrer_id: p.referrer_id };\n      });\n      setProfiles(profileMap);\n\n      if (DEBUG) console.log('[✅ Profiles Loaded]', profileMap);\n    };\n\n    fetchData();\n  }, [role]);\n\n  const referrers = users.filter((u) => profiles[u.id]?.role === 'affiliate_referrer');\n\n  return (\n    <div className=\"p-6 text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">Referral Dashboard</h1>\n      {error && <p className=\"text-red-500 text-sm mb-4\">{error}</p>}\n      <table className=\"w-full text-sm text-left text-gray-300 bg-gray-800 rounded overflow-hidden\">\n        <thead className=\"bg-gray-700 text-gray-100 uppercase text-xs tracking-wide\">\n          <tr>\n            <th className=\"px-4 py-2\">Referrer</th>\n            <th className=\"px-4 py-2\">Resellers Referred</th>\n            <th className=\"px-4 py-2\">Est. Sites Claimed</th>\n            <th className=\"px-4 py-2\">Est. Earnings</th>\n          </tr>\n        </thead>\n        <tbody>\n          {referrers.map((r, i) => {\n            const refId = r.id;\n            const resellers = users.filter(\n              (u) => profiles[u.id]?.referrer_id === refId && profiles[u.id]?.role === 'reseller'\n            );\n            const estimatedSites = resellers.length * 10;\n            const estimatedEarnings = estimatedSites * 49 * 0.1;\n\n            return (\n              <tr key={r.id} className={i % 2 === 0 ? 'bg-gray-800' : 'bg-gray-900'}>\n                <td className=\"px-4 py-2\">{r.email}</td>\n                <td className=\"px-4 py-2\">{resellers.length}</td>\n                <td className=\"px-4 py-2\">{estimatedSites}</td>\n                <td className=\"px-4 py-2\">${estimatedEarnings.toFixed(2)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/register.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":6,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nexport default function RegisterPage() {\n  const router = useRouter();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [referrerId, setReferrerId] = useState<string | null>(null);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const ref = new URLSearchParams(window.location.search).get('ref');\n    if (ref) {\n      localStorage.setItem('referrer_id', ref);\n      setReferrerId(ref);\n    }\n  }, []);\n\n  const register = async (e: any) => {\n    e.preventDefault();\n\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          role: 'reseller',\n          referrer_id: localStorage.getItem('referrer_id') || null,\n        },\n      },\n    });\n\n    if (error) {\n      setMessage(error.message);\n    } else {\n      setMessage('Registration successful! Check your email.');\n      setEmail('');\n      setPassword('');\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-md mx-auto text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">Register</h1>\n      <form onSubmit={register} className=\"space-y-4\">\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className=\"w-full px-3 py-2 rounded bg-gray-700 border border-gray-600\"\n          required\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          className=\"w-full px-3 py-2 rounded bg-gray-700 border border-gray-600\"\n          required\n        />\n        {referrerId && (\n          <p className=\"text-xs text-gray-400\">Signing up via referral: {referrerId}</p>\n        )}\n        <button\n          type=\"submit\"\n          className=\"w-full bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded text-white\"\n        >\n          Create Account\n        </button>\n        {message && <p className=\"text-sm text-green-400 mt-2\">{message}</p>}\n      </form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/reports/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function ReportsDashboardExtended() {\n  const [log, setLog] = useState('');\n  const [storage, setStorage] = useState<{ [key: string]: number }>({});\n  const [dates, setDates] = useState<{ oldest: string; newest: string }>({\n    oldest: '',\n    newest: '',\n  });\n  const [email, setEmail] = useState('analytics@quicksites.ai');\n  const [nightly, setNightly] = useState(true);\n  const [weekly, setWeekly] = useState(true);\n\n  useEffect(() => {\n    fetch('/reports/activity.log')\n      .then((res) => res.text())\n      .then(setLog);\n\n    fetch('/reports/analytics/index.json')\n      .then((res) => res.json())\n      .then((files) => {\n        const csvs = files.filter((f: string) => f.endsWith('.csv')).length;\n        const pdfs = files.filter((f: string) => f.endsWith('.pdf')).length;\n        const sorted = files.filter((f: string) => f.match(/_(\\d{4}-\\d{2}-\\d{2})/)).sort();\n        const oldest = sorted[0]?.match(/_(\\d{4}-\\d{2}-\\d{2})/)?.[1] || '';\n        const newest = sorted.at(-1)?.match(/_(\\d{4}-\\d{2}-\\d{2})/)?.[1] || '';\n        setStorage({ csvs, pdfs });\n        setDates({ oldest, newest });\n      });\n  }, []);\n\n  const confirmDelete = () => {\n    if (window.confirm('Are you sure? This will delete all CSVs, PDFs, and previews.')) {\n      // You would replace this with a server call to delete files\n      console.log('🧹 Deleting all archive files...');\n    }\n  };\n\n  return (\n    <div className=\"p-6 text-text\">\n      <h1 className=\"text-2xl font-bold mb-6\">📁 Reports Dashboard</h1>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"bg-zinc-800 p-4 rounded shadow\">\n          <h2 className=\"text-lg font-semibold mb-2\">📋 Activity Log</h2>\n          <pre className=\"text-sm overflow-auto whitespace-pre-wrap max-h-[300px] bg-black p-3 rounded\">\n            {log || 'Loading...'}\n          </pre>\n        </div>\n\n        <div className=\"bg-zinc-800 p-4 rounded shadow space-y-3\">\n          <h2 className=\"text-lg font-semibold\">📦 Storage Summary</h2>\n          <ul className=\"text-sm space-y-1\">\n            <li>CSV Files: {storage.csvs ?? '—'}</li>\n            <li>PDF Summaries: {storage.pdfs ?? '—'}</li>\n            <li>Oldest Entry: {dates.oldest}</li>\n            <li>Newest Entry: {dates.newest}</li>\n          </ul>\n\n          <h3 className=\"pt-4 font-semibold\">⚙️ Automation Settings</h3>\n          <div className=\"space-y-2\">\n            <label className=\"flex items-center gap-2\">\n              <input type=\"checkbox\" checked={nightly} onChange={() => setNightly(!nightly)} />\n              Enable Nightly Exports\n            </label>\n            <label className=\"flex items-center gap-2\">\n              <input type=\"checkbox\" checked={weekly} onChange={() => setWeekly(!weekly)} />\n              Enable Weekly Summary\n            </label>\n            <label className=\"block text-sm mt-2\">Recipient Email</label>\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"w-full px-2 py-1 rounded bg-zinc-900 border border-zinc-700\"\n            />\n            <button className=\"text-sm px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 mt-1\">\n              Save Email\n            </button>\n          </div>\n\n          <div className=\"pt-4\">\n            <button\n              className=\"text-sm px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700\"\n              onClick={confirmDelete}\n            >\n              🗑 Delete All Archives\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/request-access.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/reset.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'session' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// admin/pages/reset.tsx\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nexport default function ResetPassword() {\n  const [password, setPassword] = useState('');\n  const [status, setStatus] = useState('');\n  const router = useRouter();\n\n  useEffect(() => {\n    supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === 'PASSWORD_RECOVERY') {\n        setStatus('Ready to reset password.');\n      }\n    });\n  }, []);\n\n  const updatePassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const { error } = await supabase.auth.updateUser({ password });\n    if (error) {\n      setStatus(`Error: ${error.message}`);\n    } else {\n      setStatus('Password updated! Redirecting...');\n      setTimeout(() => router.push('/login'), 2000);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 px-4\">\n      <form onSubmit={updatePassword} className=\"bg-white p-6 rounded shadow-md w-full max-w-sm\">\n        <h2 className=\"text-xl font-bold mb-4\">Reset Password</h2>\n        <p className=\"text-sm mb-4 text-gray-600\">{status}</p>\n        <input\n          type=\"password\"\n          placeholder=\"New password\"\n          className=\"w-full border px-3 py-2 mb-4 rounded\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        <button type=\"submit\" className=\"w-full bg-blue-600 text-white py-2 rounded\">\n          Update Password\n        </button>\n      </form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/roles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/security/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/security/timeline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/seed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/settings/nav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/shared/[id].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":75,"column":13,"nodeType":"JSXOpeningElement","endLine":79,"endColumn":15},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `·variant=\"outline\"·onClick={()·=>·(window.location.href·=·`/templates/new?from=${id}`)}` with `⏎··········variant=\"outline\"⏎··········onClick={()·=>·(window.location.href·=·`/templates/new?from=${id}`)}⏎········`","line":97,"column":16,"nodeType":null,"messageId":"replace","endLine":97,"endColumn":103,"fix":{"range":[3055,3142],"text":"\n          variant=\"outline\"\n          onClick={() => (window.location.href = `/templates/new?from=${id}`)}\n        "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useRouter, useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport QRCode from 'qrcode';\nimport Image from 'next/image';\nimport TemplatePreview from '@/components/admin/templates/template-preview';\nimport { Button } from '@/components/ui/button';\nimport { generateSocialCard } from '@/admin/lib/generateSocialCard';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function SharedSnapshotPage() {\n  const searchParams = useSearchParams();\n  const id = searchParams?.get('id') as string;\n  const v = searchParams?.get('v') as string;\n\n  const [template, setTemplate] = useState<any>(null);\n  const [qrDataUrl, setQrDataUrl] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!id) return;\n\n    QRCode.toDataURL(`${window.location.origin}/shared/${id}`).then(setQrDataUrl);\n\n    const loadData = async () => {\n      let res;\n      if (v) {\n        res = await supabase\n          .from('template_versions')\n          .select('full_data, template_name, commit_message')\n          .eq('id', v)\n          .single();\n      } else {\n        res = await supabase\n          .from('snapshots')\n          .select(\n            'data, template_name, editor_email, shared_at, thumbnail_url, theme, brand, color_scheme'\n          )\n          .eq('id', id)\n          .single();\n      }\n      if (res.data) setTemplate(res.data);\n    };\n\n    loadData();\n  }, [id, v]);\n\n  const isDark = template?.theme === 'dark';\n  const brand = template?.brand || 'blue';\n\n  const themeClasses = isDark ? 'bg-gray-900 text-white' : 'bg-white text-gray-900';\n\n  const brandClass =\n    brand === 'green' ? 'text-green-400' : brand === 'red' ? 'text-red-400' : 'text-blue-400';\n\n  if (!template) return <div className=\"text-white p-10\">Loading shared preview...</div>;\n\n  return (\n    <div\n      className={`min-h-screen px-4 sm:px-6 py-10 max-w-screen-lg mx-auto space-y-6 ${themeClasses}`}\n    >\n      <h1 className={`text-2xl font-bold ${brandClass}`}>Shared Snapshot</h1>\n\n      <div className=\"flex flex-wrap items-center gap-6\">\n        {qrDataUrl && (\n          <div>\n            <Image src={qrDataUrl} alt=\"QR code\" width={120} height={120} />\n          </div>\n        )}\n        {template?.thumbnail_url && (\n          <div className=\"max-w-[320px]\">\n            <img\n              src={template.thumbnail_url}\n              alt=\"Snapshot preview\"\n              className=\"rounded shadow border border-gray-600\"\n            />\n          </div>\n        )}\n      </div>\n\n      <div\n        className=\"border rounded bg-white dark:bg-gray-800 shadow-md overflow-x-auto p-4\"\n        id=\"preview-capture\"\n      >\n        <TemplatePreview\n          data={template.data}\n          theme={template.theme}\n          brand={template.brand}\n          colorScheme={template.color_scheme}\n        />\n      </div>\n\n      <div className=\"flex flex-wrap gap-3 mt-6 justify-between\">\n        <Button variant=\"outline\" onClick={() => (window.location.href = `/templates/new?from=${id}`)}>\n          Remix This\n        </Button>\n        <Button onClick={() => generateSocialCard({})} variant=\"secondary\">\n          Download PNG\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/sites/[slug]/page.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎··params,⏎}:·{⏎··params:·{·slug:·string·};⏎` with `·params·}:·{·params:·{·slug:·string·}·`","line":14,"column":37,"nodeType":null,"messageId":"replace","endLine":18,"endColumn":1,"fix":{"range":[404,448],"text":" params }: { params: { slug: string } "}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎······'*,·snapshots(data),·branding_profiles(name,·theme,·brand,·accent_color,·logo_url)'⏎····` with `'*,·snapshots(data),·branding_profiles(name,·theme,·brand,·accent_color,·logo_url)'`","line":23,"column":13,"nodeType":null,"messageId":"replace","endLine":25,"endColumn":5,"fix":{"range":[562,657],"text":"'*, snapshots(data), branding_profiles(name, theme, brand, accent_color, logo_url)'"}},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":42,"column":13,"nodeType":"JSXOpeningElement","endLine":46,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"// app/admin/sites/[slug]/page.tsx\n\nimport { createClient } from '@supabase/supabase-js';\n\nexport const runtime = 'nodejs';\nexport const dynamic = 'force-dynamic';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\n// ✅ Type directly and do not try to match PageProps — Next infers this correctly\nexport default async function Page({\n  params,\n}: {\n  params: { slug: string };\n}) {\n  const { slug } = params;\n\n  const { data: site } = await supabase\n    .from('published_sites')\n    .select(\n      '*, snapshots(data), branding_profiles(name, theme, brand, accent_color, logo_url)'\n    )\n    .eq('slug', slug)\n    .eq('status', 'published')\n    .single();\n\n  if (!site) {\n    return <p className=\"p-6 text-red-600\">Site not found</p>;\n  }\n\n  const themeColor = site.branding_profiles?.accent_color || '#111';\n\n  return (\n    <div className=\"min-h-screen p-6\" style={{ backgroundColor: `${themeColor}15` }}>\n      <div className=\"max-w-3xl mx-auto bg-white p-6 rounded shadow\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h1 className=\"text-xl font-bold\">{site.branding_profiles?.name}</h1>\n          {site.branding_profiles?.logo_url && (\n            <img\n              src={site.branding_profiles.logo_url}\n              className=\"w-10 h-10 rounded-full\"\n              alt=\"Logo\"\n            />\n          )}\n        </div>\n\n        <pre className=\"text-sm bg-gray-100 p-4 rounded whitespace-pre-wrap\">\n          {JSON.stringify(site.snapshots?.data, null, 2)}\n        </pre>\n\n        <p className=\"mt-4 text-xs text-gray-400 text-right\">\n          quicksites.ai — viewed {new Date().toLocaleDateString()}\n        </p>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/sites/dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect } from 'react';\nimport { json } from '@/lib/api/json';\nimport Page from '@/components/layout/page';\nimport Dashboard from '@/components/admin/dashboard-grid-draggable';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport Link from 'next/link';\nimport AuthGuard from '@/components/admin/auth-guard';\n\nexport default function DashboardPage() {\n  useEffect(() => {\n    (async () => {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n\n      if (user) {\n        let geo: any = {};\n        try {\n          const res = await fetch('https://ipapi.co/json/');\n          geo = await res.json();\n        } catch (e) {\n          console.warn('🌍❌ [Sites] [Dashboard] [useEffect] Geo lookup failed', { e });\n        }\n\n        await supabase.from('dashboard_access_log').insert({\n          user_id: user.id,\n          email: user.email,\n          timestamp: new Date().toISOString(),\n          user_agent: navigator.userAgent,\n          ip_address: geo?.ip || null,\n          city: geo?.city || null,\n          region: geo?.region || null,\n          country: geo?.country_name || null,\n        });\n      }\n    })();\n  }, []);\n\n  return (\n    <Page>\n      <div className=\"flex justify-between items-center mb-4\">\n        <h1 className=\"text-xl font-bold\">Admin Dashboard</h1>\n        <Link href=\"/admin/logs/dashboard\" className=\"text-sm text-blue-600 hover:underline\">\n          View Access Logs\n        </Link>\n      </div>\n      <AuthGuard roles={['admin']}>\n        <Dashboard\n          renderers={{}}\n          order={[]}\n          hidden={[]}\n          onSave={() => {\n            return;\n          }}\n          onAddBlock={() => {\n            return;\n          }}\n          settings={{}}\n          updateBlockSetting={() => {\n            return;\n          }}\n        />\n      </AuthGuard>\n    </Page>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/sites/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Page' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":44,"column":15,"nodeType":"JSXOpeningElement","endLine":48,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport Page from '@/components/layout/page';\nimport AdminLayout from '@/components/admin/admin-layout';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function SiteDirectory() {\n  const [sites, setSites] = useState<any[]>([]);\n\n  useEffect(() => {\n    supabase\n      .from('public_sites') // ⚠️ was 'published_sites' before — confirm table name\n      .select('*, branding_profiles(name, logo_url)')\n      .eq('status', 'published')\n      .eq('is_public', true)\n      .order('published_at', { ascending: false })\n      .then(({ data }) => setSites(data || []));\n  }, []);\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <h1 className=\"text-2xl font-bold mb-4\">Live Public Sites</h1>\n      <ul className=\"space-y-4\">\n        {sites.map((site) => (\n          <li key={site.id} className=\"border p-4 rounded flex items-center justify-between\">\n            <div>\n              <div className=\"text-sm font-semibold\">{site.branding_profiles?.name}</div>\n              <a\n                className=\"text-blue-600 text-sm\"\n                href={`/sites/${site.slug}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {site.slug}.quicksites.ai\n              </a>\n            </div>\n            {site.branding_profiles?.logo_url && (\n              <img\n                src={site.branding_profiles.logo_url}\n                alt=\"Logo\"\n                className=\"w-10 h-10 rounded-full object-cover\"\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n// 👇 Integrate with sidebar layout\n// SiteDirectory.getLayout = (page: React.ReactNode) => (\n//   <AdminSidebarLayout>{page}</AdminSidebarLayout>\n// );\nSiteDirectory.getLayout = (page: any) => <AdminLayout>{page}</AdminLayout>;\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/start-campaign.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'nameWasManuallySet' is assigned a value but never used.","line":15,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'leadsLoading' is assigned a value but never used.","line":33,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useState } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport AdminLayout from '@/components/layout/admin-layout';\nimport { useCampaignForm } from '@/hooks/useCampaignForm';\n\nexport default function StartCampaign() {\n  const searchParams = useSearchParams();\n  const [city, setCity] = useState((searchParams?.get('city') as string) || '');\n  const [state, setState] = useState((searchParams?.get('state') as string) || '');\n\n  const {\n    name,\n    setName,\n    nameWasManuallySet,\n    setNameWasManuallySet,\n    alt1,\n    alt2,\n    setAlt1,\n    setAlt2,\n    startsAt,\n    setStartsAt,\n    endsAt,\n    setEndsAt,\n    silentMode,\n    setSilentMode,\n    error,\n    validationErrors,\n    submit,\n    leads,\n    selectedLeads,\n    toggleLead,\n    leadsLoading,\n  } = useCampaignForm(city, state);\n\n  return (\n    <div className=\"p-6 max-w-3xl mx-auto text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">Start Campaign</h1>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          submit();\n        }}\n        className=\"space-y-4\"\n      >\n        <input\n          placeholder=\"Campaign Name\"\n          value={name}\n          onChange={(e) => {\n            setName(e.target.value);\n            setNameWasManuallySet(true);\n          }}\n          className=\"w-full px-3 py-2 rounded bg-zinc-800 border border-zinc-600\"\n        />\n        {validationErrors.name && <p className=\"text-sm text-red-400\">{validationErrors.name}</p>}\n\n        <div className=\"flex gap-4\">\n          <input\n            placeholder=\"City\"\n            value={city}\n            onChange={(e) => setCity(e.target.value)}\n            className=\"w-full px-3 py-2 rounded bg-zinc-800 border border-zinc-600\"\n          />\n          <input\n            placeholder=\"State\"\n            value={state}\n            onChange={(e) => setState(e.target.value)}\n            className=\"w-full px-3 py-2 rounded bg-zinc-800 border border-zinc-600\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <p className=\"text-sm font-semibold\">Select at least 2 Leads</p>\n          {leads.map((lead) => (\n            <label key={lead.id} className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                checked={selectedLeads.includes(lead.id)}\n                onChange={() => toggleLead(lead.id)}\n              />\n              <span>{lead.business_name}</span>\n            </label>\n          ))}\n          {validationErrors.leads && (\n            <p className=\"text-sm text-red-400\">{validationErrors.leads}</p>\n          )}\n        </div>\n\n        <div className=\"flex gap-4\">\n          <input\n            placeholder=\"Alt Domain 1\"\n            value={alt1}\n            onChange={(e) => setAlt1(e.target.value)}\n            className=\"w-full px-3 py-2 rounded bg-zinc-800 border border-zinc-600\"\n          />\n          <input\n            placeholder=\"Alt Domain 2\"\n            value={alt2}\n            onChange={(e) => setAlt2(e.target.value)}\n            className=\"w-full px-3 py-2 rounded bg-zinc-800 border border-zinc-600\"\n          />\n        </div>\n\n        <div className=\"flex gap-4\">\n          <input\n            type=\"datetime-local\"\n            value={startsAt}\n            onChange={(e) => setStartsAt(e.target.value)}\n            className=\"w-full px-3 py-2 rounded bg-zinc-800 border border-zinc-600\"\n          />\n          <input\n            type=\"datetime-local\"\n            value={endsAt}\n            onChange={(e) => setEndsAt(e.target.value)}\n            className=\"w-full px-3 py-2 rounded bg-zinc-800 border border-zinc-600\"\n          />\n        </div>\n        {validationErrors.dates && <p className=\"text-sm text-red-400\">{validationErrors.dates}</p>}\n\n        <label className=\"flex items-center gap-2 text-sm\">\n          <input\n            type=\"checkbox\"\n            checked={silentMode}\n            onChange={(e) => setSilentMode(e.target.checked)}\n          />\n          Silent Mode (no notifications)\n        </label>\n\n        {error && (\n          <div className=\"text-red-400 text-sm border border-red-600 p-2 rounded\">⚠️ {error}</div>\n        )}\n\n        <button\n          type=\"submit\"\n          className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\n        >\n          Launch Campaign\n        </button>\n      </form>\n    </div>\n  );\n}\n\nStartCampaign.getLayout = function getLayout(page: React.ReactNode) {\n  return <AdminLayout>{page}</AdminLayout>;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/templates/new.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'initialData' is assigned a value but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { createClient } from '@supabase/supabase-js';\nimport TemplateEditor from '@/components/admin/templates/template-editor';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function NewTemplatePage() {\n  const searchParams = useSearchParams();\n  const from = searchParams?.get('from') as string;\n  const [initialData, setInitialData] = useState<any | null>(null);\n\n  useEffect(() => {\n    const loadSnapshot = async () => {\n      if (!from || typeof from !== 'string') return;\n\n      const { data: snapshot, error } = await supabase\n        .from('snapshots')\n        .select('data, theme, brand, color_scheme')\n        .eq('id', from)\n        .single();\n\n      if (error) {\n        console.warn('Could not load snapshot:', error.message);\n        return;\n      }\n\n      // Optional: record remix\n      const user = await supabase.auth.getUser();\n      const userId = user?.data?.user?.id;\n\n      if (userId) {\n        await supabase.from('remix_events').insert([\n          {\n            original_snapshot_id: from,\n            user_id: userId,\n          },\n        ]);\n      }\n\n      setInitialData({\n        template_name: 'Untitled (Remix)',\n        layout: 'default',\n        color_scheme: snapshot.color_scheme,\n        theme: snapshot.theme,\n        brand: snapshot.brand,\n        data: snapshot.data,\n      });\n    };\n\n    loadSnapshot();\n  }, [from]);\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-xl font-bold mb-4\">New Template</h1>\n      <TemplateEditor templateName=\"new-template\" />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/the-grid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/tokens/logs.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'supabase'. Either exclude it or remove the dependency array. Outer scope values like 'supabase' aren't valid dependencies because mutating them doesn't re-render the component.","line":22,"column":6,"nodeType":"ArrayExpression","endLine":22,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[653,663],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { supabase } from '@/lib/supabase/client';\n\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Tooltip } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Tooltip);\n\nexport default function TokenLogsDashboard() {\n  const [logs, setLogs] = useState<any[]>([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    supabase\n      .from('token_logs')\n      .select('*')\n      .order('downloaded_at', { ascending: false })\n      .then(({ data }) => {\n        setLogs(data || []);\n      });\n  }, [supabase]);\n\n  const tokenCounts = logs.reduce((acc: any, log: any) => {\n    acc[log.token_hash] = (acc[log.token_hash] || 0) + 1;\n    return acc;\n  }, {});\n\n  const isSuspicious = (hash: string) => tokenCounts[hash] > 5;\n\n  const filtered = logs.filter(\n    (log) =>\n      log.file_name.toLowerCase().includes(filter.toLowerCase()) ||\n      log.token_hash.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const dateCounts = filtered.reduce((acc: any, log: any) => {\n    const day = log.downloaded_at?.slice(0, 10);\n    acc[day] = (acc[day] || 0) + 1;\n    return acc;\n  }, {});\n\n  const chartData = {\n    labels: Object.keys(dateCounts),\n    datasets: [\n      {\n        label: 'Downloads',\n        data: Object.values(dateCounts),\n        backgroundColor: 'var(--color-accent)',\n      },\n    ],\n  };\n\n  const exportCSV = () => {\n    const rows = filtered.map((log) => ({\n      file: log.file_name,\n      time: log.downloaded_at,\n      token: log.token_hash,\n      user_agent: log.user_agent,\n      suspicious: isSuspicious(log.token_hash),\n    }));\n    const csv = ['file,time,token,user_agent,suspicious']\n      .concat(rows.map((r) => `${r.file},${r.time},${r.token},\"${r.user_agent}\",${r.suspicious}`))\n      .join('\\n');\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'token_logs.csv';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"p-6 text-text\">\n      <h1 className=\"text-2xl font-bold mb-4\">📊 Token Download Logs</h1>\n\n      <input\n        type=\"text\"\n        placeholder=\"Filter by file or token hash\"\n        value={filter}\n        onChange={(e) => setFilter(e.target.value)}\n        className=\"w-full max-w-md mb-2 px-3 py-2 rounded bg-zinc-900 border border-zinc-700 text-sm\"\n      />\n\n      <button\n        onClick={exportCSV}\n        className=\"mb-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n      >\n        Download CSV\n      </button>\n\n      <div className=\"bg-black p-4 rounded shadow mb-6\">\n        <Bar data={chartData} options={{ responsive: true }} />\n      </div>\n\n      <table className=\"w-full text-sm text-left bg-zinc-900 text-zinc-300 rounded overflow-hidden\">\n        <thead className=\"bg-zinc-700 text-xs uppercase text-zinc-100\">\n          <tr>\n            <th className=\"p-2\">File</th>\n            <th className=\"p-2\">Time</th>\n            <th className=\"p-2\">Token Hash</th>\n            <th className=\"p-2\">User Agent</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filtered.map((log, i) => (\n            <tr key={i} className=\"border-b border-zinc-800\">\n              <td className=\"p-2\">{log.file_name}</td>\n              <td className=\"p-2\">{new Date(log.downloaded_at).toLocaleString()}</td>\n              <td className=\"p-2 text-xs truncate\">\n                {isSuspicious(log.token_hash) && <span className=\"text-yellow-400\">⚠️ </span>}\n                {log.token_hash}\n              </td>\n              <td className=\"p-2 text-xs truncate\">{log.user_agent}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/tokens/page.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Delete `⏎`","line":6,"column":1,"nodeType":null,"messageId":"delete","endLine":7,"endColumn":1,"fix":{"range":[151,152],"text":""}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { supabase } from '@/lib/supabase/client';\n\nexport default function TokenManager() {\n\n  const [tokens, setTokens] = useState<any[]>([]);\n  const [fileName, setFileName] = useState('');\n  const [expiresAt, setExpiresAt] = useState('');\n\n  const loadTokens = async () => {\n    const { data } = await supabase\n      .from('report_tokens')\n      .select('*')\n      .order('expires_at', { ascending: false })\n      .limit(20);\n    setTokens(data || []);\n  };\n\n  useEffect(() => {\n    loadTokens();\n  }, []);\n\n  const createToken = async () => {\n    const raw = Math.random().toString(36).slice(2) + Date.now().toString(36);\n    const hash = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(raw));\n    const tokenHash = Array.from(new Uint8Array(hash))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('');\n\n    await supabase.from('report_tokens').insert({\n      file_name: fileName,\n      token_hash: tokenHash,\n      expires_at: expiresAt,\n    });\n\n    alert(`✅ Token created! Link: /api/reports/download?file=${fileName}&token=${raw}`);\n    setFileName('');\n    setExpiresAt('');\n    loadTokens();\n  };\n\n  return (\n    <div className=\"p-6 text-text max-w-3xl mx-auto space-y-6\">\n      <h1 className=\"text-2xl font-bold\">🔐 Report Access Tokens</h1>\n\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm\">File Name (e.g. summary_2025-06-05.pdf)</label>\n        <input\n          type=\"text\"\n          value={fileName}\n          onChange={(e) => setFileName(e.target.value)}\n          className=\"w-full px-2 py-1 rounded bg-zinc-900 border border-zinc-700\"\n        />\n\n        <label className=\"block text-sm mt-2\">Expires At</label>\n        <input\n          type=\"datetime-local\"\n          value={expiresAt}\n          onChange={(e) => setExpiresAt(e.target.value)}\n          className=\"w-full px-2 py-1 rounded bg-zinc-900 border border-zinc-700\"\n        />\n\n        <button\n          onClick={createToken}\n          className=\"mt-3 px-4 py-2 bg-emerald-600 text-white rounded hover:bg-emerald-700\"\n        >\n          Generate Token\n        </button>\n      </div>\n\n      <div className=\"pt-6\">\n        <h2 className=\"font-semibold mb-2\">🧾 Recent Tokens</h2>\n        <ul className=\"text-sm bg-zinc-900 rounded p-4 space-y-2\">\n          {tokens.map((t, i) => (\n            <li key={i} className=\"flex justify-between\">\n              <span>{t.file_name}</span>\n              <span className=\"text-zinc-400\">{new Date(t.expires_at).toLocaleString()}</span>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/tools/chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [view, start, end, fetchData]","fix":{"range":[1734,1752],"text":"[view, start, end, fetchData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { AdminAnalyticsToolbar } from '@/components/admin/analytics/admin-analytics-toolbar';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport { useDateRange } from '@/hooks/useDateRange';\n\ntype SignalDataPoint = {\n  date: string;\n  views: number;\n  feedback: number;\n};\n\nexport default function AnalyticsChartView() {\n  const [view, setView] = useState<'daily' | 'weekly' | 'monthly'>('daily');\n  const [stats, setStats] = useState<{ label: string; value: number }[]>([]);\n  const [data, setData] = useState<SignalDataPoint[]>([]);\n  const { start, end } = useDateRange();\n\n  const fetchData = async () => {\n    if (!start || !end) return;\n\n    const res = await fetch(`/api/analytics/signals?start=${start}&end=${end}`);\n    const rows: SignalDataPoint[] = await res.json();\n    setData(rows);\n\n    const totals = rows.reduce(\n      (acc, row) => {\n        acc.views += row.views;\n        acc.feedback += row.feedback;\n        return acc;\n      },\n      { views: 0, feedback: 0 }\n    );\n\n    setStats([\n      { label: 'Views', value: totals.views },\n      { label: 'Feedback', value: totals.feedback },\n    ]);\n  };\n\n  const downloadCSV = () => {\n    const rows = ['Date,Views,Feedback', ...data.map((r) => `${r.date},${r.views},${r.feedback}`)];\n    const blob = new Blob([rows.join('\\n')], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'signals.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [view, start, end]);\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto text-white\">\n      <AdminAnalyticsToolbar\n        title=\"Odessa Daily Signals\"\n        view={view}\n        setView={setView}\n        onRefresh={fetchData}\n        stats={stats}\n      >\n        <button\n          onClick={downloadCSV}\n          className=\"px-3 py-1 bg-blue-700 hover:bg-blue-600 rounded text-white\"\n        >\n          ⬇️ Export CSV\n        </button>\n      </AdminAnalyticsToolbar>\n\n      <div className=\"bg-zinc-800 rounded p-6 mt-6\">\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart\n            data={data}\n            onClick={(e) => {\n              const clicked = e?.activeLabel;\n              if (clicked) alert(`Drilldown for ${clicked}`);\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#444\" />\n            <XAxis dataKey=\"date\" stroke=\"#999\" />\n            <YAxis stroke=\"#999\" />\n            <Tooltip\n              contentStyle={{ backgroundColor: '#222', borderColor: '#555' }}\n              labelStyle={{ color: '#fff' }}\n              formatter={(val, key) => [val, key === 'views' ? 'Views' : 'Feedback']}\n            />\n            <Line type=\"monotone\" dataKey=\"views\" stroke=\"#8884d8\" strokeWidth={2} />\n            <Line type=\"monotone\" dataKey=\"feedback\" stroke=\"#82ca9d\" strokeWidth={2} />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/tools/digest.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function AdminDigestPage() {\n  const [logs, setLogs] = useState<any[]>([]);\n  const [sending, setSending] = useState(false);\n\n  const fetchLogs = async () => {\n    const res = await fetch('/api/digest-log');\n    const json = await res.json();\n    setLogs(json || []);\n  };\n\n  const triggerDigest = async () => {\n    setSending(true);\n    await fetch('/api/send-weekly-digest');\n    await fetchLogs();\n    setSending(false);\n  };\n\n  useEffect(() => {\n    fetchLogs();\n  }, []);\n\n  return (\n    <div className=\"p-6 max-w-3xl mx-auto text-white space-y-6\">\n      <h1 className=\"text-2xl font-bold\">📡 Weekly Digest Admin</h1>\n      <button\n        onClick={triggerDigest}\n        className=\"bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded\"\n        disabled={sending}\n      >\n        {sending ? 'Sending...' : 'Send All Now'}\n      </button>\n\n      <div className=\"pt-6\">\n        <h2 className=\"text-lg font-semibold mb-2\">Last Sent</h2>\n        <ul className=\"space-y-4\">\n          {logs.map((l: any) => (\n            <li key={l.id} className=\"bg-zinc-800 p-4 rounded text-sm\">\n              <div className=\"text-xs text-zinc-400\">{l.sent_at}</div>\n              <pre className=\"whitespace-pre-wrap mt-2 text-green-300\">{l.summary}</pre>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/tools/print-all.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":63,"column":13,"nodeType":"JSXOpeningElement","endLine":67,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function AdminPrintAll() {\n  const [campaigns, setCampaigns] = useState([]);\n  const [filterAction, setFilterAction] = useState('');\n  const [filterCreator, setFilterCreator] = useState('');\n\n  useEffect(() => {\n    fetch('/api/campaigns')\n      .then((res) => res.json())\n      .then(setCampaigns);\n  }, []);\n\n  const filtered = campaigns.filter(\n    (c: any) =>\n      (!filterAction || c.target_action === filterAction) &&\n      (!filterCreator || c.created_by === filterCreator)\n  );\n\n  const creators = Array.from(new Set(campaigns.map((c: any) => c.created_by))).sort();\n\n  return (\n    <div className=\"p-6 text-white max-w-6xl mx-auto space-y-6\">\n      <h1 className=\"text-2xl font-bold\">📦 All Campaign Posters</h1>\n      <a\n        href=\"/api/all-campaign-posters\"\n        className=\"inline-block bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded\"\n      >\n        ⬇️ Download ZIP (All Posters)\n      </a>\n\n      <div className=\"flex gap-4 text-sm pt-4\">\n        <select\n          value={filterAction}\n          onChange={(e) => setFilterAction(e.target.value)}\n          className=\"text-black p-2 rounded\"\n        >\n          <option value=\"\">All Actions</option>\n          <option value=\"cheer\">🎉 Cheer</option>\n          <option value=\"echo\">🔁 Echo</option>\n          <option value=\"reflect\">🪞 Reflect</option>\n          <option value=\"checkin\">✅ Check-in</option>\n        </select>\n        <select\n          value={filterCreator}\n          onChange={(e) => setFilterCreator(e.target.value)}\n          className=\"text-black p-2 rounded\"\n        >\n          <option value=\"\">All Creators</option>\n          {creators.map((id) => (\n            <option key={id} value={id}>\n              {id.slice(0, 8)}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n        {filtered.map((c: any) => (\n          <div key={c.slug} className=\"bg-zinc-800 p-4 rounded\">\n            <img\n              src={`/posters/${c.slug}`}\n              alt={c.headline}\n              className=\"w-full rounded shadow border border-zinc-700\"\n            />\n            <div className=\"mt-2 text-sm text-zinc-300 truncate\">{c.headline}</div>\n            <p className=\"text-xs text-zinc-500\">By {c.created_by?.slice(0, 8) || 'anon'}</p>\n            <a\n              href={`/posters/${c.slug}`}\n              download={`${c.slug}-poster.png`}\n              className=\"text-blue-400 hover:underline text-xs\"\n            >\n              Download\n            </a>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/unauthorized.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'email' and 'role'. Either include them or remove the dependency array.","line":24,"column":6,"nodeType":"ArrayExpression","endLine":24,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [email, role]","fix":{"range":[643,645],"text":"[email, role]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/unauthorized.tsx\n'use client';\n\nimport * as Sentry from '@sentry/nextjs';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { useCurrentUser } from '@/hooks/useCurrentUser';\nimport { useEffect } from 'react';\n\nexport default function UnauthorizedPage() {\n  const { session, email, role } = useCurrentUser() as any;\n\n  useEffect(() => {\n    Sentry.captureEvent({\n      level: 'info',\n      message: 'User viewed /unauthorized',\n      tags: { route: '/unauthorized' },\n      extra: {\n        email: email || 'unknown',\n        role: role || 'unknown',\n        timestamp: new Date().toISOString(),\n      },\n    });\n  }, []);\n\n  const supportEmail =\n    session?.user?.app_metadata?.org_support_email ||\n    process.env.NEXT_PUBLIC_SUPPORT_EMAIL ||\n    'support@example.com';\n\n  return (\n    <>\n      <Head>\n        <title>403 – Unauthorized</title>\n      </Head>\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-950 text-white\">\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-5xl font-bold\">403 - Forbidden</h1>\n          <p className=\"text-gray-400\">\n            You do not have access to this page.\n            {role && (\n              <span className=\"block text-sm mt-1 text-gray-500\">\n                You are currently signed in as{' '}\n                <span className=\"font-semibold text-white\">{role}</span>.\n              </span>\n            )}\n          </p>\n          {role === 'viewer' && (\n            <p className=\"text-sm text-yellow-400 mt-2\">\n              Looking for more access? Contact an admin or\n              <Link href=\"/request-access\" className=\"underline hover:text-yellow-300\">\n                {' '}\n                request an upgrade\n              </Link>\n              .\n            </p>\n          )}\n          <Link\n            href=\"/\"\n            className=\"inline-block mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Return to Dashboard\n          </Link>\n          <p className=\"text-sm text-gray-500\">\n            Need help?{' '}\n            <a href={`mailto:${supportEmail}`} className=\"underline text-blue-400\">\n              Contact Support\n            </a>\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/unsubscribe/[token].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GetServerSideProps' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used.","line":4,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GetServerSideProps } from 'next';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function UnsubscribePage({ success }: { success: boolean }) {\n  return (\n    <div className=\"max-w-xl mx-auto p-6 text-center\">\n      <h1 className=\"text-2xl font-bold mb-2\">Unsubscribe</h1>\n      {success ? (\n        <p className=\"text-green-600\">✅ You’ve been unsubscribed successfully.</p>\n      ) : (\n        <p className=\"text-red-600\">❌ We couldn’t process your unsubscribe request.</p>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/upload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/users.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [role, router]","fix":{"range":[1379,1385],"text":"[role, router]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useCanonicalRole } from '@/hooks/useCanonicalRole';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nexport default function UsersPage() {\n  const router = useRouter();\n  const [users, setUsers] = useState<any[]>([]);\n  const [profiles, setProfiles] = useState<Record<string, string>>({});\n  const [error, setError] = useState('');\n  const { role } = useCanonicalRole();\n\n  useEffect(() => {\n    if (role === null) return;\n\n    if (role !== 'admin') {\n      router.push('/login?error=unauthorized');\n      return;\n    }\n\n    const loadUsersAndRoles = async () => {\n      try {\n        const { data: userList, error: userError } = await supabase.auth.admin.listUsers();\n        if (userError) {\n          setError(userError.message);\n          return;\n        }\n        setUsers(userList.users || []);\n\n        const { data: profileList } = await supabase.from('user_profiles').select('user_id, role');\n        const profileMap: Record<string, string> = {};\n        profileList?.forEach((p) => {\n          profileMap[p.user_id] = p.role;\n        });\n        setProfiles(profileMap);\n      } catch (err) {\n        console.error('❌ Failed to load users or profiles', err);\n        setError('Failed to load users');\n      }\n    };\n\n    loadUsersAndRoles();\n  }, [role]);\n\n  const updateRole = async (userId: string, newRole: string) => {\n    await supabase\n      .from('user_profiles')\n      .upsert({ user_id: userId, role: newRole }, { onConflict: 'user_id' });\n\n    setProfiles((prev) => ({ ...prev, [userId]: newRole }));\n  };\n\n  return (\n    <div className=\"p-6 text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">Users</h1>\n      {error && <p className=\"text-red-500\">{error}</p>}\n      <table className=\"w-full text-sm text-left text-gray-300 bg-gray-800 rounded overflow-hidden\">\n        <thead className=\"bg-gray-700 text-gray-100 uppercase text-xs tracking-wide\">\n          <tr>\n            <th className=\"px-4 py-2\">Email</th>\n            <th className=\"px-4 py-2\">Role</th>\n            <th className=\"px-4 py-2\">Created</th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((u, i) => (\n            <tr key={u.id} className={i % 2 === 0 ? 'bg-gray-800' : 'bg-gray-900'}>\n              <td className=\"px-4 py-2\">{u.email}</td>\n              <td className=\"px-4 py-2\">\n                <select\n                  value={profiles[u.id] || 'viewer'}\n                  onChange={(e) => updateRole(u.id, e.target.value)}\n                  className=\"bg-gray-700 border border-gray-600 rounded px-2 py-1 text-xs\"\n                >\n                  <option value=\"admin\">admin</option>\n                  <option value=\"reseller\">reseller</option>\n                  <option value=\"affiliate_referrer\">affiliate_referrer</option>\n                  <option value=\"viewer\">viewer</option>\n                </select>\n              </td>\n              <td className=\"px-4 py-2 text-xs\">{new Date(u.created_at).toLocaleString()}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/viewer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [role, router]","fix":{"range":[745,751],"text":"[role, router]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useCanonicalRole } from '@/hooks/useCanonicalRole';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport dayjs from 'dayjs';\nimport Image from 'next/image';\n\nexport default function ViewerDashboard() {\n  const [domains, setDomains] = useState<any[]>([]);\n  const [email, setEmail] = useState('');\n  const router = useRouter();\n  const { role } = useCanonicalRole();\n\n  useEffect(() => {\n    supabase.auth.getUser().then(({ data }) => {\n      const user = data?.user;\n      setEmail(user?.email || '');\n    });\n  }, []);\n\n  useEffect(() => {\n    if (role && role !== 'viewer') {\n      router.push('/dashboard');\n    }\n  }, [role]);\n\n  useEffect(() => {\n    supabase\n      .from('domains')\n      .select('*, campaigns(*)')\n      .order('date_created', { ascending: false })\n      .then(({ data }) => setDomains(data || []));\n  }, []);\n\n  const logClick = async (domain_id: string, action_type: string) => {\n    await supabase.from('user_action_logs').insert([\n      {\n        domain_id,\n        action_type,\n        triggered_by: email,\n      },\n    ]);\n  };\n\n  const renderTimer = (campaign: any) => {\n    if (!campaign) return '—';\n    const now = dayjs();\n    const end = dayjs(campaign.ends_at);\n    const diff = end.diff(now, 'minute');\n    return diff > 0 ? `${diff} min left` : 'Expired';\n  };\n\n  return (\n    <div className=\"p-6 text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">Site Viewer</h1>\n      <table className=\"w-full text-sm text-left text-gray-300 bg-gray-800 rounded overflow-hidden\">\n        <thead className=\"bg-gray-700 text-gray-100 uppercase text-xs tracking-wide\">\n          <tr>\n            <th className=\"px-4 py-2\">Domain</th>\n            <th className=\"px-4 py-2\">City</th>\n            <th className=\"px-4 py-2\">Timer</th>\n            <th className=\"px-4 py-2\">Preview</th>\n            <th className=\"px-4 py-2\">Contact</th>\n          </tr>\n        </thead>\n        <tbody>\n          {domains.map((d, i) => (\n            <tr key={d.id} className={i % 2 === 0 ? 'bg-gray-800' : 'bg-gray-900'}>\n              <td className=\"px-4 py-2\">{d.domain}</td>\n              <td className=\"px-4 py-2\">{d.city}</td>\n              <td className=\"px-4 py-2 text-xs\">\n                {d.campaigns ? (\n                  <span className=\"bg-yellow-600 text-black px-2 py-1 rounded\">\n                    {renderTimer(d.campaigns)}\n                  </span>\n                ) : (\n                  '—'\n                )}\n              </td>\n              <td className=\"px-4 py-2\">\n                <Image\n                  src={d.screenshot_url}\n                  alt=\"screenshot\"\n                  width={128}\n                  height={72}\n                  className=\"w-32 border rounded cursor-pointer\"\n                  onClick={() => logClick(d.id, 'click_preview')}\n                />\n              </td>\n              <td className=\"px-4 py-2\">\n                <a\n                  href={`mailto:support@quicksites.ai?subject=Claim ${d.domain}`}\n                  className=\"text-blue-400 hover:underline text-xs\"\n                  onClick={() => logClick(d.id, 'click_claim')}\n                >\n                  Claim Site\n                </a>\n              </td>\n            </tr>\n          ))}\n          {domains.map((d, _i) => {\n            const alt = d.campaigns?.alt_domains?.[d.campaigns.lead_ids?.indexOf(d.lead_id)];\n            const hasClaimed = d.domains?.is_claimed;\n\n            return !hasClaimed && alt ? (\n              <tr key={d.id + '-alt'} className=\"bg-black text-yellow-400 text-xs\">\n                <td colSpan={5} className=\"px-4 py-2 space-y-2\">\n                  🛠️ Second Chance Site available:\n                  <a\n                    href={`https://${alt}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"ml-2 text-blue-400 underline\"\n                    onClick={() => logClick(d.id, 'click_second_chance')}\n                  >\n                    {alt}\n                  </a>\n                  <br />\n                  <a\n                    href={`mailto:support@quicksites.ai?subject=Interested in second site&body=I'm interested in claiming ${alt}`}\n                    className=\"inline-block bg-yellow-500 text-black px-3 py-1 mt-1 rounded text-xs\"\n                    onClick={() => logClick(d.id, 'second_chance_interest')}\n                  >\n                    I&apos;m Interested\n                  </a>\n                </td>\n              </tr>\n            ) : null;\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/admin/zod-playground.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎················Slack·Username·(optional)⏎··············` with `Slack·Username·(optional)`","line":103,"column":67,"nodeType":null,"messageId":"replace","endLine":105,"endColumn":15,"fix":{"range":[3340,3397],"text":"Slack Username (optional)"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport QueryParamEditor from '@/components/admin/query-param-editor';\nimport VisualSchema from '@/components/admin/visual-schema';\nimport SitePreview from '@/components/admin/site-preview';\nimport { useZodPlaygroundState } from '@/hooks/useZodPlaygroundState';\n\nexport default function ZodPlaygroundPage() {\n  const {\n    schema,\n    setSchema,\n    error,\n    setError,\n    jsonExport,\n    setJsonExport,\n    shortLink,\n    slackUsername,\n    setSlackUsername,\n    exportJsonSchema,\n    handleCreateShortLink,\n    handleDeploy,\n    isEmbed,\n  } = useZodPlaygroundState();\n\n  return (\n    <div className=\"p-6 space-y-6 max-w-screen-xl mx-auto\">\n      <h1 className=\"text-3xl font-bold\">🧪 Zod Playground</h1>\n\n      {error && <p className=\"text-red-600 text-sm\">{error}</p>}\n\n      <QueryParamEditor schema={schema} slug=\"\" />\n\n      {!isEmbed && (\n        <>\n          <div className=\"space-y-2\">\n            <button\n              onClick={exportJsonSchema}\n              className=\"bg-green-600 text-white px-4 py-2 rounded\"\n            >\n              Export JSON Schema\n            </button>\n\n            {jsonExport && (\n              <textarea\n                className=\"w-full h-64 mt-2 p-2 border rounded bg-gray-100 font-mono text-sm\"\n                value={jsonExport}\n                onChange={(e) => setJsonExport(e.target.value)}\n              />\n            )}\n\n            <button\n              onClick={() => {\n                try {\n                  if (!jsonExport) return;\n                  const parsed = JSON.parse(jsonExport);\n                  setSchema(parsed);\n                  setError(null);\n                } catch (err: any) {\n                  setError('Failed to apply edited schema: ' + err.message);\n                }\n              }}\n              className=\"bg-purple-600 text-white px-4 py-2 rounded\"\n            >\n              Apply Edited Schema\n            </button>\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"font-semibold\">🧱 Schema Visualizer</label>\n            <VisualSchema schema={schema} onDeployClick={handleDeploy} />\n          </div>\n\n          <div className=\"space-y-2 border-t pt-4\">\n            <label className=\"font-semibold\">🔗 Shareable Playground Link</label>\n            <div className=\"flex gap-2 flex-wrap\">\n              <input\n                value={\n                  shortLink ||\n                  `${window.location.origin}/admin/zod-playground?schema=${encodeURIComponent(\n                    jsonExport || ''\n                  )}`\n                }\n                readOnly\n                className=\"flex-1 text-sm border px-2 py-1 rounded\"\n              />\n              <button\n                onClick={() => {\n                  navigator.clipboard.writeText(\n                    shortLink ||\n                      `${window.location.origin}/admin/zod-playground?schema=${encodeURIComponent(\n                        jsonExport || ''\n                      )}`\n                  );\n                  alert('Link copied to clipboard!');\n                }}\n                className=\"bg-blue-700 text-white px-3 py-1 rounded\"\n              >\n                Copy Link\n              </button>\n            </div>\n\n            <div className=\"mt-2\">\n              <label className=\"text-sm text-gray-400 block mb-1\">\n                Slack Username (optional)\n              </label>\n              <input\n                value={slackUsername}\n                onChange={(e) => setSlackUsername(e.target.value)}\n                placeholder=\"e.g. jon.doe\"\n                className=\"text-sm border px-2 py-1 rounded w-full\"\n              />\n\n              <button\n                onClick={handleCreateShortLink}\n                className=\"mt-2 bg-zinc-800 text-white px-3 py-1 rounded\"\n              >\n                Create Short Link\n              </button>\n            </div>\n          </div>\n\n          <SitePreview />\n        </>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/admin/campaign-data/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/admin/delete-branding/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/admin/delete-snapshot/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/admin/run-next-job/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/admin/seed-template/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/admin/upload-template-image/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/analytics/signals.ts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/analytics/signals/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":63}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport { json } from '@/lib/api/json';\nimport { NextApiRequest, NextApiResponse } from 'next';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nfunction groupByDate(data: any[], field: string) {\n  const groups: Record<string, number> = {};\n  for (const row of data) {\n    const date = row[field].slice(0, 10); // YYYY-MM-DD\n    groups[date] = (groups[date] || 0) + 1;\n  }\n  return Object.entries(groups).map(([date, count]) => ({ date, count }));\n}\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { start, end } = req.query;\n\n  const viewRange = {\n    from: start ? new Date(start as string).toISOString() : undefined,\n    to: end ? new Date(end as string).toISOString() : undefined,\n  };\n\n  const [views, feedback] = await Promise.all([\n    supabase\n      .from('published_site_views')\n      .select('viewed_at')\n      .gte('viewed_at', viewRange.from || '')\n      .lte('viewed_at', viewRange.to || ''),\n    supabase\n      .from('block_feedback')\n      .select('created_at')\n      .gte('created_at', viewRange.from || '')\n      .lte('created_at', viewRange.to || ''),\n  ]);\n\n  if (views.error || feedback.error) {\n    return json({ error: 'Error loading analytics' });\n  }\n\n  const byViews = groupByDate(views.data, 'viewed_at');\n  const byFeedback = groupByDate(feedback.data, 'created_at');\n\n  const merged: Record<string, any> = {};\n  byViews.forEach(({ date, count }) => {\n    merged[date] = { date, views: count, feedback: 0 };\n  });\n  byFeedback.forEach(({ date, count }) => {\n    merged[date] = { ...(merged[date] || { date, views: 0 }), feedback: count };\n  });\n\n  const result = Object.values(merged).sort((a, b) => a.date.localeCompare(b.date));\n  json(result);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/badge/[slug].ts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/badge/[slug]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/block-qr/preview/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/block-qr/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/block-qr/save/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hash' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createCanvas, registerFont } from 'canvas';\nimport QRCode from 'qrcode';\nimport crypto from 'node:crypto';\nimport path from 'node:path';\nimport fs from 'node:fs/promises';\nimport { mkdirSync } from 'node:fs';\nimport { NextRequest } from 'next/server';\n\nexport const runtime = 'nodejs';\n\n// Load fonts if present\ntry {\n  registerFont(path.resolve('./public/fonts/Inter.ttf'), { family: 'Inter' });\n  registerFont(path.resolve('./public/fonts/Arial.ttf'), { family: 'Arial' });\n} catch (err) {\n  console.warn('⚠️ Font registration failed:', err);\n}\n\nfunction hash(input: string): string {\n  return crypto.createHash('sha1').update(input).digest('hex');\n}\n\nexport async function POST(req: NextRequest) {\n  const {\n    blockId,\n    handle,\n    label = `block-${blockId}`,\n    size = 512,\n    font = 'Inter',\n    fontSize = 20,\n    color = '#000000',\n    background = '#ffffff',\n    format = 'png',\n  } = await req.json();\n\n  if (!blockId || !handle) {\n    return new Response(JSON.stringify({ error: 'Missing blockId or handle' }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  const url = `https://quicksites.ai/world/${handle}#block-${blockId}`;\n  const qrCanvas = createCanvas(size, size);\n  await QRCode.toCanvas(qrCanvas, url, {\n    margin: 1,\n    width: size,\n    color: {\n      dark: color,\n      light: background,\n    },\n  });\n\n  const canvas = createCanvas(size, size + fontSize + 20);\n  const ctx = canvas.getContext('2d');\n\n  ctx.fillStyle = background;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.drawImage(qrCanvas, 0, 0, size, size);\n  ctx.fillStyle = color;\n  ctx.font = `${fontSize}px \"${font}\"`;\n  ctx.textAlign = 'center';\n  ctx.fillText(label, canvas.width / 2, canvas.height - 10);\n\n  const buffer =\n    format === 'png'\n      ? canvas.toBuffer()\n      : (() => {\n          throw new Error(`Unsupported format: ${format}`);\n        })();\n\n  // 🔒 Save to disk\n  const dir = path.resolve('public', 'generated-qr', handle);\n  mkdirSync(dir, { recursive: true });\n  const filename = `${blockId}.${format}`;\n  const filepath = path.join(dir, filename);\n  await fs.writeFile(filepath, buffer);\n\n  const publicUrl = `/generated-qr/${handle}/${filename}`;\n  return new Response(JSON.stringify({ ok: true, path: publicUrl }), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/blocks-by-handle/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/campaign-analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/campaign/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/campaigns/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/checkin-map/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/checkins-trend/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/cheer/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/claim-campaign/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/claim-site/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/clone-block/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/create-block/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/create-campaign/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/delete-campaign/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/deploy-webhook/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/digest-log/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/discover/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/docs/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":16,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const runtime = 'nodejs';\n\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\n\nexport async function GET() {\n  try {\n    const spec = readFileSync(join(process.cwd(), 'openapi.json'), 'utf8');\n    return new Response(spec, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache',\n      },\n    });\n  } catch (err) {\n    return new Response(JSON.stringify({ error: 'Failed to load openapi.json' }), { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/echo/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/email-weekly-summary/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/embed/[slug]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/feedback-history/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/feedback-summary/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/geocode/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetchError' is assigned a value but never used.","line":20,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const runtime = 'nodejs';\n\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport { json } from '@/lib/api/json';\nimport { NextRequest } from 'next/server';\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const city = searchParams.get('city');\n  const state = searchParams.get('state');\n\n  if (!city || !state) {\n    return json({ error: 'Missing city or state' }, { status: 400 });\n  }\n\n  const cleanCity = city.trim();\n  const cleanState = state.trim();\n\n  // 1. Try cache\n  const { data: cached, error: fetchError } = await supabase\n    .from('geo_cache')\n    .select('lat, lon')\n    .eq('city', cleanCity)\n    .eq('state', cleanState)\n    .maybeSingle();\n\n  if (cached) {\n    console.log(`🌍 Cache hit for ${cleanCity}, ${cleanState}`);\n    return json({ lat: Number(cached.lat), lon: Number(cached.lon) });\n  }\n\n  // 2. Fallback to OpenStreetMap's Nominatim\n  const query = `${cleanCity}, ${cleanState}, USA`;\n  const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`;\n\n  try {\n    const geoRes = await fetch(url, {\n      headers: {\n        'User-Agent': 'QuickSites/1.0 (admin@quicksites.ai)',\n      },\n    });\n\n    const results = await geoRes.json();\n\n    if (!Array.isArray(results) || results.length === 0) {\n      return json({ lat: 0, lon: 0, error: 'Not found' }, { status: 404 });\n    }\n\n    const { lat, lon } = results[0];\n    const parsedLat = parseFloat(lat);\n    const parsedLon = parseFloat(lon);\n\n    // 3. Cache result\n    await supabase.from('geo_cache').insert([\n      {\n        city: cleanCity,\n        state: cleanState,\n        lat: parsedLat,\n        lon: parsedLon,\n      },\n    ]);\n\n    console.log(`🌍 Cached ${cleanCity}, ${cleanState} → ${parsedLat}, ${parsedLon}`);\n    return json({ lat: parsedLat, lon: parsedLon });\n  } catch (err) {\n    console.error('🌍 Geocode error:', err);\n    return json({ lat: 0, lon: 0, error: 'Internal error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/habit-leaderboard/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/habit-templates/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/ip/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/log-click/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/log-event/route.ts","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎····headerStore.get('x-forwarded-for')·||⏎····headerStore.get('x-real-ip')·||⏎···` with `·headerStore.get('x-forwarded-for')·||·headerStore.get('x-real-ip')·||`","line":27,"column":13,"nodeType":null,"messageId":"replace","endLine":30,"endColumn":4,"fix":{"range":[774,856],"text":" headerStore.get('x-forwarded-for') || headerStore.get('x-real-ip') ||"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { cookies, headers } from 'next/headers';\nimport { createServerClient } from '@supabase/ssr';\nimport { Database } from '@/types/supabase';\n\nexport async function POST(req: Request) {\n  const cookieStore = cookies() as unknown as {\n    get(name: string): { value: string } | undefined;\n  };\n\n  const headerStore = headers() as unknown as Headers;\n\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value ?? undefined;\n        },\n      },\n    }\n  );\n\n  const { href, type = 'nav_click', meta = {} } = await req.json();\n  const { data: user } = await supabase.auth.getUser();\n\n  const ip =\n    headerStore.get('x-forwarded-for') ||\n    headerStore.get('x-real-ip') ||\n    'unknown';\n\n  const userAgent = headerStore.get('user-agent') || 'unknown';\n\n  const { data: inserted, error } = await supabase\n    .from('nav_events')\n    .insert({\n      user_id: user.user?.id ?? null,\n      href,\n      type,\n      meta,\n      ip,\n      user_agent: userAgent,\n      timestamp: new Date().toISOString(),\n    })\n    .select()\n    .single();\n\n  if (error) {\n    console.error('❌ Error inserting nav_event:', error.message);\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  return new Response(JSON.stringify({ ok: true, inserted }), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/login/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/logs/checkins.csv/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/logs/checkins/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/logs/feedback.csv/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/logs/feedback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/match/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const runtime = 'nodejs';\n\nimport { createClient } from '@supabase/supabase-js';\nimport { json } from '@/lib/api/json';\nimport { NextRequest } from 'next/server';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const tags = searchParams.get('tags');\n\n  if (!tags || typeof tags !== 'string') {\n    return Response.json({ error: 'Missing or invalid tags' }, { status: 400 });\n  }\n\n  const tagArray = tags.split(',').map((t) => t.trim());\n\n  const { data, error } = await supabase\n    .from('public_profiles')\n    .select('*')\n    .contains('goal_tags', tagArray)\n    .eq('visible', true)\n    .limit(50);\n\n  if (error) {\n    return Response.json({ error: error.message }, { status: 500 });\n  }\n\n  return Response.json(data);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/me/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport { NextRequest } from 'next/server';\n\nimport { Database } from '@/types/supabase';\n\nexport const runtime = 'nodejs';\n\nexport async function GET(req: NextRequest) {\n  const cookieStore = cookies() as unknown as {\n    get(name: string): { value: string } | undefined;\n  };\n\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n      },\n    }\n  );\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  return new Response(JSON.stringify({ user }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/metrics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/my-campaigns/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/nav-badges/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/nav/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/nearby-blocks/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/notifications/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/notify-creator/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/og/[slug]/image/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ImageResponse' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ImageResponse } from '@vercel/og';\nimport { renderOgImage } from '@/lib/og/renderOgImage';\nimport { createClient } from '@supabase/supabase-js';\n// import { Resvg } from '@resvg/resvg-js';\n\nexport const runtime = 'nodejs';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function GET(request: Request, { params }: { params: { slug: string } }) {\n  const slug = params.slug;\n  const bucket = 'og-cache';\n  const path = `snapshots/${slug}.png`;\n\n  // ✅ Try serving cached image (data is a Blob)\n  const { data: cached } = await supabase.storage.from(bucket).download(path);\n  if (cached) {\n    return new Response(cached, {\n      headers: {\n        'Content-Type': 'image/png',\n        'Cache-Control': 'public, max-age=86400',\n      },\n    });\n  }\n\n  // 🧠 Fetch site branding\n  const { data: site } = await supabase\n    .from('published_sites')\n    .select('*, branding_profiles(name, theme, brand, logo_url)')\n    .eq('slug', slug)\n    .eq('status', 'published')\n    .single();\n\n  const title = site?.branding_profiles?.name || slug;\n  const theme = site?.branding_profiles?.theme || 'dark';\n  const brand = site?.branding_profiles?.brand || 'green';\n  const logoUrl = site?.branding_profiles?.logo_url;\n\n  // 🎨 Render OG SVG\n  const svgResponse = await renderOgImage({\n    title,\n    content: `${slug}.quicksites.ai`,\n    theme,\n    brand,\n    logoUrl,\n  });\n\n  const svg = await svgResponse.text();\n\n  return new Response(svg, {\n    headers: {\n      'Content-Type': 'image/svg+xml',\n      'Cache-Control': 'public, max-age=86400',\n    },\n  });\n  // const png = new Resvg(svg).render().asPng();\n\n  // 💾 Upload to Supabase Storage\n  await supabase.storage.from(bucket).upload(path, svg, {\n    contentType: 'image/png',\n    upsert: true,\n  });\n\n  // 🌐 Update og_image_url in DB\n  const publicUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/${bucket}/${path}`;\n  await supabase.from('published_sites').update({ og_image_url: publicUrl }).eq('slug', slug);\n\n  return new Response(svg, {\n    headers: {\n      'Content-Type': 'image/svg+xml',\n      'Cache-Control': 'public, max-age=86400',\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/posters/[slug]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/print-labels-pdf/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Readable' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/print-labels-pdf/route.ts\n\nimport { createClient } from '@supabase/supabase-js';\nimport { chromium } from 'playwright';\nimport { NextRequest } from 'next/server';\nimport { Readable } from 'stream';\n\nexport const runtime = 'nodejs'; // 👈 important: edge runtimes can't use fs or playwright\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nexport async function POST(req: NextRequest) {\n  const { handle } = await req.json();\n\n  if (!handle || typeof handle !== 'string') {\n    return new Response('Missing or invalid handle', { status: 400 });\n  }\n\n  const { data: user } = await supabase\n    .from('users')\n    .select('id')\n    .eq('user_metadata->>handle', handle)\n    .single();\n\n  if (!user) {\n    return Response.json({ error: 'User not found' }, { status: 404 });\n  }\n\n  const { data: blocks } = await supabase.from('blocks').select('*').eq('owner_id', user.id);\n\n  const html = `\n    <html>\n      <head>\n        <style>\n          body { font-family: sans-serif; font-size: 12px; }\n          .grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; }\n          .block { padding: 12px; border: 1px solid #ccc; border-radius: 4px; text-align: center; }\n          img { width: 90px; height: 90px; }\n        </style>\n      </head>\n      <body>\n        <h1>Block QR Labels: @${handle}</h1>\n        <div class=\"grid\">\n          ${blocks\n            ?.map(\n              (b) => `\n            <div class=\"block\">\n              <div style=\"font-size: 18px\">${b.emoji} ${b.title}</div>\n              <div style=\"margin: 6px 0;\">${b.message}</div>\n              <img src=\"https://quicksites.ai/api/block-qr?handle=${handle}&blockId=${b.id}\" />\n              <div style=\"font-size: 10px;\">/world/${handle}#block-${b.id}</div>\n            </div>\n          `\n            )\n            .join('')}\n        </div>\n      </body>\n    </html>\n  `;\n\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.setContent(html, { waitUntil: 'networkidle' });\n\n  const pdfBuffer = await page.pdf({\n    format: 'A4',\n    printBackground: true,\n    margin: { top: '20mm', bottom: '20mm', left: '10mm', right: '10mm' },\n  });\n\n  await browser.close();\n\n  return new Response(pdfBuffer, {\n    headers: {\n      'Content-Type': 'application/pdf',\n      'Content-Disposition': `inline; filename=\"${handle}-qr-labels.pdf\"`,\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/public-profile/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/publish-site/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/qr-poster/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/query-usecases/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/readme/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/recent-feedback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/reflect/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/remix-dag/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/reports/download/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createClient' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serviceClient as supabase } from '@/lib/supabase/service';\nexport const runtime = 'nodejs';\n\nimport { createClient } from '@supabase/supabase-js';\nimport crypto from 'node:crypto';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { Readable } from 'node:stream';\nimport { NextRequest } from 'next/server';\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const file = searchParams.get('file');\n  const token = searchParams.get('token');\n\n  if (!file || !token) {\n    return Response.json({ error: 'Missing file or token' }, { status: 400 });\n  }\n\n  const hash = crypto.createHash('sha256').update(token).digest('hex');\n\n  const { data, error } = await supabase\n    .from('report_tokens')\n    .select('*')\n    .eq('file_name', file)\n    .eq('token_hash', hash)\n    .lte('expires_at', new Date().toISOString())\n    .maybeSingle();\n\n  if (error || !data) {\n    return Response.json({ error: 'Invalid or expired token' }, { status: 403 });\n  }\n\n  const filePath = path.resolve(`./reports/analytics/${file}`);\n  if (!fs.existsSync(filePath)) {\n    return Response.json({ error: 'File not found' }, { status: 404 });\n  }\n\n  const fileStream = fs.createReadStream(filePath);\n  const readable = new Readable().wrap(fileStream);\n\n  return new Response(readable as any, {\n    headers: {\n      'Content-Disposition': `attachment; filename=\"${file}\"`,\n      'Content-Type': 'application/pdf',\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/request-support/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/resend-welcome-email/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/reverse-geocode/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":25,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const runtime = 'nodejs';\n\nimport { NextRequest } from 'next/server';\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const lat = searchParams.get('lat');\n  const lon = searchParams.get('lon');\n\n  if (!lat || !lon) {\n    return Response.json({ error: 'Missing lat or lon' }, { status: 400 });\n  }\n\n  try {\n    const result = await fetch(\n      `https://api.opencagedata.com/geocode/v1/json?q=${lat}+${lon}&key=${process.env.OPENCAGE_KEY}`\n    );\n    const data = await result.json();\n    const components = data.results?.[0]?.components || {};\n\n    return Response.json({\n      city: components.city || components.town || components.village || null,\n      state: components.state || null,\n    });\n  } catch (err: any) {\n    return Response.json({ error: 'Failed to reverse geocode' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/screenshot/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/send-lead-email/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/send-thanks/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/send-weekly-digest/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/sitemap-index.xml/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/sitemap.hreflang.xml/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'base' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const runtime = 'nodejs';\n\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport { NextRequest } from 'next/server';\n\nexport async function GET(_req: NextRequest) {\n  const baseUrl = 'https://quicksites.ai';\n\n  const { data: domains } = await supabase\n    .from('domains')\n    .select('domain, lang')\n    .eq('is_claimed', true);\n\n  const langGroups = (domains || []).reduce<\n    Record<string, Array<{ domain: string; lang: string }>>\n  >((acc, d) => {\n    const base = d.domain.replace(/\\.[a-z]+$/, '');\n    if (!acc[base]) acc[base] = [];\n    acc[base].push({ ...d, lang: d.lang || 'en' });\n    return acc;\n  }, {});\n\n  const xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset\n  xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n  xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"\n>\n${Object.entries(langGroups)\n  .map(([base, versions]) => {\n    const defaultLang = versions.find((v) => v.lang === 'en') || versions[0];\n    const loc = `${baseUrl}/${defaultLang.lang}/site/${defaultLang.domain}`;\n    const links = versions\n      .map(\n        (v) =>\n          `<xhtml:link rel=\"alternate\" hreflang=\"${v.lang}\" href=\"${baseUrl}/${v.lang}/site/${v.domain}\" />`\n      )\n      .join('\\n    ');\n    return `<url>\n  <loc>${loc}</loc>\n  ${links}\n</url>`;\n  })\n  .join('\\n')}\n</urlset>`;\n\n  return new Response(xml, {\n    headers: {\n      'Content-Type': 'application/xml',\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/sitemap.xml/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/sites/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/sites/create/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'baseSlug' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":18},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎··base:·string,⏎··supabase:·SupabaseClient⏎` with `base:·string,·supabase:·SupabaseClient`","line":135,"column":35,"nodeType":null,"messageId":"replace","endLine":138,"endColumn":1,"fix":{"range":[3670,3714],"text":"base: string, supabase: SupabaseClient"}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎······.from('sites')⏎······.select('id')⏎······.eq('slug',·slug)⏎······` with `.from('sites').select('id').eq('slug',·slug)`","line":142,"column":36,"nodeType":null,"messageId":"replace","endLine":146,"endColumn":7,"fix":{"range":[3825,3897],"text":".from('sites').select('id').eq('slug', slug)"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"export const runtime = 'nodejs';\n\nimport { json } from '@/lib/api/json';\nimport { generateBaseSlug } from '@/lib/slugHelpers';\nimport { getSupabase } from '@/lib/supabase/server';\nimport type { SupabaseClient } from '@supabase/supabase-js';\n\nfunction baseSlug(businessName: string, location?: string): string {\n  const name = businessName.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n  const loc =\n    location\n      ?.toLowerCase()\n      .split(',')[0]\n      .replace(/[^a-z0-9]+/g, '-') || '';\n  const raw = `${name}-${loc}`.replace(/^-+|-+$/g, '');\n  return raw.replace(/--+/g, '-');\n}\n\nexport async function POST(req: Request) {\n  const body = await req.json();\n  const { template_version_id, business_name, location, domain, slug: clientSlug, email } = body;\n\n  const supabase = await getSupabase();\n\n  const base = generateBaseSlug(business_name, location);\n  const slug = clientSlug || (await generateUniqueSlug(base, supabase));\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  if (!user) {\n    return json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  const recent = await supabase\n    .from('sites')\n    .select('created_at')\n    .eq('created_by', user.id)\n    .order('created_at', { ascending: false })\n    .limit(1)\n    .maybeSingle();\n\n  if (recent?.data && Date.now() - new Date(recent.data.created_at).getTime() < 10 * 60 * 1000) {\n    return json({ error: 'Too soon — please wait 10 minutes before creating another site.' });\n  }\n\n  const { data: versions, error: fetchError } = await supabase\n    .from('template_versions')\n    .select('*')\n    .eq('id', template_version_id)\n    .limit(1);\n\n  if (fetchError || !versions?.length) {\n    return json({ error: 'Template not found' });\n  }\n\n  const full_data = versions[0].full_data;\n  if (!full_data) {\n    return json({ error: 'Template data missing' });\n  }\n\n  try {\n    const { data: newSite, error: insertError } = await supabase\n      .from('sites')\n      .insert([\n        {\n          slug,\n          domain,\n          business_name,\n          location,\n          template_version_id,\n          content: full_data,\n          created_by: user.id,\n          claimed_email: email || null,\n        },\n      ])\n      .select()\n      .single();\n\n    if (insertError) {\n      throw insertError;\n    }\n\n    if (email) {\n      try {\n        const response = await fetch(\n          `${process.env.NEXT_PUBLIC_BASE_URL}/api/resend-welcome-email`,\n          {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              email,\n              name: business_name,\n              slug: newSite.slug,\n              templateName: versions[0].template_name || 'a QuickSites template',\n            }),\n          }\n        );\n\n        if (!response.ok) {\n          console.warn('⚠️ Failed to send welcome email:', await response.text());\n        }\n      } catch (err) {\n        console.warn('⚠️ Error sending welcome email:', err);\n      }\n    }\n\n    return json(newSite);\n  } catch (insertError: any) {\n    console.error('Insert failed:', insertError.message);\n\n    await supabase.from('deploy_errors').insert({\n      context: 'site_create',\n      payload: {\n        email,\n        domain,\n        business_name,\n        location,\n        template_version_id,\n        error: insertError.message,\n        user_id: user.id,\n      },\n    });\n\n    return json({ error: 'Failed to create site' }, { status: 500 });\n  }\n}\n\nexport async function GET() {\n  return json({ message: '👋 POST to this endpoint to create a site.' });\n}\n\n// Helper updated to take Supabase client as a parameter\nasync function generateUniqueSlug(\n  base: string,\n  supabase: SupabaseClient\n): Promise<string> {\n  let slug = base;\n  let attempt = 1;\n  while (true) {\n    const { data } = await supabase\n      .from('sites')\n      .select('id')\n      .eq('slug', slug)\n      .maybeSingle();\n    if (!data) break;\n    attempt += 1;\n    slug = `${base}-${attempt}`;\n  }\n  return slug;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/sites/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/sites/save/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/supporters/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profileError' is assigned a value but never used.","line":75,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const runtime = 'nodejs';\n\nimport { createClient } from '@supabase/supabase-js';\nimport { json } from '@/lib/api/json';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nexport async function GET(req: Request) {\n  const { searchParams } = new URL(req.url || '');\n  const handle = searchParams.get('handle');\n  const actionFilter = searchParams.get('action'); // optional: cheer, reflect, echo\n  const since = searchParams.get('since'); // optional: ISO timestamp\n\n  // ✅ 1. Require auth (via Authorization header)\n  const token = req.headers.get('authorization')?.replace('Bearer ', '');\n  if (!token) return json({ error: 'Unauthorized' }, { status: 401 });\n\n  const {\n    data: { user },\n    error: authError,\n  } = await supabase.auth.getUser(token);\n\n  if (authError || !user) return json({ error: 'Unauthorized' }, { status: 401 });\n\n  // ✅ 2. Validate input\n  if (!handle) return json({ error: 'Missing handle' }, { status: 400 });\n\n  // ✅ 3. Lookup block IDs owned by user\n  const { data: blocks, error: blocksError } = await supabase\n    .from('blocks')\n    .select('id')\n    .eq('owner_handle', handle);\n\n  if (blocksError) return json({ error: blocksError.message }, { status: 500 });\n\n  const blockIds = blocks?.map((b) => b.id) || [];\n  if (!blockIds.length) return json([]);\n\n  // ✅ 4. Build filters\n  let query = supabase\n    .from('block_feedback')\n    .select('user_id, action, created_at')\n    .in('block_id', blockIds);\n\n  if (actionFilter) query = query.eq('action', actionFilter);\n  if (since) query = query.gte('created_at', since);\n\n  const { data: feedback, error: feedbackError } = await query;\n\n  if (feedbackError) return json({ error: feedbackError.message }, { status: 500 });\n\n  // ✅ 5. Aggregate support counts per user\n  const supportMap: Record<\n    string,\n    { cheer: number; reflect: number; echo: number; latest: string }\n  > = {};\n\n  for (const fb of feedback) {\n    const uid = fb.user_id;\n    if (!supportMap[uid]) {\n      supportMap[uid] = { cheer: 0, reflect: 0, echo: 0, latest: fb.created_at };\n    }\n    supportMap[uid][fb.action as keyof (typeof supportMap)[typeof uid]]++;\n    if (new Date(fb.created_at) > new Date(supportMap[uid].latest)) {\n      supportMap[uid].latest = fb.created_at;\n    }\n  }\n\n  const userIds = Object.keys(supportMap);\n\n  // ✅ 6. Enrich with user profile\n  const { data: profiles, error: profileError } = await supabase\n    .from('users')\n    .select('id, user_metadata')\n    .in('id', userIds);\n\n  const profileMap = (profiles || []).reduce(\n    (acc, u) => {\n      acc[u.id] = u.user_metadata || {};\n      return acc;\n    },\n    {} as Record<string, any>\n  );\n\n  // ✅ 7. Final output\n  const result = userIds.map((uid) => ({\n    user_id: uid,\n    username: profileMap[uid]?.username || null,\n    avatar_url: profileMap[uid]?.avatar_url || null,\n    ...supportMap[uid],\n  }));\n\n  return json(result);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/template-api/index/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/template-api/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/api/template-api/index.ts\nimport { createClient } from '@supabase/supabase-js';\nimport { json } from '@/lib/api/json';\nimport { NextApiRequest, NextApiResponse } from 'next';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default async function handler(_req: NextApiRequest, res: NextApiResponse) {\n  console.log('[API] /api/template-api hit');\n\n  const { data, error } = await supabase.rpc('get_latest_template_versions');\n\n  if (error) {\n    console.error('[API ERROR]', error.message);\n    return json({ error: error.message });\n  }\n\n  const enriched = (data || []).map((item: any) => ({\n    ...item,\n    description: item.commit_message || 'No description provided',\n  }));\n\n  console.log(`[API] returning ${enriched.length} templates`);\n  json(enriched);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/templates/history.ts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/templates/history/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":63}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// /api/templates/history?name=towing-basic\nimport { createClient } from '@supabase/supabase-js';\nimport { json } from '@/lib/api/json';\nimport { NextApiRequest, NextApiResponse } from 'next';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { name } = req.query;\n\n  if (!name || typeof name !== 'string') {\n    return json({ error: 'Missing or invalid template name.' });\n  }\n\n  const { data, error } = await supabase\n    .from('template_versions')\n    .select('*')\n    .eq('template_name', name)\n    .order('saved_at', { ascending: false });\n\n  if (error) {\n    console.error('[Supabase] Error fetching template_versions:', error);\n    return json({ error: error.message });\n  }\n\n  json(data);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/test-login/route.ts","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `process.env.NEXT_PUBLIC_SUPABASE_URL!,·process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!` with `⏎····process.env.NEXT_PUBLIC_SUPABASE_URL!,⏎····process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!⏎··`","line":4,"column":33,"nodeType":null,"messageId":"replace","endLine":4,"endColumn":114,"fix":{"range":[148,229],"text":"\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// /app/api/test-login/route.ts\nimport { createClient } from '@supabase/supabase-js';\nexport async function GET() {\n  const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!);\n  const { error } = await supabase.auth.signInWithOtp({\n    email: 'sandonjurowski@gmail.com',\n    options: { emailRedirectTo: 'http://localhost:3000/login' },\n  });\n  return new Response(JSON.stringify({ error }), { status: 200 });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/update-campaign/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/update-profile/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/user-referrals/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logs' is assigned a value but never used.","line":20,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const runtime = 'nodejs';\n\nimport { createClient } from '@supabase/supabase-js';\nimport { getBadgeForReferrals } from '@/lib/getBadgeForReferrer';\nimport { json } from '@/lib/api/json';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nexport async function GET(req: Request) {\n  const { searchParams } = new URL(req.url);\n  const email = searchParams.get('email');\n\n  if (!email) {\n    return json({ error: 'Missing email' }, { status: 400 });\n  }\n\n  const { data: logs, count } = await supabase\n    .from('referral_logs')\n    .select('*', { count: 'exact', head: false }) // explicitly return count\n    .eq('ref', email);\n\n  const { data: user } = await supabase\n    .from('users')\n    .select('user_metadata')\n    .eq('email', email)\n    .maybeSingle();\n\n  const badge = getBadgeForReferrals(count ?? 0);\n\n  return json({\n    count: count ?? 0,\n    avatar: user?.user_metadata?.avatar_url || '',\n    bio: user?.user_metadata?.bio || '',\n    badge,\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/verify-recaptcha/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/weekly-digest-live/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/weekly-digest-live/route.ts\n\nimport { createClient } from '@supabase/supabase-js';\nimport { NextRequest } from 'next/server';\nimport OpenAI from 'openai';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY!,\n});\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const user_id = searchParams.get('user_id');\n\n  if (!user_id) {\n    return Response.json({ error: 'Missing user_id' }, { status: 400 });\n  }\n\n  const feedbackRes = await fetch(\n    `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/api/feedback-summary?user_id=${user_id}`\n  );\n  const summary = await feedbackRes.json();\n\n  const prompt = `\nYou are an encouraging coach AI. Write a 2-3 paragraph weekly summary of this user's behavior.\nHighlight check-in trends, mention positive feedback received, and encourage further progress.\n\nCheck-ins:\n${summary.checkin_history.map((c: any) => `• ${c.slug} at ${c.created_at}`).join('\\n')}\n\nFeedback:\n${summary.received_feedback.map((f: any) => `• ${f.action} on ${f.block_id.slice(0, 8)}: ${f.message || ''}`).join('\\n')}\n`;\n\n  const chat = await openai.chat.completions.create({\n    model: 'gpt-4',\n    messages: [\n      { role: 'system', content: 'You generate weekly coaching summaries from activity logs.' },\n      { role: 'user', content: prompt },\n    ],\n  });\n\n  const digest = chat.choices[0].message.content;\n  return Response.json({ digest });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/api/weekly-digest/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const runtime = 'nodejs';\n\nimport { createClient } from '@supabase/supabase-js';\nimport { json } from '@/lib/api/json';\nimport { NextRequest } from 'next/server';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\n// Mocked digest message generator\nfunction generateDigestMock(summary: any) {\n  const feedbackCount = summary.received_feedback.length;\n  const checkinCount = summary.checkin_history.length;\n  const topHabit = summary.checkin_history[0]?.slug || 'your habit';\n\n  return `This week, you checked in ${checkinCount} times, with a focus on \"${topHabit}\". You've received ${feedbackCount} supportive gestures. Keep up the great momentum — you're building a powerful rhythm. 🌱`;\n}\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const user_id = searchParams.get('user_id');\n\n  if (!user_id) {\n    return json({ error: 'Missing user_id' }, { status: 400 });\n  }\n\n  try {\n    const base = process.env.NEXT_PUBLIC_BASE_URL || 'https://quicksites.ai';\n    const response = await fetch(`${base}/api/feedback-summary?user_id=${user_id}`);\n    const summary = await response.json();\n\n    const digest = generateDigestMock(summary);\n    return json({ digest });\n  } catch (err: any) {\n    console.error('Digest generation failed:', err);\n    return json({ error: 'Failed to generate digest' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'redirect' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎··children,⏎}:·{⏎··children:·React.ReactNode;⏎` with `·children·}:·{·children:·React.ReactNode·`","line":35,"column":43,"nodeType":null,"messageId":"replace","endLine":39,"endColumn":1,"fix":{"range":[1188,1235],"text":" children }: { children: React.ReactNode "}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎····?·AdminLayout⏎···` with `·?·AdminLayout`","line":42,"column":63,"nodeType":null,"messageId":"replace","endLine":44,"endColumn":4,"fix":{"range":[1355,1377],"text":" ? AdminLayout"}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":51,"column":9,"nodeType":null,"messageId":"insert","endLine":51,"endColumn":9,"fix":{"range":[1561,1561],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":52,"column":11,"nodeType":null,"messageId":"insert","endLine":52,"endColumn":11,"fix":{"range":[1581,1581],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":53,"column":1,"nodeType":null,"messageId":"insert","endLine":53,"endColumn":1,"fix":{"range":[1584,1584],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":54,"column":15,"nodeType":null,"messageId":"insert","endLine":54,"endColumn":15,"fix":{"range":[1621,1621],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":55,"column":1,"nodeType":null,"messageId":"insert","endLine":55,"endColumn":1,"fix":{"range":[1629,1629],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":56,"column":1,"nodeType":null,"messageId":"insert","endLine":56,"endColumn":1,"fix":{"range":[1658,1658],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":57,"column":17,"nodeType":null,"messageId":"insert","endLine":57,"endColumn":17,"fix":{"range":[1715,1715],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":58,"column":15,"nodeType":null,"messageId":"insert","endLine":58,"endColumn":15,"fix":{"range":[1764,1764],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":59,"column":1,"nodeType":null,"messageId":"insert","endLine":59,"endColumn":1,"fix":{"range":[1767,1767],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":60,"column":1,"nodeType":null,"messageId":"insert","endLine":60,"endColumn":1,"fix":{"range":[1793,1793],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":61,"column":13,"nodeType":null,"messageId":"insert","endLine":61,"endColumn":13,"fix":{"range":[1820,1820],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":62,"column":11,"nodeType":null,"messageId":"insert","endLine":62,"endColumn":11,"fix":{"range":[1858,1858],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":63,"column":1,"nodeType":null,"messageId":"insert","endLine":63,"endColumn":1,"fix":{"range":[1862,1862],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `··········` with `············`","line":64,"column":1,"nodeType":null,"messageId":"replace","endLine":64,"endColumn":11,"fix":{"range":[1876,1886],"text":"            "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":65,"column":13,"nodeType":null,"messageId":"insert","endLine":65,"endColumn":13,"fix":{"range":[1971,1971],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `··············` with `················`","line":66,"column":1,"nodeType":null,"messageId":"replace","endLine":66,"endColumn":15,"fix":{"range":[1999,2013],"text":"                "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":67,"column":15,"nodeType":null,"messageId":"insert","endLine":67,"endColumn":15,"fix":{"range":[2094,2094],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `················` with `··················`","line":68,"column":1,"nodeType":null,"messageId":"replace","endLine":68,"endColumn":17,"fix":{"range":[2140,2156],"text":"                  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":69,"column":15,"nodeType":null,"messageId":"insert","endLine":69,"endColumn":15,"fix":{"range":[2213,2213],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":70,"column":1,"nodeType":null,"messageId":"insert","endLine":70,"endColumn":1,"fix":{"range":[2218,2218],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":71,"column":1,"nodeType":null,"messageId":"insert","endLine":71,"endColumn":1,"fix":{"range":[2243,2243],"text":"  "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":23,"source":"export const runtime = 'nodejs';\nexport const dynamic = 'force-dynamic';\nexport const preferredRegion = 'iad1';\n\nimport '@/styles/globals.css';\nimport { getSessionContext } from '@/lib/supabase/getSessionContext';\nimport { redirect } from 'next/navigation';\nimport AdminLayout from '@/components/layouts/admin-layout';\nimport ViewerLayout from '@/components/layouts/viewer-layout';\nimport AppHeader from '@/components/admin/AppHeader/app-header';\nimport { SessionProvider } from '@/lib/providers/SessionProvider';\n\nexport const metadata = {\n  metadataBase: new URL('https://quicksites.ai'),\n  title: 'QuickSites | One-Click Local Websites',\n  description: 'Launch your website in minutes with QuickSites.ai — no code needed.',\n  openGraph: {\n    title: 'QuickSites | One-Click Local Websites',\n    description: 'Launch your website in minutes with QuickSites.ai — no code needed.',\n    url: 'https://quicksites.ai',\n    siteName: 'QuickSites.ai',\n    images: [\n      {\n        url: '/og-image.png',\n        width: 1200,\n        height: 630,\n        alt: 'QuickSites AI Preview',\n      },\n    ],\n    locale: 'en_US',\n    type: 'website',\n  },\n};\n\nexport default async function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const { user, role } = await getSessionContext();\n\n  const Layout = ['admin', 'owner', 'reseller'].includes(role)\n    ? AdminLayout\n    : ViewerLayout;\n\n  return (\n    <html lang=\"en\" className=\"dark\">\n      <head />\n      <body className=\"bg-background text-foreground min-h-screen\">\n        <SessionProvider>\n        {user ? (\n          <>\n            <AppHeader\n              user={{\n                id: user.id,\n                email: user.email ?? '',\n                avatar_url: user.avatar_url ?? '',\n              }}\n              role={role}\n            />\n            <Layout>{children}</Layout>\n          </>\n        ) : (\n          <main className=\"flex items-center justify-center h-screen text-center\">\n            <div className=\"space-y-6\">\n              <h1 className=\"text-4xl font-extrabold\">Welcome to QuickSites</h1>\n              <p className=\"text-muted-foreground text-lg\">\n                Your one-click local site is moments away.\n              </p>\n              {children}\n            </div>\n            </main>\n          )}\n        </SessionProvider>\n      </body>\n    </html>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/page-v0.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/posters/[slug]/page.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":35,"column":11,"nodeType":"JSXOpeningElement","endLine":39,"endColumn":13},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎············src={posterUrl}⏎············alt={`Poster·for·${slug}`}⏎············className=\"w-full·object-contain\"⏎·········` with `·src={posterUrl}·alt={`Poster·for·${slug}`}·className=\"w-full·object-contain\"`","line":35,"column":15,"nodeType":null,"messageId":"replace","endLine":39,"endColumn":10,"fix":{"range":[1037,1160],"text":" src={posterUrl} alt={`Poster for ${slug}`} className=\"w-full object-contain\""}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// app/posters/[slug]/page.tsx\n\nimport { createClient } from '@supabase/supabase-js';\n\nexport const runtime = 'nodejs';\nexport const dynamic = 'force-dynamic';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default async function Page({ params }: { params: { slug: string } }) {\n  const { slug } = params;\n\n  const { data: campaign, error } = await supabase\n    .from('support_campaigns')\n    .select('*')\n    .eq('slug', slug)\n    .single();\n\n  if (!campaign || error) {\n    return <p className=\"p-6 text-red-600\">Campaign not found</p>;\n  }\n\n  const posterUrl = `/api/posters/${slug}`; // your dynamic PNG poster route\n\n  return (\n    <div className=\"min-h-screen bg-white text-black p-8\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <h1 className=\"text-3xl font-bold\">{campaign.headline}</h1>\n        <p className=\"text-zinc-700\">{campaign.description}</p>\n\n        <div className=\"border rounded overflow-hidden shadow\">\n          <img\n            src={posterUrl}\n            alt={`Poster for ${slug}`}\n            className=\"w-full object-contain\"\n          />\n        </div>\n\n        <div className=\"text-right text-sm text-zinc-500\">\n          Generated dynamically for: <code>{slug}</code>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/test/[slug]/page.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎··props:·Promise<{·params:·{·slug:·string·}·}>⏎` with `props:·Promise<{·params:·{·slug:·string·}·}>`","line":6,"column":36,"nodeType":null,"messageId":"replace","endLine":8,"endColumn":1,"fix":{"range":[138,186],"text":"props: Promise<{ params: { slug: string } }>"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// app/test/[slug]/page.tsx\n\nexport const dynamic = 'force-dynamic';\nexport const runtime = 'nodejs';\n\nexport default async function Page(\n  props: Promise<{ params: { slug: string } }>\n) {\n  const { params } = await props;\n  return <div>slug: {params.slug}</div>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/app/viewer/page.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎········className=\"text-xs·text-red-400·underline·mt-6\"⏎········onClick={()·=>·setCancelled(true)}⏎······` with `·className=\"text-xs·text-red-400·underline·mt-6\"·onClick={()·=>·setCancelled(true)}`","line":70,"column":14,"nodeType":null,"messageId":"replace","endLine":73,"endColumn":7,"fix":{"range":[2408,2514],"text":" className=\"text-xs text-red-400 underline mt-6\" onClick={() => setCancelled(true)}"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// /app/viewer/page.tsx\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAutoRedirectByRole } from '@/hooks/useAutoRedirectByRole';\nimport { useCurrentUser } from '@/hooks/useCurrentUser';\nimport { useCanonicalRole } from '@/hooks/useCanonicalRole';\nimport { NavSections } from '@/components/admin/AppHeader/nav-sections';\nimport { AvatarMenu } from '@/components/admin/AppHeader/avatar-menu';\n\nexport default function ViewerHomeRedirect() {\n  const [cancelled, setCancelled] = useState(false);\n  const [showNav, setShowNav] = useState(false);\n  const router = useRouter();\n  const { user, ready } = useCurrentUser();\n  const { role } = useCanonicalRole();\n\n  useAutoRedirectByRole({\n    roleRoutes: {\n      viewer: '/viewer/dashboard',\n      admin: '/admin/dashboard',\n      owner: '/admin/dashboard',\n      reseller: '/admin/dashboard',\n    },\n    fallbackRoute: '/unauthorized',\n    enableTestBypass: true,\n  });\n\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.location.hostname.includes('quicksites.ai')) {\n      if (ready && user) setShowNav(true);\n    }\n\n    const timeout = setTimeout(() => {\n      if (!cancelled) {\n        console.warn('[🕒 Timeout] Redirect did not resolve in time');\n        router.replace('/login?timeout=true');\n      }\n    }, 10000);\n\n    return () => clearTimeout(timeout);\n  }, [cancelled, ready, user, router]);\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-black text-white\">\n      <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-white mb-4\" />\n      <p className=\"text-sm text-gray-400 mb-2\">Redirecting based on your role...</p>\n      <p className=\"text-xs text-gray-500 mb-4\">\n        Host: {typeof window !== 'undefined' ? window.location.hostname : '...'}\n      </p>\n\n      {showNav && (\n        <div className=\"animate-fade-in transition-opacity duration-700 ease-in opacity-100\">\n          <NavSections />\n        </div>\n      )}\n\n      {ready && user && (\n        <div className=\"animate-fade-in transition-opacity duration-700 ease-in mt-4 opacity-100\">\n          <AvatarMenu\n            email={user.email ?? ''}\n            avatarUrl={(user as any).avatar_url || ''}\n            role={role || 'viewer'}\n            onLogout={() => router.replace('/login')}\n          />\n        </div>\n      )}\n\n      <button\n        className=\"text-xs text-red-400 underline mt-6\"\n        onClick={() => setCancelled(true)}\n      >\n        Cancel and go back\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/commitlint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/__screenshots__/ScreenshotDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin-claim-override.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/AppHeader/app-header.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":50,"column":17,"nodeType":"JSXOpeningElement","endLine":50,"endColumn":82}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport SafeLink from '../../ui/safe-link';\nimport { AvatarMenu } from './avatar-menu';\nimport { MobileDrawer } from './mobile-drawer';\nimport { NavSections } from './nav-sections';\n\nexport type AppHeaderProps = {\n  user: {\n    id: string;\n    email: string;\n    avatar_url?: string | null;\n  };\n  role: string;\n};\n\nexport default function AppHeader({ user, role }: AppHeaderProps) {\n  const router = useRouter();\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  useEffect(() => {\n    console.debug('[🧭 AppHeader Role Info]', {\n      email: user.email,\n      role,\n    });\n  }, [user.email, role]);\n\n  const logout = async () => {\n    try {\n      const { supabase } = await import('@/admin/lib/supabaseClient');\n      await supabase.auth.signOut();\n      localStorage.removeItem(`cached-role-${user.email}`);\n      router.replace('/login');\n      setTimeout(() => window.location.reload(), 200);\n    } catch (err) {\n      console.error('❌ Logout failed', err);\n      alert('Logout error. Please try again.');\n    }\n  };\n\n  return (\n    <>\n      <header className=\"flex justify-between items-center px-4 py-2 border-b border-zinc-700 relative z-50\">\n        <div className=\"bg-gray-800 text-white border-b border-gray-700 px-4 py-3 sticky top-0 z-50\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"overflow-x-auto whitespace-nowrap max-w-full flex-1\">\n              <SafeLink href=\"/\" className=\"text-blue-400 hover:underline\">\n                <img src=\"/logo.png\" alt=\"QuickSites\" width={100} height={100} />\n              </SafeLink>\n              <NavSections />\n            </div>\n            <div className=\"flex items-center space-x-4 ml-4\">\n              <AvatarMenu\n                email={user.email}\n                avatarUrl={user.avatar_url || ''}\n                role={role}\n                onLogout={logout}\n              />\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <button\n        className=\"absolute top-2 left-2 z-50 bg-zinc-800 text-white px-2 py-1 rounded shadow sm:hidden\"\n        onClick={() => setDrawerOpen(!drawerOpen)}\n      >\n        {drawerOpen ? '✕' : '☰'}\n      </button>\n      <MobileDrawer drawerOpen={drawerOpen} onClose={() => setDrawerOpen(false)} />\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/AppHeader/avatar-menu.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":50,"column":11,"nodeType":"JSXOpeningElement","endLine":50,"endColumn":83}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/admin/AppHeader/AvatarMenu.tsx\n'use client';\n\nimport { useEffect, useRef, useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { LogOut, UserCircle } from 'lucide-react';\nimport md5 from 'blueimp-md5';\nimport { RoleBadge } from './role-badge';\n\nexport function AvatarMenu({\n  email,\n  avatarUrl,\n  role,\n  source,\n  onLogout,\n}: {\n  email?: string;\n  avatarUrl?: string;\n  role?: string;\n  source?: string;\n  onLogout: () => void;\n}) {\n  const [open, setOpen] = useState(false);\n  const avatar =\n    avatarUrl ||\n    `https://gravatar.com/avatar/${email ? md5(email.trim().toLowerCase()) : 'unknown'}?d=identicon`;\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close on outside click\n  useEffect(() => {\n    function handleClickOutside(e: MouseEvent) {\n      if (menuRef.current && !menuRef.current.contains(e.target as Node)) {\n        setOpen(false);\n      }\n    }\n    if (open) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [open]);\n\n  return (\n    <div className=\"relative\" ref={menuRef}>\n      <button\n        onClick={() => setOpen(!open)}\n        className=\"focus:outline-none\"\n        aria-label=\"Avatar menu\"\n      >\n        <div className=\"w-6 h-6 sm:w-5 sm:h-5 rounded-full overflow-hidden border border-white\">\n          <img src={avatar} alt=\"avatar\" className=\"w-full h-full object-cover\" />\n        </div>\n      </button>\n\n      <AnimatePresence>\n        {open && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: -5 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: -5 }}\n            transition={{ duration: 0.15 }}\n            className=\"absolute right-0 mt-2 w-48 bg-zinc-900 border border-zinc-700 rounded shadow-xl text-xs z-50 p-2 space-y-2\"\n          >\n            <div className=\"flex items-center gap-2 text-gray-300\">\n              <UserCircle size={14} />\n              <span className=\"truncate\">{email}</span>\n            </div>\n            <RoleBadge role={role} source={source} />\n            <button\n              onClick={onLogout}\n              className=\"flex items-center gap-2 text-red-400 hover:underline text-left w-full\"\n            >\n              <LogOut size={14} />\n              Log Out\n            </button>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/AppHeader/mobile-drawer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onClose' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/admin/AppHeader/mobile-drawer.tsx\nimport SafeLink from '../../ui/safe-link';\n\nexport function MobileDrawer({\n  drawerOpen,\n  onClose,\n}: {\n  drawerOpen: boolean;\n  onClose: () => void;\n}) {\n  if (!drawerOpen) return null;\n\n  return (\n    <div className=\"fixed top-0 left-0 w-64 h-full bg-zinc-900 text-white z-40 p-4 shadow-lg sm:hidden\">\n      <h2 className=\"text-lg font-bold mb-4\">Menu</h2>\n      <nav className=\"space-y-4 text-sm\">\n        <details open>\n          <summary className=\"cursor-pointer font-semibold text-blue-300\">Core</summary>\n          <div className=\"ml-4 space-y-1\">\n            <SafeLink href=\"/admin\">Dashboard</SafeLink>\n            <SafeLink href=\"/admin/leads\">Leads</SafeLink>\n            <SafeLink href=\"/admin/campaigns\">Campaigns</SafeLink>\n            <SafeLink href=\"/admin/start-campaign\">Start Campaign</SafeLink>\n          </div>\n        </details>\n        <details>\n          <summary className=\"cursor-pointer font-semibold text-green-300\">\n            Logs & Analytics\n          </summary>\n          <div className=\"ml-4 space-y-1\">\n            <SafeLink href=\"/admin/logs\">Logs</SafeLink>\n            <SafeLink href=\"/admin/logs/sessions\">Session Logs</SafeLink>\n            <SafeLink href=\"/admin/analytics\">Analytics</SafeLink>\n            <SafeLink href=\"/admin/heatmap\">Heatmap</SafeLink>\n          </div>\n        </details>\n        <details>\n          <summary className=\"cursor-pointer font-semibold text-yellow-300\">Templates</summary>\n          <div className=\"ml-4 space-y-1\">\n            <SafeLink href=\"/admin/templates\">All Templates</SafeLink>\n            <SafeLink href=\"/admin/templates-new\">+ New Template</SafeLink>\n          </div>\n        </details>\n        <details>\n          <summary className=\"cursor-pointer font-semibold text-purple-300\">Dev Tools</summary>\n          <div className=\"ml-4 space-y-1\">\n            <SafeLink href=\"/admin/docs\">Docs</SafeLink>\n            <SafeLink href=\"/admin/query-usecases\">Params</SafeLink>\n            <SafeLink href=\"/admin/branding/og-editor/xyz\">OG Editor</SafeLink>\n          </div>\n        </details>\n        <details>\n          <summary className=\"cursor-pointer font-semibold text-red-300\">Admin</summary>\n          <div className=\"ml-4 space-y-1\">\n            <SafeLink href=\"/admin/users\">Users</SafeLink>\n            <SafeLink href=\"/admin/roles\">Roles</SafeLink>\n          </div>\n        </details>\n      </nav>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/AppHeader/nav-sections.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errors' is assigned a value but never used.","line":12,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isDynamic' is assigned a value but never used.","line":35,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { usePathname } from 'next/navigation';\nimport { useSmartNav } from '../../../hooks/useSmartNav';\nimport SafeLink from '../../ui/safe-link';\nimport { NavBadge } from '../../ui/nav-badge';\nimport { useLiveAdminStats } from '../../../hooks/useLiveAdminStats';\n\nexport function NavSections() {\n  const pathname = usePathname();\n  const { nav, loading } = useSmartNav();\n  const { unclaimed, errors } = useLiveAdminStats();\n\n  const matches = (prefix: string) => pathname?.startsWith(prefix);\n\n  if (loading) return null;\n\n  return (\n    <nav className=\"flex flex-col gap-6 text-sm\">\n      {/* 🖥 Desktop */}\n      <div className=\"hidden md:flex flex-wrap gap-4 items-center\">\n        {nav.map((section) => (\n          <details\n            key={section.label}\n            className=\"group\"\n            open={section.routes.some((r) => matches(r.href))}\n          >\n            <summary\n              className={`cursor-pointer font-semibold ${section.color} group-open:underline`}\n            >\n              {section.label}\n            </summary>\n            <div className=\"ml-2 flex flex-wrap gap-2 mt-1\">\n              {section.routes.map((r) => {\n                const isDynamic = r.href.includes('[slug]') || r.href.includes(':');\n                const labelWithCount =\n                  r.href === '/admin/leads' && unclaimed && unclaimed > 0\n                    ? `${r.label} (${unclaimed})`\n                    : r.href === '/admin/drafts' && unclaimed && unclaimed > 0\n                      ? `${r.label} (${unclaimed})`\n                      : r.label;\n\n                return (\n                  <SafeLink\n                    key={r.href}\n                    href={r.href}\n                    target={r.external ? '_blank' : undefined}\n                    title={r.title}\n                    onClick={() => {\n                      fetch('/api/log-event', {\n                        method: 'POST',\n                        body: JSON.stringify({ href: r.href, type: 'nav_click' }),\n                      });\n                    }}\n                  >\n                    {labelWithCount}\n                    <NavBadge flag={r.flags?.[0]} />\n                  </SafeLink>\n                );\n              })}\n            </div>\n          </details>\n        ))}\n      </div>\n\n      {/* 📱 Mobile */}\n      <div className=\"md:hidden\">\n        <label htmlFor=\"mobile-nav\" className=\"block mb-1 font-medium text-muted-foreground\">\n          Navigate:\n        </label>\n        <select\n          id=\"mobile-nav\"\n          className=\"w-full p-2 border rounded text-sm\"\n          onChange={(e) => {\n            if (e.target.value) {\n              fetch('/api/log-event', {\n                method: 'POST',\n                body: JSON.stringify({ href: e.target.value, type: 'nav_click' }),\n              });\n              window.location.href = e.target.value;\n            }\n          }}\n        >\n          <option value=\"\">Select a page</option>\n          {nav.flatMap((section) => [\n            <optgroup key={section.label} label={section.label}>\n              {section.routes.map((r) => (\n                <option key={r.href} value={r.href}>\n                  {r.label.replace(/^[^\\w\\s]+ /, '')}\n                </option>\n              ))}\n            </optgroup>,\n          ])}\n        </select>\n      </div>\n    </nav>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/AppHeader/role-badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/activity-feed.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'i' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nexport default function ActivityFeed({\n  domain_id,\n  lead_id,\n}: {\n  domain_id?: string;\n  lead_id?: string;\n}) {\n  const [logs, setLogs] = useState<any[]>([]);\n\n  useEffect(() => {\n    const query = supabase\n      .from('user_action_logs')\n      .select('*')\n      .order('timestamp', { ascending: false });\n    if (domain_id) {\n      query.eq('domain_id', domain_id).then(({ data }) => setLogs(data || []));\n    } else if (lead_id) {\n      query.eq('lead_id', lead_id).then(({ data }) => setLogs(data || []));\n    }\n  }, [domain_id, lead_id]);\n\n  return (\n    <div className=\"text-sm text-gray-300 mt-4\">\n      <h2 className=\"text-sm font-bold mb-2 text-gray-400\">Activity Feed</h2>\n      {logs.length === 0 && <p className=\"text-xs text-gray-500\">No activity yet.</p>}\n      <ul className=\"space-y-2\">\n        {logs.map((log, i) => (\n          <li key={log.id} className=\"bg-gray-900 px-3 py-2 rounded\">\n            <div className=\"text-xs text-green-400\">{new Date(log.timestamp).toLocaleString()}</div>\n            <div className=\"text-xs\">\n              {log.action_type.replace(/_/g, ' ')} by <strong>{log.triggered_by || '—'}</strong>\n            </div>\n            {log.notes && <div className=\"text-xs italic text-gray-400 mt-1\">{log.notes}</div>}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/add-block-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/admin-layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useUser' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/AdminLayout.tsx\nimport BreadcrumbNav from './breadcrumb-nav';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useUser } from '@supabase/auth-helpers-react';\nimport { ReactNode } from 'react';\nimport { useCurrentUser } from '@/hooks/useCurrentUser';\n\nexport default function AdminLayout({ children }: { children: ReactNode }) {\n  const { user, isLoading } = useCurrentUser();\n  const router = useRouter();\n\n  if (isLoading) return <div className=\"p-4 text-sm\">Loading...</div>;\n  if (!user) {\n    router.push('/unauthorized');\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      <aside className=\"w-60 bg-white shadow-lg p-4 space-y-2\">\n        <h2 className=\"text-lg font-semibold mb-4\">Admin</h2>\n        <nav className=\"flex flex-col gap-2 text-sm\">\n          <Link href=\"/admin/dashboard\" className=\"hover:underline text-blue-700\">\n            Dashboard\n          </Link>\n          <Link href=\"/admin/sites\" className=\"hover:underline text-blue-700\">\n            Sites\n          </Link>\n          <Link href=\"/admin/param-lab\" className=\"hover:underline text-blue-700\">\n            Param Lab\n          </Link>\n          <Link href=\"/admin/zod-playground\" className=\"hover:underline text-blue-700\">\n            Zod Playground\n          </Link>\n          <Link href=\"/admin/logs\" className=\"hover:underline text-blue-700\">\n            Logs\n          </Link>\n        </nav>\n      </aside>\n      <main className=\"flex-1 p-6\">\n        <BreadcrumbNav />\n        <div className=\"bg-white shadow rounded p-6\">{children}</div>\n      </main>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/admin-tabs.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Insert `⏎···`","line":26,"column":37,"nodeType":null,"messageId":"insert","endLine":26,"endColumn":37,"fix":{"range":[795,795],"text":"\n   "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { FiGrid, FiFileText, FiGlobe, FiUsers, FiMenu } from 'react-icons/fi';\nimport { useState } from 'react';\nimport { useCanonicalRole } from '@/hooks/useCanonicalRole';\n\nconst allTabs = [\n  { label: 'Dashboard', href: '/admin/sites/dashboard', icon: FiGrid },\n  {\n    label: 'Logs',\n    href: '/admin/logs/dashboard',\n    icon: FiFileText,\n    roles: ['admin'],\n  },\n  { label: 'Sites', href: '/admin/sites', icon: FiGlobe },\n  { label: 'Users', href: '/admin/users', icon: FiUsers, roles: ['admin'] },\n];\n\nexport default function AdminTabs() {\n  const pathname = usePathname();\n  const { role } = useCanonicalRole();\n  const [open, setOpen] = useState(false);\n\n  const isActive = (href: string) => pathname === href || (pathname && pathname.startsWith(href + '/'));\n\n  const tabs = allTabs.filter((tab) => !tab.roles || tab.roles.includes(role || ''));\n\n  return (\n    <div className=\"border-b border-gray-300 mb-4 px-4\">\n      <div className=\"flex justify-between items-center py-2\">\n        <span className=\"text-sm font-semibold text-gray-600\">Admin Panel</span>\n        <button onClick={() => setOpen(!open)} className=\"md:hidden\">\n          <FiMenu className=\"w-5 h-5\" />\n        </button>\n      </div>\n      <nav\n        className={`flex flex-col md:flex-row gap-3 md:gap-4 text-sm transition-all ${\n          open ? 'block' : 'hidden md:flex'\n        }`}\n      >\n        {tabs.map(({ label, href, icon: Icon }) => (\n          <Link\n            key={href}\n            href={href}\n            className={`flex items-center gap-1 pb-1 border-b-2 ${\n              isActive(href)\n                ? 'text-blue-600 border-blue-600 font-medium'\n                : 'text-gray-600 border-transparent hover:text-blue-500'\n            }`}\n          >\n            <Icon className=\"w-4 h-4\" />\n            {label}\n          </Link>\n        ))}\n      </nav>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/admin/blocks/activity-widget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/admin/blocks/engagement-widget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/admin/blocks/retention-widget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/admin/blocks/traffic-widget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/admin/campaign-comparison.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/admin/image-uploader.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":69,"column":11,"nodeType":"JSXOpeningElement","endLine":69,"endColumn":83}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useDropzone } from 'react-dropzone';\nimport { useImageUploader } from '@/hooks/useImageUploader';\n\ninterface ImageUploaderProps {\n  siteId: string;\n  templateId: string;\n  dbField: string;\n  folder?: string;\n  label: string;\n  initialUrl?: string;\n  onUpload?: (url: string | null) => void;\n}\n\nexport default function ImageUploader(props: ImageUploaderProps) {\n  const { preview, uploading, uploadImage, removeImage } = useImageUploader({\n    siteId: props.siteId,\n    templateId: props.templateId,\n    dbField: props.dbField,\n    folder: props.folder,\n    label: props.label,\n    initialUrl: props.initialUrl,\n    onChange: props.onUpload,\n  });\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    accept: { 'image/*': [] },\n    onDrop: (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) uploadImage(file);\n    },\n  });\n\n  const getDropzoneSizeClass = (label?: string) => {\n    if (!label) return 'h-40 w-full';\n\n    const lower = label.toLowerCase();\n\n    if (lower.includes('banner')) return 'h-32 w-full aspect-[4/1]';\n    if (lower.includes('hero')) return 'h-64 w-full aspect-[2.5/1]';\n    if (lower.includes('logo')) return 'h-32 w-32 aspect-square';\n    if (lower.includes('team')) return 'h-48 w-full aspect-[3/2]';\n\n    return 'h-40 w-full';\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      {props.label && <p className=\"text-xs text-white/70 font-medium\">{props.label}</p>}\n\n      <div\n        {...getRootProps()}\n        className={`border-2 border-dashed rounded-lg text-center cursor-pointer transition flex items-center justify-center\n          ${isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}\n          ${getDropzoneSizeClass(props.label)}\n        `}\n      >\n        <input {...getInputProps()} />\n        <p className=\"text-sm text-gray-400\">\n          {isDragActive ? 'Drop the image here…' : 'Drag & drop an image, or click to select one'}\n        </p>\n      </div>\n\n      {uploading && <p className=\"text-sm text-gray-500\">Uploading...</p>}\n\n      {preview && (\n        <div className=\"relative max-w-xs\">\n          <img src={preview} alt=\"Uploaded\" className=\"rounded border max-h-48\" />\n          <button\n            type=\"button\"\n            onClick={removeImage}\n            className=\"absolute top-1 right-1 bg-red-500 text-white px-2 py-1 text-xs rounded\"\n          >\n            Remove\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/admin/seed-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/admin/template-image-gallery.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":30,"column":13,"nodeType":"JSXOpeningElement","endLine":34,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nexport default function TemplateImageGallery({ templateId }: { templateId: string }) {\n  const [images, setImages] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (!templateId) return;\n    supabase\n      .from('template_images')\n      .select('*')\n      .eq('template_id', templateId)\n      .order('uploaded_at', { ascending: false })\n      .then(({ data, error }) => {\n        if (error) console.error('Failed to fetch image history:', error);\n        else setImages(data);\n      });\n  }, [templateId]);\n\n  if (!images.length) return null;\n\n  return (\n    <div className=\"mt-4 space-y-2\">\n      <h3 className=\"text-sm font-semibold\">Upload History</h3>\n      <div className=\"grid grid-cols-2 gap-2\">\n        {images.map((img) => (\n          <div key={img.id} className=\"relative\">\n            <img\n              src={img.url}\n              alt={img.original_name}\n              className=\"rounded border max-h-32 object-contain\"\n            />\n            <div className=\"absolute bottom-1 left-1 bg-black bg-opacity-50 text-white text-xs px-1 rounded\">\n              {img.type}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/admin/user-timeline-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { format, formatDistance } from 'date-fns';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\ninterface TimelineEvent {\n  type: string;\n  source: 'guest' | 'log';\n  created_at: string;\n  trigger_reason?: string;\n  referrer?: string;\n  page_url?: string;\n  platform?: string | null;\n  device_type?: string | null;\n  ip_address?: string | null;\n  user_agent?: string | null;\n  [key: string]: any; // optional fallback for dynamic props\n}\n\ninterface Props {\n  open: boolean;\n  onClose: () => void;\n  userId: string;\n  userLabel: string;\n  guestEvents: TimelineEvent[];\n  userLogs: TimelineEvent[];\n}\n\nexport function UserTimelineDialog({\n  open,\n  onClose,\n  userId,\n  userLabel,\n  guestEvents,\n  userLogs,\n}: Props) {\n  const [showAbsolute, setShowAbsolute] = useState(false);\n\n  const allEvents = [...guestEvents, ...userLogs]\n    .map((e) => ({\n      ...e,\n      timestamp: new Date(e.created_at),\n    }))\n    .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n\n  const origin = allEvents[0]?.timestamp ?? new Date();\n\n  const emojiMap: Record<string, string> = {\n    view: '👁️',\n    click: '🚀',\n    signup_complete: '✅',\n    site_published: '📤',\n  };\n\n  const descriptions: Record<string, string> = {\n    view: 'User opened the upgrade modal',\n    click: 'User clicked “Sign Up” button',\n    signup_complete: 'User completed sign up',\n    site_published: 'User published a site',\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-lg\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-bold\">Timeline for {userLabel}</DialogTitle>\n          {guestEvents.length > 0 &&\n            (() => {\n              const firstView = guestEvents.find((e) => e.type === 'view');\n              if (!firstView) return null;\n\n              const ref = (firstView as any).referrer || '';\n              const host = typeof window !== 'undefined' ? window.location.origin : '';\n              const isInternal = ref.startsWith(host) || ref === '';\n\n              const refColor = ref\n                ? isInternal\n                  ? 'text-green-600'\n                  : 'text-red-600'\n                : 'text-muted-foreground';\n\n              const utmFields = [\n                'utm_source',\n                'utm_medium',\n                'utm_campaign',\n                'utm_term',\n                'utm_content',\n              ];\n\n              return (\n                <div className=\"text-sm text-muted-foreground space-y-1 border p-2 rounded bg-muted\">\n                  {firstView.trigger_reason && (\n                    <div>\n                      <strong>Trigger:</strong> {firstView.trigger_reason}\n                    </div>\n                  )}\n                  <div>\n                    <strong>Referrer:</strong> <span className={refColor}>{ref || 'none'}</span>\n                  </div>\n                  {(firstView as any).page_url && (\n                    <div>\n                      <strong>Page:</strong>{' '}\n                      <a\n                        href={(firstView as any).page_url}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        className=\"underline\"\n                      >\n                        {(firstView as any).page_url}\n                      </a>\n                    </div>\n                  )}\n                  {utmFields\n                    .filter((key) => (firstView as any)[key])\n                    .map((key) => (\n                      <div key={key}>\n                        <strong>{key.replace('utm_', '').toUpperCase()}:</strong>{' '}\n                        {(firstView as any)[key]}\n                      </div>\n                    ))}\n                  {(firstView as any).page_url && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      className=\"mt-2\"\n                      onClick={() => window.open((firstView as any).page_url, '_blank')}\n                    >\n                      Open Page Context ↗\n                    </Button>\n                  )}\n                </div>\n              );\n            })()}\n        </DialogHeader>\n\n        <div className=\"mb-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setShowAbsolute(!showAbsolute)}>\n            Toggle {showAbsolute ? 'Relative' : 'Absolute'} Timestamps\n          </Button>\n        </div>\n\n        <div className=\"space-y-2 text-sm max-h-[400px] overflow-y-auto\">\n          <TooltipProvider>\n            {allEvents.map((e, i) => {\n              const prev = allEvents[i - 1]?.timestamp;\n              const delta =\n                prev && e.timestamp\n                  ? formatDistance(e.timestamp, prev, { addSuffix: false })\n                  : null;\n\n              const deviceInfo =\n                e.source === 'guest' && (e.user_agent || e.platform || e.device_type)\n                  ? [e.platform, e.device_type].filter(Boolean).join(' • ') +\n                    (e.user_agent ? `\\n${e.user_agent}` : '')\n                  : null;\n\n              return (\n                <div key={i} className=\"border-b pb-1\">\n                  <div className=\"flex justify-between items-start\">\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <span>\n                          {emojiMap[e.type] || '🔹'} {descriptions[e.type] || e.type}\n                        </span>\n                      </TooltipTrigger>\n                      <TooltipContent>\n                        <p>{descriptions[e.type] || 'Event in user journey'}</p>\n                      </TooltipContent>\n                    </Tooltip>\n\n                    <span className=\"text-muted-foreground text-xs\">\n                      {showAbsolute\n                        ? format(e.timestamp, 'MMM d, yyyy HH:mm:ss')\n                        : formatDistance(e.timestamp, origin, {\n                            addSuffix: true,\n                          })}\n                    </span>\n                  </div>\n\n                  {delta && (\n                    <div className=\"text-xs text-muted-foreground pl-4\">\n                      +{delta} since previous\n                    </div>\n                  )}\n\n                  {deviceInfo && (\n                    <div className=\"text-xs text-muted-foreground mt-1 pl-4 whitespace-pre-wrap\">\n                      {deviceInfo}\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </TooltipProvider>\n\n          {allEvents.length === 0 && (\n            <div className=\"text-muted-foreground italic\">No events found for this user.</div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/analytics/admin-analytics-toolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/auth-guard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/block-settings-modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/branding/branding-audit-panel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/branding/branding-badge.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":22,"column":9,"nodeType":"JSXOpeningElement","endLine":22,"endColumn":84}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default function BrandingBadge({ branding }: { branding: any }) {\n  if (!branding) return null;\n\n  const themeColors: any = {\n    dark: 'bg-gray-800 text-white border-gray-700',\n    light: 'bg-white text-black border-gray-300',\n  };\n\n  const brandColors: any = {\n    green: 'bg-green-500',\n    blue: 'bg-blue-500',\n    red: 'bg-red-500',\n  };\n\n  return (\n    <div\n      className={`text-xs inline-flex items-center gap-2 px-2 py-1 rounded border ${themeColors[branding.theme] || ''}`}\n    >\n      <span>{branding.name}</span>\n      <div className={`w-3 h-3 rounded-full ${brandColors[branding.brand] || ''}`} />\n      {branding.logo_url && (\n        <img src={branding.logo_url} alt=\"Logo\" className=\"h-4 w-4 rounded-full\" />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/branding/layout-export-buttons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/branding/owner-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/branding/theme-brand-switcher-advanced.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":90,"column":11,"nodeType":"JSXOpeningElement","endLine":90,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport QRCode from 'qrcode';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nconst themes = ['light', 'dark'];\nconst brands = ['green', 'blue', 'red'];\n\nexport default function ThemeBrandSwitcherAdvanced({\n  profileId,\n  initialTheme = 'dark',\n  initialBrand = 'green',\n  ownerId,\n}: {\n  profileId: string;\n  initialTheme?: string;\n  initialBrand?: string;\n  ownerId?: string;\n}) {\n  const [theme, setTheme] = useState(initialTheme);\n  const [brand, setBrand] = useState(initialBrand);\n  const [url, setUrl] = useState('');\n  const [qr, setQr] = useState<string | null>(null);\n  const [saving, setSaving] = useState(false);\n  const [userId, setUserId] = useState<string | null>(null);\n\n  useEffect(() => {\n    const storedTheme = localStorage.getItem('branding_theme');\n    const storedBrand = localStorage.getItem('branding_brand');\n    if (storedTheme && themes.includes(storedTheme)) setTheme(storedTheme);\n    if (storedBrand && brands.includes(storedBrand)) setBrand(storedBrand);\n\n    supabase.auth.getUser().then(({ data }) => {\n      setUserId(data?.user?.id || null);\n    });\n  }, []);\n\n  useEffect(() => {\n    const updated = `/api/og/snapshot?theme=${theme}&brand=${brand}`;\n    setUrl(updated);\n    QRCode.toDataURL(window.location.origin + updated).then(setQr);\n    localStorage.setItem('branding_theme', theme);\n    localStorage.setItem('branding_brand', brand);\n  }, [theme, brand]);\n\n  const saveDefaults = async () => {\n    setSaving(true);\n    await supabase.from('branding_profiles').update({ theme, brand }).eq('id', profileId);\n    setSaving(false);\n    alert('Saved as default.');\n  };\n\n  const canSave = userId && ownerId && userId === ownerId;\n\n  return (\n    <div className=\"p-4 border rounded space-y-3 bg-white transition-all\">\n      <div className=\"flex gap-4\">\n        <label className=\"text-sm font-semibold\">Theme:</label>\n        {themes.map((t) => (\n          <button\n            key={t}\n            className={`text-sm px-2 py-1 border rounded transition-all ${t === theme ? 'bg-black text-white' : 'bg-gray-100'}`}\n            onClick={() => setTheme(t)}\n          >\n            {t}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"flex gap-4\">\n        <label className=\"text-sm font-semibold\">Brand:</label>\n        {brands.map((b) => (\n          <button\n            key={b}\n            className={`text-sm px-2 py-1 border rounded transition-all ${b === brand ? 'bg-black text-white' : 'bg-gray-100'}`}\n            onClick={() => setBrand(b)}\n          >\n            {b}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"mt-2 transition-opacity duration-300\">\n        <p className=\"text-xs\">OG URL:</p>\n        <code className=\"text-xs block bg-gray-100 p-2 rounded\">{url}</code>\n      </div>\n\n      {qr && (\n        <div className=\"mt-2 transition-opacity duration-300\">\n          <p className=\"text-xs text-muted-foreground\">QR:</p>\n          <img src={qr} alt=\"QR\" className=\"w-24 h-24 border rounded shadow\" />\n        </div>\n      )}\n\n      {canSave && (\n        <button\n          onClick={saveDefaults}\n          disabled={saving}\n          className=\"text-xs mt-2 underline text-blue-600\"\n        >\n          {saving ? 'Saving...' : 'Save as Default'}\n        </button>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/branding/theme-brand-switcher.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'onUpdate'. Either include it or remove the dependency array. If 'onUpdate' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":28,"column":6,"nodeType":"ArrayExpression","endLine":28,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [theme, brand, onUpdate]","fix":{"range":[877,891],"text":"[theme, brand, onUpdate]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":66,"column":11,"nodeType":"JSXOpeningElement","endLine":66,"endColumn":65}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport QRCode from 'qrcode';\n\nconst themes = ['light', 'dark'];\nconst brands = ['green', 'blue', 'red'];\n\nexport default function ThemeBrandSwitcher({\n  initialTheme = 'dark',\n  initialBrand = 'green',\n  onUpdate,\n}: {\n  initialTheme?: string;\n  initialBrand?: string;\n  onUpdate?: (url: string, theme: string, brand: string, qr?: string) => void;\n}) {\n  const [theme, setTheme] = useState(initialTheme);\n  const [brand, setBrand] = useState(initialBrand);\n  const [url, setUrl] = useState('');\n  const [qr, setQr] = useState<string | null>(null);\n\n  useEffect(() => {\n    const updated = `/api/og/snapshot?theme=${theme}&brand=${brand}`;\n    setUrl(updated);\n    QRCode.toDataURL(window.location.origin + updated).then((dataUrl) => {\n      setQr(dataUrl);\n      if (onUpdate) onUpdate(updated, theme, brand, dataUrl);\n    });\n  }, [theme, brand]);\n\n  return (\n    <div className=\"p-4 border rounded space-y-2 bg-white\">\n      <div className=\"flex gap-4\">\n        <label className=\"text-sm font-semibold\">Theme:</label>\n        {themes.map((t) => (\n          <button\n            key={t}\n            className={`text-sm px-2 py-1 border rounded ${t === theme ? 'bg-black text-white' : 'bg-gray-100'}`}\n            onClick={() => setTheme(t)}\n          >\n            {t}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"flex gap-4\">\n        <label className=\"text-sm font-semibold\">Brand:</label>\n        {brands.map((b) => (\n          <button\n            key={b}\n            className={`text-sm px-2 py-1 border rounded ${b === brand ? 'bg-black text-white' : 'bg-gray-100'}`}\n            onClick={() => setBrand(b)}\n          >\n            {b}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"mt-2\">\n        <p className=\"text-xs\">OG URL:</p>\n        <code className=\"text-xs block bg-gray-100 p-2 rounded\">{url}</code>\n      </div>\n\n      {qr && (\n        <div className=\"mt-2\">\n          <p className=\"text-xs text-muted-foreground\">QR:</p>\n          <img src={qr} alt=\"QR\" className=\"w-24 h-24 border\" />\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/breadcrumb-nav.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/BreadcrumbNav.tsx\nimport Link from 'next/link';\nimport { useRouter, useSearchParams } from 'next/navigation';\n\nexport default function BreadcrumbNav() {\n  const searchParams = useSearchParams();\n  const segments = searchParams?.get('asPath')?.split('?')[0].split('/').filter(Boolean) || [];\n\n  const pathAcc: string[] = [];\n  const crumbs = segments.map((seg, i) => {\n    pathAcc.push(seg);\n    const href = '/' + pathAcc.join('/');\n    const label = seg.replace(/-/g, ' ').replace(/\\b\\w/g, (l) => l.toUpperCase());\n    return (\n      <span key={i} className=\"text-sm text-gray-500\">\n        {i > 0 && ' / '}\n        <Link href={href} className=\"hover:underline text-blue-600\">\n          {label}\n        </Link>\n      </span>\n    );\n  });\n\n  return <div className=\"mb-2\">{crumbs}</div>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/city-marker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/comment-thread.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [loadComments, snapshotId]","fix":{"range":[765,777],"text":"[loadComments, snapshotId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\n\ntype Comment = {\n  id: string;\n  message: string;\n  author_email: string;\n  created_at: string;\n};\n\nexport default function CommentThread({ snapshotId }: { snapshotId: string }) {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [newComment, setNewComment] = useState('');\n  const [author, setAuthor] = useState('');\n\n  const loadComments = async () => {\n    const res = await fetch(`/api/comments?snapshot_id=${snapshotId}`);\n    const data = await res.json();\n    setComments(data);\n  };\n\n  useEffect(() => {\n    if (snapshotId) loadComments();\n  }, [snapshotId]);\n\n  const submitComment = async () => {\n    if (!newComment.trim()) return;\n    const res = await fetch('/api/comments', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        snapshot_id: snapshotId,\n        author_email: author || 'anonymous',\n        message: newComment,\n      }),\n    });\n    if (res.ok) {\n      setNewComment('');\n      loadComments();\n    }\n  };\n\n  return (\n    <div className=\"p-4 border-t mt-4 bg-muted/20 rounded\">\n      <h3 className=\"text-lg font-semibold mb-2\">Comments</h3>\n\n      {comments.length === 0 && (\n        <p className=\"text-sm text-muted-foreground mb-4\">No comments yet.</p>\n      )}\n\n      <ul className=\"space-y-3 mb-4\">\n        {comments.map((c) => (\n          <li key={c.id} className=\"bg-white p-3 rounded shadow-sm\">\n            <p className=\"text-sm\">{c.message}</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {c.author_email} – {new Date(c.created_at).toLocaleString()}\n            </p>\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"space-y-2\">\n        <Input\n          placeholder=\"Your email (optional)\"\n          value={author}\n          onChange={(e) => setAuthor(e.target.value)}\n        />\n        <Textarea\n          placeholder=\"Leave a comment...\"\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n        />\n        <Button onClick={submitComment} size=\"sm\">\n          Post Comment\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/context/current-user-provider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useContext' is defined but never used.","line":3,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getSupabase' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { supabase } from '@/lib/supabase/client';\n\nimport { getSupabase } from '@/lib/supabase/server';\n\ntype CurrentUser = {\n  id: string;\n  email: string;\n  name?: string;\n  avatar_url?: string;\n  role: string;\n  bio?: string;\n  plan?: string;\n};\n\nexport type CurrentUserContextType = {\n  user: CurrentUser | null;\n  ready: boolean;\n  role: 'admin' | 'editor' | 'viewer' | 'owner';\n  hasRole: (roles: string[]) => boolean;\n  refetch: () => void;\n};\n\nexport const CurrentUserContext = createContext<CurrentUserContextType>({\n  user: null,\n  ready: false,\n  role: 'viewer',\n  hasRole: () => false,\n  refetch: () => {},\n});\n\nexport function CurrentUserProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<CurrentUser | null>(null);\n  const [ready, setReady] = useState<boolean>(false);\n\n  const load = async () => {\n    const { data: sessionData } = await supabase.auth.getSession();\n    const u = sessionData?.session?.user;\n\n    if (!u?.id) {\n      setUser(null);\n      setReady(true);\n      return;\n    }\n\n    const { data: profile, error } = await supabase\n      .from('user_profiles')\n      .select('*')\n      .eq('user_id', u.id)\n      .single();\n\n    if (error) {\n      console.error('❌ Failed to fetch user_profiles:', error.message);\n      setUser(null);\n      setReady(true);\n      return;\n    }\n\n    const normalizedRole = (profile.role || 'viewer').toLowerCase() as CurrentUser['role'];\n\n    const user: CurrentUser = {\n      id: u.id,\n      email: u.email ?? profile.email,\n      name: profile.name ?? '',\n      avatar_url: profile.avatar_url ?? '',\n      role: normalizedRole,\n      bio: profile.bio ?? '',\n      plan: profile.plan ?? 'free',\n    };\n\n    console.log('✅ [User loaded]', {\n      email: user.email,\n      role: user.role,\n      plan: user.plan,\n    });\n\n    setUser(user);\n    setReady(true);\n  };\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  const hasRole = (roles: string[]) =>\n    user?.role ? roles.map((r) => r.toLowerCase()).includes(user.role.toLowerCase()) : false;\n\n  return (\n    <CurrentUserContext.Provider\n      value={{\n        user,\n        ready,\n        role: (user?.role as 'admin' | 'editor' | 'viewer' | 'owner') || 'viewer',\n        hasRole,\n        refetch: load,\n      }}\n    >\n      {children}\n    </CurrentUserContext.Provider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/context/sidebar-nav-context.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/csv-date-range-export.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/dashboard-block.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/dashboard-grid-draggable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/dashboard-grid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/dashboard-selector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/docs/DocsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/embed/upgrade-prompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/filter-dropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/grid-map.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/grid-sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/grouped-nav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/layout-editor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/layout-editor.versioned.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/layout-template-manager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/layout/admin-sidebar-layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/log-toolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/logs/admin-log-toolbar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'start' is assigned a value but never used.","line":21,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'end' is assigned a value but never used.","line":21,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { DateFilterToolbar } from '@/components/admin/logs/date-filter-toolbar';\nimport { DateRangeToolbar } from '@/components/admin/logs/date-range-toolbar';\nimport CSVDateRangeExport from '@/components/admin/csv-date-range-export';\nimport { useDateRange } from '@/hooks/useDateRange';\n\nexport function AdminLogToolbar({\n  type,\n  onSearch,\n  onPage,\n  page = 1,\n  children,\n}: {\n  type: 'feedback' | 'checkins';\n  onSearch?: (term: string) => void;\n  onPage?: (page: number) => void;\n  page?: number;\n  children?: React.ReactNode;\n}) {\n  const [query, setQuery] = useState('');\n  const { start, end } = useDateRange();\n\n  return (\n    <>\n      <CSVDateRangeExport type={type} />\n      <div className=\"mb-4 space-y-4\">\n        <DateFilterToolbar basePath={`/admin/logs/${type}`} />\n        <DateRangeToolbar basePath={`/admin/logs/${type}`} />\n        <div className=\"flex flex-wrap items-center justify-between gap-4 text-sm\">\n          <CSVDateRangeExport type={type} />\n          <div className=\"flex items-center gap-3\">\n            {onSearch && (\n              <input\n                type=\"text\"\n                placeholder=\"Search...\"\n                value={query}\n                onChange={(e) => {\n                  setQuery(e.target.value);\n                  onSearch(e.target.value);\n                }}\n                className=\"px-2 py-1 rounded bg-zinc-900 border border-zinc-700 text-white\"\n              />\n            )}\n            {onPage && (\n              <div className=\"flex items-center gap-2\">\n                <button\n                  onClick={() => onPage(Math.max(1, page - 1))}\n                  className=\"bg-zinc-700 px-2 py-1 rounded hover:bg-zinc-600 text-white\"\n                  disabled={page <= 1}\n                >\n                  ← Prev\n                </button>\n                <span className=\"text-zinc-300\">Page {page}</span>\n                <button\n                  onClick={() => onPage(page + 1)}\n                  className=\"bg-zinc-700 px-2 py-1 rounded hover:bg-zinc-600 text-white\"\n                >\n                  Next →\n                </button>\n              </div>\n            )}\n            {children}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/logs/date-filter-toolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/logs/date-range-toolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/map-legend.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/marker-stats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/missing-link.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/mobile-drawer-sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/modals/upgrade-modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/nav-bar-with-badges.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/og/wysiwyg-preview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/pages/campaigns-client-page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/preset-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/preset-manager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/profile-dropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/publish-form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/publish-success-panel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/query-param-editor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'slug' is defined but never used. Allowed unused args must match /^_/u.","line":119,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Fragment } from 'react';\nimport { z, ZodObject, ZodFirstPartyTypeKind } from 'zod';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectTrigger, SelectContent, SelectItem } from '@/components/ui/select';\nimport useTypedQueryParam from '@/hooks/useTypedQueryParam';\n\nfunction FieldRenderer({\n  keyPrefix,\n  fieldKey,\n  validator,\n}: {\n  keyPrefix: string;\n  fieldKey: string;\n  validator: any;\n}) {\n  const fullKey = keyPrefix ? `${keyPrefix}.${fieldKey}` : fieldKey;\n  const type = validator._def.typeName;\n  const enumValues = validator._def?.values;\n\n  const isArray = type === ZodFirstPartyTypeKind.ZodArray;\n  const innerType = isArray ? validator._def.type._def.typeName : null;\n\n  let queryType: any = 'string';\n  if (type === ZodFirstPartyTypeKind.ZodNumber || innerType === ZodFirstPartyTypeKind.ZodNumber)\n    queryType = isArray ? 'number[]' : 'number';\n  if (type === ZodFirstPartyTypeKind.ZodBoolean || innerType === ZodFirstPartyTypeKind.ZodBoolean)\n    queryType = isArray ? 'boolean[]' : 'boolean';\n  if (isArray) queryType = 'json[]';\n  if (type === ZodFirstPartyTypeKind.ZodObject) queryType = 'json';\n\n  const [value, setValue] = useTypedQueryParam(fullKey, isArray ? [] : {}, queryType);\n\n  if (type === ZodFirstPartyTypeKind.ZodObject) {\n    const nestedFields = Object.entries(validator.shape);\n    return (\n      <div className=\"border rounded p-4 space-y-2 bg-gray-50 dark:bg-gray-900\">\n        <Label className=\"text-xs uppercase tracking-wide text-muted-foreground\">{fieldKey}</Label>\n        {nestedFields.map(([nestedKey, nestedValidator]) => (\n          <FieldRenderer\n            key={nestedKey}\n            keyPrefix={fullKey}\n            fieldKey={nestedKey}\n            validator={nestedValidator}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  if (type === ZodFirstPartyTypeKind.ZodEnum && enumValues) {\n    return (\n      <div className=\"space-y-1\">\n        <Label htmlFor={fullKey}>{fieldKey}</Label>\n        <Select value={value as string} onValueChange={setValue}>\n          <SelectTrigger id={fullKey} />\n          <SelectContent>\n            {enumValues.map((v: string) => (\n              <SelectItem key={v} value={v}>\n                {v}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    );\n  }\n\n  if (type === ZodFirstPartyTypeKind.ZodBoolean) {\n    return (\n      <div className=\"space-y-1\">\n        <Label htmlFor={fullKey}>{fieldKey}</Label>\n        <Switch\n          id={fullKey}\n          checked={value === true || value === 'true'}\n          onCheckedChange={(v: boolean) => setValue(v)}\n        />\n      </div>\n    );\n  }\n\n  if (isArray) {\n    const asString = Array.isArray(value) ? value.join(', ') : '';\n    return (\n      <div className=\"space-y-1\">\n        <Label htmlFor={fullKey}>{fieldKey}</Label>\n        <Input\n          id={fullKey}\n          value={asString}\n          onChange={(e) => {\n            const raw = e.target.value;\n            const parsed = raw\n              .split(',')\n              .map((s) => s.trim())\n              .filter(Boolean);\n            setValue(parsed);\n          }}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-1\">\n      <Label htmlFor={fullKey}>{fieldKey}</Label>\n      <Input\n        id={fullKey}\n        type={queryType}\n        value={value as string}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default function QueryParamEditor({ schema, slug }: { schema: z.ZodSchema; slug: string }) {\n  const shape = (schema as ZodObject<any>).shape;\n  const fields = Object.entries(shape);\n\n  return (\n    <div className=\"space-y-6\">\n      {fields.map(([key, validator]) => (\n        <Fragment key={key}>\n          <FieldRenderer keyPrefix=\"\" fieldKey={key} validator={validator} />\n        </Fragment>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/referral-link.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'email' is assigned a value but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nexport default function ReferralLink() {\n  const [email, setEmail] = useState('');\n  const [userId, setUserId] = useState('');\n\n  useEffect(() => {\n    supabase.auth.getUser().then(({ data }) => {\n      setEmail(data?.user?.email || '');\n      setUserId(data?.user?.id || '');\n    });\n  }, []);\n\n  const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';\n  const link = `${baseUrl}/register?ref=${userId}`;\n\n  return (\n    <div className=\"text-white text-sm bg-gray-800 p-4 rounded mt-6\">\n      <p className=\"mb-1\">Referral Link:</p>\n      <input\n        value={link}\n        readOnly\n        className=\"w-full bg-gray-700 px-3 py-1 border border-gray-600 rounded text-xs\"\n        onClick={(e) => (e.target as HTMLInputElement).select()}\n      />\n      <p className=\"text-xs text-gray-400 mt-1\">\n        Share this to invite resellers and earn 10% recurring.\n      </p>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/responsive-admin-layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NavBarWithBadges' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport MobileDrawerSidebar from '@/components/admin/mobile-drawer-sidebar';\nimport NavBarWithBadges from '@/components/admin/nav-bar-with-badges';\nimport AdminSidebarLayout from '@/components/admin/layout/admin-sidebar-layout';\nimport AppHeader from '@/components/admin/AppHeader/app-header';\nimport { useCurrentUser } from '@/hooks/useCurrentUser';\nimport { useCanonicalRole } from '@/hooks/useCanonicalRole';\n\nexport default function ResponsiveAdminLayout({ children }: { children: React.ReactNode }) {\n  const [isMobile, setIsMobile] = useState(false);\n  const { user, ready } = useCurrentUser();\n  const { role } = useCanonicalRole();\n\n  useEffect(() => {\n    const checkSize = () => setIsMobile(window.innerWidth < 768);\n    checkSize();\n    window.addEventListener('resize', checkSize);\n    return () => window.removeEventListener('resize', checkSize);\n  }, []);\n\n  if (!ready || !user) {\n    return <div className=\"p-6 text-white\">Loading user session...</div>;\n  }\n\n  return (\n    <>\n      <AppHeader user={user} role={role || ''} />\n      {isMobile ? (\n        <>\n          <MobileDrawerSidebar />\n          <div className=\"pt-20 px-4\">{children}</div>\n        </>\n      ) : (\n        <div className=\"flex\">\n          <AdminSidebarLayout>\n            <div className=\"w-full\">\n              <main className=\"p-6\">{children}</main>\n            </div>\n          </AdminSidebarLayout>\n        </div>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/revenue-estimator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/role-badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/role-manager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/safe-supabase-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/session-log-viewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/settings-schema.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/share-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/sidebar.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/site-preview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/site-settings-panel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'siteId'. Either include it or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [siteId, slug]","fix":{"range":[2330,2336],"text":"[siteId, slug]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { useRouter } from 'next/navigation';\nimport { Tooltip, TooltipTrigger, TooltipContent } from '@/components/ui/tooltip';\nimport { ClipboardCopy } from 'lucide-react';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function SiteSettingsPanel({ siteId }: { siteId: string }) {\n  const router = useRouter();\n  const [bizName, setBizName] = useState('');\n  const [location, setLocation] = useState('');\n  const [slug, setSlug] = useState('');\n  const [slugAvailable, setSlugAvailable] = useState<boolean | null>(null);\n  const [colorScheme, setColorScheme] = useState('');\n  const [isPublished, setIsPublished] = useState(false);\n  const [customDomain, setCustomDomain] = useState('');\n  const [analytics, setAnalytics] = useState<{ visits: number } | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [seoTitle, setSeoTitle] = useState('');\n  const [seoDescription, setSeoDescription] = useState('');\n  const [twitterHandle, setTwitterHandle] = useState('');\n  const [siteName, setSiteName] = useState('');\n\n  useEffect(() => {\n    if (!siteId) return;\n    (async () => {\n      const { data, error } = await supabase\n        .from('sites')\n        .select('*')\n        .eq('id', siteId)\n        .maybeSingle();\n\n      if (!error && data) {\n        setBizName(data.business_name || '');\n        setLocation(data.location || '');\n        setSlug(data.slug || '');\n        setColorScheme(data.color_scheme || '');\n        setIsPublished(data.published || false);\n        setCustomDomain(data.custom_domain || '');\n        setSeoTitle(data.seo_title || '');\n        setSeoDescription(data.seo_description || '');\n        setTwitterHandle(data.twitter_handle || '');\n        setSiteName(data.site_name || '');\n      }\n    })();\n  }, [siteId]);\n\n  useEffect(() => {\n    if (!slug) return setSlugAvailable(null);\n    const delay = setTimeout(async () => {\n      const { data } = await supabase\n        .from('sites')\n        .select('id')\n        .eq('slug', slug)\n        .not('id', 'eq', siteId)\n        .maybeSingle();\n      setSlugAvailable(!data);\n    }, 300);\n    return () => clearTimeout(delay);\n  }, [slug]);\n\n  useEffect(() => {\n    if (!siteId) return;\n    (async () => {\n      const { count, error } = await supabase\n        .from('site_visits')\n        .select('*', { count: 'exact', head: true })\n        .eq('site_id', siteId);\n      if (!error) setAnalytics({ visits: count || 0 });\n    })();\n  }, [siteId]);\n\n  const saveSettings = async () => {\n    if (!slugAvailable) return alert('Slug not available.');\n    const { error } = await supabase\n      .from('sites')\n      .update({\n        business_name: bizName,\n        location,\n        slug,\n        color_scheme: colorScheme,\n        published: isPublished,\n        custom_domain: customDomain,\n        seo_title: seoTitle,\n        seo_description: seoDescription,\n        twitter_handle: twitterHandle,\n        site_name: siteName,\n      })\n      .eq('id', siteId);\n    if (error) alert('❌ Save failed.');\n    else alert('✅ Settings saved!');\n  };\n\n  const duplicateSite = async () => {\n    const newSlug = prompt('New slug for duplicate site:');\n    if (!newSlug) return;\n    const { data: original, error } = await supabase\n      .from('sites')\n      .select('*')\n      .eq('id', siteId)\n      .maybeSingle();\n    if (error || !original) return alert('❌ Fetch failed');\n    const { error: createError } = await supabase.from('sites').insert({\n      ...original,\n      slug: newSlug,\n      published: false,\n      created_at: new Date().toISOString(),\n    });\n    if (createError) alert('❌ Duplicate failed');\n    else {\n      alert('✅ Duplicated!');\n      router.push(`/edit/${newSlug}`);\n    }\n  };\n\n  const deleteSite = async () => {\n    if (!confirm('Are you sure? This cannot be undone.')) return;\n    setLoading(true);\n    const { error } = await supabase.from('sites').delete().eq('id', siteId);\n    if (error) alert('❌ Delete failed');\n    else router.push('/dashboard');\n  };\n\n  const handleUpload = async (file: File, key: string) => {\n    const { error } = await supabase.storage.from('site-assets').upload(`${siteId}/${key}`, file, {\n      cacheControl: '3600',\n      upsert: true,\n    });\n    if (error) alert('❌ Upload failed');\n    else alert(`${key} uploaded!`);\n  };\n\n  console.log('✅ SiteSettingsPanel mounted with siteId:', siteId);\n  //   return (\n  //     <div className=\"bg-red-600 text-white p-6 text-center rounded-lg\">\n  //       <p>🔥 Settings panel loaded for site: {siteId}</p>\n  //     </div>\n  //   );\n\n  return (\n    <div className=\"flex flex-col h-full space-y-6 bg-zinc-900 overflow-y-auto rounded border border-zinc-700 p-6\">\n      <h2 className=\"text-xl font-semibold text-white\">Site Settings</h2>\n\n      <fieldset className=\"space-y-4\">\n        <legend className=\"text-sm font-medium text-zinc-400 mb-2\">Basic Info</legend>\n\n        <div>\n          <label className=\"block text-sm font-medium text-zinc-300 mb-1\">Business Name</label>\n          <input\n            value={bizName}\n            onChange={(e) => setBizName(e.target.value)}\n            className=\"w-full p-2 bg-zinc-900 border border-zinc-700 rounded\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-zinc-300 mb-1\">Location</label>\n          <input\n            value={location}\n            onChange={(e) => setLocation(e.target.value)}\n            className=\"w-full p-2 bg-zinc-900 border border-zinc-700 rounded\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-zinc-300 mb-1\">Slug</label>\n          <input\n            value={slug}\n            onChange={(e) => setSlug(e.target.value.toLowerCase().replace(/[^a-z0-9-]+/g, '-'))}\n            className=\"w-full p-2 bg-zinc-900 border border-zinc-700 rounded\"\n          />\n          {slug && slugAvailable !== null && (\n            <p className={`text-sm mt-1 ${slugAvailable ? 'text-green-400' : 'text-red-400'}`}>\n              {slugAvailable ? '✅ Available' : '🚫 Taken'}\n            </p>\n          )}\n          {isPublished && (customDomain || slug) && (\n            <div>\n              <label className=\"block text-sm font-medium text-zinc-300 mb-1\">Live URL</label>\n              <div className=\"flex items-center gap-3\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <a\n                      href={`https://${customDomain || `${slug}.quicksites.ai`}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      onClick={() => {\n                        console.log('🔍 Tracking: live site clicked');\n                        // TODO: Supabase.track(\"click_live_link\", { siteId })\n                      }}\n                      className=\"inline-flex items-center text-sm text-white bg-blue-600 hover:bg-blue-700 px-3 py-1.5 rounded transition\"\n                    >\n                      🔗 View Site\n                    </a>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    {customDomain\n                      ? `Your domain should point to a CNAME record: ${slug}.quicksites.ai`\n                      : `Visit your published site`}\n                  </TooltipContent>\n                </Tooltip>\n\n                {/* Copy button */}\n                <button\n                  onClick={async () => {\n                    const url = `https://${customDomain || `${slug}.quicksites.ai`}`;\n                    await navigator.clipboard.writeText(url);\n                    console.log('✅ Copied to clipboard:', url);\n                  }}\n                  className=\"p-1 rounded bg-zinc-800 hover:bg-zinc-700 text-white\"\n                  title=\"Copy to clipboard\"\n                >\n                  <ClipboardCopy className=\"w-4 h-4\" />\n                </button>\n\n                {customDomain && <span className=\"text-xs text-zinc-400\">(custom domain)</span>}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-zinc-300 mb-1\">Custom Domain</label>\n          <input\n            value={customDomain}\n            onChange={(e) => setCustomDomain(e.target.value)}\n            className=\"w-full p-2 bg-zinc-900 border border-zinc-700 rounded\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-zinc-300 mb-1\">Color Scheme</label>\n          <select\n            value={colorScheme}\n            onChange={(e) => setColorScheme(e.target.value)}\n            className=\"w-full p-2 bg-zinc-900 border border-zinc-700 rounded\"\n          >\n            <option value=\"\">Choose Color Scheme</option>\n            <option value=\"blue\">Blue</option>\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"dark\">Dark</option>\n          </select>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <input\n            type=\"checkbox\"\n            checked={isPublished}\n            onChange={() => setIsPublished(!isPublished)}\n          />\n          <label className=\"text-sm font-medium text-zinc-300\">Published</label>\n        </div>\n      </fieldset>\n      <fieldset className=\"space-y-4\">\n        <legend className=\"text-sm font-medium text-zinc-400 mb-2\">🔍 SEO Settings</legend>\n\n        <div>\n          <label className=\"block text-sm font-medium text-zinc-300 mb-1\">SEO Title</label>\n          <input\n            value={seoTitle}\n            onChange={(e) => setSeoTitle(e.target.value)}\n            className=\"w-full p-2 bg-zinc-900 border border-zinc-700 rounded\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-zinc-300 mb-1\">SEO Description</label>\n          <textarea\n            value={seoDescription}\n            onChange={(e) => setSeoDescription(e.target.value)}\n            className=\"w-full p-2 bg-zinc-900 border border-zinc-700 rounded\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-zinc-300 mb-1\">Twitter Handle</label>\n          <input\n            value={twitterHandle}\n            onChange={(e) => setTwitterHandle(e.target.value)}\n            placeholder=\"@yourhandle\"\n            className=\"w-full p-2 bg-zinc-900 border border-zinc-700 rounded\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-zinc-300 mb-1\">\n            Site Name (OpenGraph)\n          </label>\n          <input\n            value={siteName}\n            onChange={(e) => setSiteName(e.target.value)}\n            className=\"w-full p-2 bg-zinc-900 border border-zinc-700 rounded\"\n          />\n        </div>\n      </fieldset>\n\n      <fieldset className=\"space-y-4\">\n        <legend className=\"text-sm font-medium text-zinc-400 mb-2\">Assets</legend>\n\n        <div>\n          <label className=\"block text-sm font-medium text-zinc-300 mb-1\">Favicon Upload</label>\n          <input\n            type=\"file\"\n            onChange={(e) => e.target.files?.[0] && handleUpload(e.target.files[0], 'favicon.png')}\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-zinc-300 mb-1\">Logo Upload</label>\n          <input\n            type=\"file\"\n            onChange={(e) => e.target.files?.[0] && handleUpload(e.target.files[0], 'logo.png')}\n          />\n        </div>\n      </fieldset>\n\n      {analytics && (\n        <div className=\"text-sm text-zinc-400\">📊 {analytics.visits} visits recorded</div>\n      )}\n\n      <div className=\"flex justify-between pt-4 border-t border-zinc-700 mt-4\">\n        <button\n          onClick={duplicateSite}\n          disabled={loading}\n          className=\"bg-yellow-600 px-3 py-2 rounded text-white\"\n        >\n          📦 Duplicate\n        </button>\n        <button\n          onClick={deleteSite}\n          disabled={loading}\n          className=\"bg-red-600 px-3 py-2 rounded text-white\"\n        >\n          🗑 Delete\n        </button>\n        <button\n          onClick={saveSettings}\n          disabled={loading}\n          className=\"bg-blue-600 px-3 py-2 rounded text-white\"\n        >\n          💾 Save\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/smart-link-context.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/smart-link-debug.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/smart-link-gallery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/smart-link-grid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/smart-link-home-page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/smart-link-meta.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/smart-link-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/smart-link.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/tag-filter-controls.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/TagFilterControls.tsx\nimport { useEffect, useState } from 'react';\n\nexport default function TagFilterControls({\n  tagFilter,\n  setTagFilter,\n  tagMatchMode,\n  setTagMatchMode,\n  allTags,\n}: {\n  tagFilter: string[];\n  setTagFilter: (tags: string[]) => void;\n  tagMatchMode: 'any' | 'all';\n  setTagMatchMode: (mode: 'any' | 'all') => void;\n  allTags: [string, number][];\n}) {\n  const [manualTag, setManualTag] = useState('');\n\n  const addManualTag = () => {\n    const newTag = manualTag.trim().toLowerCase();\n    if (newTag && !tagFilter.includes(newTag)) {\n      const next = [...tagFilter, newTag];\n      setTagFilter(next);\n      updateTagURL(next);\n    }\n    setManualTag('');\n  };\n\n  const updateTagURL = (tags: string[]) => {\n    const url = new URL(window.location.href);\n    if (tags.length > 0) url.searchParams.set('tags', tags.join(','));\n    else url.searchParams.delete('tags');\n    window.history.replaceState({}, '', url.toString());\n  };\n\n  const toggleTag = (tag: string) => {\n    const lower = tag.toLowerCase();\n    if (!tagFilter.includes(lower)) {\n      const next = [...tagFilter, lower];\n      setTagFilter(next);\n      updateTagURL(next);\n    }\n  };\n\n  const removeTag = (tag: string) => {\n    const next = tagFilter.filter((t) => t !== tag);\n    setTagFilter(next);\n    updateTagURL(next);\n  };\n\n  const toggleMode = () => {\n    const next = tagMatchMode === 'all' ? 'any' : 'all';\n    setTagMatchMode(next);\n    const url = new URL(window.location.href);\n    url.searchParams.set('tagMode', next);\n    window.history.replaceState({}, '', url.toString());\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"text-sm font-medium\">Filter by Tag:</label>\n      <input\n        type=\"text\"\n        value={tagFilter.join(', ')}\n        onChange={(e) => {\n          const next = e.target.value\n            .split(',')\n            .map((t) => t.trim().toLowerCase())\n            .filter(Boolean);\n          setTagFilter(next);\n          updateTagURL(next);\n        }}\n        placeholder=\"e.g. cold, social\"\n        className=\"border px-2 py-1 rounded w-full\"\n      />\n\n      {tagFilter.length > 0 && (\n        <div className=\"flex flex-wrap gap-1 mt-1\">\n          {tagFilter.map((tag, i) => (\n            <button\n              key={i}\n              onClick={() => removeTag(tag)}\n              className=\"bg-blue-100 text-blue-800 text-xs px-2 py-0.5 rounded hover:bg-blue-200\"\n            >\n              #{tag} ✕\n            </button>\n          ))}\n        </div>\n      )}\n\n      <div className=\"flex gap-2 items-center mt-2\">\n        <input\n          value={manualTag}\n          onChange={(e) => setManualTag(e.target.value)}\n          placeholder=\"Add tag...\"\n          className=\"border px-2 py-1 text-sm rounded\"\n        />\n        <button onClick={addManualTag} className=\"text-sm bg-blue-700 text-white px-3 py-1 rounded\">\n          + Add\n        </button>\n        <label\n          title=\"Click to toggle mode (or press 'm')\"\n          onClick={toggleMode}\n          className=\"text-xs font-semibold text-gray-700 cursor-pointer\"\n        >\n          Mode:{' '}\n          <span\n            className={`ml-1 font-bold ${tagMatchMode === 'any' ? 'text-indigo-500' : 'text-green-600'}`}\n          >\n            {tagMatchMode}\n          </span>\n        </label>\n        <select\n          value={tagMatchMode}\n          onChange={(e) => {\n            const mode = e.target.value as 'any' | 'all';\n            setTagMatchMode(mode);\n            const url = new URL(window.location.href);\n            url.searchParams.set('tagMode', mode);\n            window.history.replaceState({}, '', url.toString());\n          }}\n          className={`text-xs border px-1 py-0.5 rounded text-white ${tagMatchMode === 'any' ? 'bg-indigo-500' : 'bg-green-600'}`}\n        >\n          <option value=\"all\">Match All</option>\n          <option value=\"any\">Match Any</option>\n        </select>\n      </div>\n\n      {allTags.length > 0 && (\n        <div className=\"space-y-1 mt-4\">\n          <span className=\"text-xs text-gray-500\">Suggestions (by frequency):</span>\n          <div className=\"flex flex-wrap gap-2\">\n            {allTags.map(([tag, count], i) => (\n              <button\n                key={i}\n                onClick={() => toggleTag(tag)}\n                className=\"bg-gray-100 text-gray-700 text-xs px-2 py-0.5 rounded hover:bg-gray-200\"\n              >\n                #{tag} ({count})\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/template-assigner.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setUserId' is assigned a value but never used.","line":13,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport { Button } from '@/components/ui/button';\n\ntype Template = { id: string; name: string };\n\nexport default function TemplateAssigner() {\n  const [templates, setTemplates] = useState<Template[]>([]);\n  const [email, setEmail] = useState('');\n  const [selected, setSelected] = useState('');\n  const [userId, setUserId] = useState<string | null>(null);\n\n  useEffect(() => {\n    (async () => {\n      const { data, error } = await supabase\n        .from('dashboard_layout_templates')\n        .select('id, name')\n        .order('created_at', { ascending: false });\n\n      if (error) console.error('Error fetching templates:', error);\n      setTemplates(data || []);\n    })();\n  }, []);\n\n  const fetchUserId = async () => {\n    const { data: user, error } = await supabase\n      .from('users')\n      .select('id')\n      .eq('email', email)\n      .single();\n\n    if (error || !user) {\n      alert('User not found');\n      return null;\n    }\n\n    return user.id as string;\n  };\n\n  const assignTemplate = async () => {\n    if (!selected || !email) {\n      alert('Please provide both an email and a template');\n      return;\n    }\n\n    const id = await fetchUserId();\n    if (!id) return;\n\n    await supabase.from('dashboard_user_layouts').upsert({ user_id: id, template_id: selected });\n\n    alert('✅ Template assigned!');\n  };\n\n  return (\n    <div className=\"p-4 border rounded bg-white shadow max-w-xl mt-8\">\n      <h2 className=\"text-lg font-semibold mb-3\">Assign Template to User</h2>\n      <div className=\"flex flex-col gap-3\">\n        <input\n          placeholder=\"User email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className=\"border p-2 text-sm\"\n        />\n        <select\n          className=\"border p-2 text-sm\"\n          value={selected}\n          onChange={(e) => setSelected(e.target.value)}\n        >\n          <option value=\"\">Select template</option>\n          {templates.map((tpl) => (\n            <option key={tpl.id} value={tpl.id}>\n              {tpl.name}\n            </option>\n          ))}\n        </select>\n        <Button onClick={assignTemplate}>Assign</Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/template-browser.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selected' is assigned a value but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { Dialog, DialogTrigger, DialogContent } from '@/components/ui/dialog';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport SafeLink from '@/components/ui/safe-link';\n\ntype Template = {\n  template_name: string;\n  industry: string;\n  layout: string;\n  color_scheme: string;\n  data?: any;\n};\n\ntype Props = {\n  onSelect: (templateName: string) => void;\n};\n\nexport default function TemplateBrowser({ onSelect }: Props) {\n  const [templates, setTemplates] = useState<Template[]>([]);\n  const [selected, setSelected] = useState<Template | null>(null);\n\n  useEffect(() => {\n    fetch('/api/templates/full') // load full data for preview\n      .then((res) => res.json())\n      .then((data) => setTemplates(data))\n      .catch(console.error);\n  }, []);\n\n  return (\n    <>\n      <ScrollArea className=\"h-[500px] w-full p-4\">\n        <div className=\"grid gap-4 sm:grid-cols-2 md:grid-cols-3\">\n          {templates.map((t) => (\n            <Card key={t.template_name} className=\"p-3\">\n              <CardContent className=\"space-y-2\">\n                <h3 className=\"text-lg font-bold\">{t.template_name}</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Industry: {t.industry}\n                  <br />\n                  Layout: {t.layout}\n                  <br />\n                  Colors: {t.color_scheme}\n                </p>\n                <div className=\"flex gap-2\">\n                  <Button size=\"sm\" onClick={() => onSelect(t.template_name)}>\n                    Use\n                  </Button>\n                  <Dialog>\n                    <DialogTrigger asChild>\n                      <Button size=\"sm\" variant=\"secondary\" onClick={() => setSelected(t)}>\n                        Preview\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-xl\">\n                      <h4 className=\"text-xl font-semibold\">{t.template_name}</h4>\n                      <p className=\"text-sm text-muted-foreground mb-2\">\n                        Layout: {t.layout}, Colors: {t.color_scheme}\n                      </p>\n                      <ul className=\"text-sm space-y-1\">\n                        {t.data?.pages.map((page: any) => (\n                          <li key={page.slug}>\n                            <strong>{page.slug}</strong>: {page.title}\n                          </li>\n                        ))}\n                      </ul>\n                      <hr className=\"my-2\" />\n                      <p className=\"italic text-xs\">\n                        Hero: {t.data?.pages[0]?.content_blocks?.[0]?.headline}\n                      </p>\n                      <div className=\"flex justify-end gap-2 mt-4\">\n                        <SafeLink href={`/admin/templates-new?copy=${t.template_name}`}>\n                          <Button variant=\"secondary\" size=\"sm\">\n                            Duplicate This\n                          </Button>\n                        </SafeLink>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </ScrollArea>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/template-user-viewer.filtered.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Template' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedTemplate' is assigned a value but never used.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedTemplate' is assigned a value but never used.","line":17,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport { Button } from '@/components/ui/button';\nimport { Template } from '@/types/template';\n\nexport default function TemplateUserViewer() {\n  type Assignment = {\n    user_id: string;\n    email: string;\n    template_id: string;\n    template: string;\n  };\n  type TemplateOption = { id: string; name: string };\n  const [templates, setTemplates] = useState<TemplateOption[]>([]);\n  const [selectedTemplate, setSelectedTemplate] = useState<string>('');\n  const [assignments, setAssignments] = useState<Assignment[]>([]);\n  const [filtered, setFiltered] = useState<Assignment[]>([]);\n  const [search, setSearch] = useState('');\n  const [filterTemplate, setFilterTemplate] = useState('');\n  const [selected, setSelected] = useState('');\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    setFiltered(\n      assignments.filter(\n        (a) =>\n          (!search || a.email.toLowerCase().includes(search.toLowerCase())) &&\n          (!filterTemplate || a.template === filterTemplate)\n      )\n    );\n  }, [search, filterTemplate, assignments]);\n\n  const loadData = async () => {\n    const { data: map } = await supabase\n      .from('dashboard_user_layouts')\n      .select('user_id, template_id');\n\n    const { data: users } = await supabase.from('auth.users').select('id, email');\n\n    const { data: templates } = await supabase\n      .from('dashboard_layout_templates')\n      .select('id, name');\n\n    const joined =\n      map?.map((row) => ({\n        user_id: row.user_id,\n        email: users?.find((u) => u.id === row.user_id)?.email || '—',\n        template_id: row.template_id,\n        template: templates?.find((t) => t.id === row.template_id)?.name || '(deleted)',\n      })) || [];\n\n    setAssignments(joined);\n    setTemplates(templates || []);\n    setFiltered(joined);\n  };\n\n  const bulkAssign = async () => {\n    const { data: users } = await supabase.from('auth.users').select('id');\n    const inserts = users?.map((u) => ({\n      user_id: u.id,\n      template_id: selected,\n    }));\n    await supabase.from('dashboard_user_layouts').upsert(inserts || []);\n    loadData();\n    alert('All users assigned!');\n  };\n\n  const revertUser = async (user_id: string) => {\n    await supabase.from('dashboard_user_layouts').delete().eq('user_id', user_id);\n    loadData();\n  };\n\n  return (\n    <div className=\"p-4 border rounded bg-white shadow max-w-3xl mt-8\">\n      <h2 className=\"text-lg font-semibold mb-3\">User → Template Assignments</h2>\n\n      <div className=\"flex flex-wrap gap-3 items-center mb-4\">\n        <input\n          type=\"text\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          placeholder=\"Search user email...\"\n          className=\"border p-2 text-sm\"\n        />\n        <select\n          value={filterTemplate}\n          onChange={(e) => setFilterTemplate(e.target.value)}\n          className=\"border p-2 text-sm\"\n        >\n          <option value=\"\">All templates</option>\n          {templates.map((tpl) => (\n            <option key={tpl.id} value={tpl.name}>\n              {tpl.name}\n            </option>\n          ))}\n        </select>\n        <select\n          value={selected}\n          onChange={(e) => setSelected(e.target.value)}\n          className=\"border p-2 text-sm\"\n        >\n          <option value=\"\">Select template to assign all</option>\n          {templates.map((tpl) => (\n            <option key={tpl.id} value={tpl.id}>\n              {tpl.name}\n            </option>\n          ))}\n        </select>\n        <Button onClick={bulkAssign}>Assign to All</Button>\n      </div>\n\n      <table className=\"w-full text-sm border\">\n        <thead className=\"bg-gray-100\">\n          <tr>\n            <th className=\"text-left p-2\">User Email</th>\n            <th className=\"text-left p-2\">Template</th>\n            <th className=\"text-left p-2\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filtered.map((a) => (\n            <tr key={a.user_id} className=\"border-b\">\n              <td className=\"p-2\">{a.email}</td>\n              <td className=\"p-2\">{a.template}</td>\n              <td className=\"p-2\">\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => revertUser(a.user_id)}>\n                  Revert\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/template-user-viewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/block-editor-modal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BlockEditorModalProps' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport { BlocksEditor } from '@/components/admin/templates/blocks-editor';\nimport toast from 'react-hot-toast';\nimport { Button } from '@/components/ui/button';\nimport { BlockEditorModalProps } from '@/types/blocks';\n\nconst schemaHints: Record<string, string> = {\n  type: 'Block type (e.g. hero, services)',\n  content: 'Main content object (text, image, etc.)',\n  style: 'Optional custom style or class',\n};\n\nexport default function BlockEditorModal({\n  open,\n  onClose,\n  block,\n  onSave,\n}: {\n  open: boolean;\n  onClose: () => void;\n  block: any;\n  onSave: (newBlock: any) => void;\n}) {\n  const [value, setValue] = useState<string>('');\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    setValue(JSON.stringify(block, null, 2));\n    setError(null);\n  }, [block]);\n\n  const handleSave = () => {\n    try {\n      const parsed = JSON.parse(value);\n      onSave(parsed);\n      toast.success('Block updated');\n      onClose();\n    } catch (e: any) {\n      setError(e.message || 'Invalid JSON');\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"bg-gray-900 text-white max-w-2xl max-h-screen overflow-y-auto\">\n        <h2 className=\"text-lg font-bold mb-2\">Edit Block JSON</h2>\n        <BlocksEditor\n          blocks={[\n            {\n              id: crypto.randomUUID(),\n              type: 'hero',\n              content: {\n                title: 'Hello',\n                description: 'World',\n              },\n            },\n          ]}\n          onChange={() => {}}\n        />\n        {error && <p className=\"text-sm text-red-400 mt-2\">{error}</p>}\n\n        <div className=\"mt-4\">\n          <p className=\"text-xs font-semibold text-gray-400\">Block Schema Tips:</p>\n          <ul className=\"text-xs mt-1 space-y-1 pl-4 list-disc text-gray-400\">\n            {Object.entries(schemaHints).map(([key, hint]) => (\n              <li key={key}>\n                <span className=\"text-white\">{key}:</span> {hint}\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"flex justify-end mt-6 gap-2\">\n          <Button variant=\"secondary\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleSave}>Save</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/block-editor.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":60,"column":25,"nodeType":"JSXOpeningElement","endLine":60,"endColumn":91}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// BlockEditor.tsx\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Trash2 } from 'lucide-react';\n\ntype Block = {\n  id: string;\n  type: string;\n  [key: string]: any;\n};\n\ntype Props = {\n  block: Block;\n  onChange: (block: Block) => void;\n};\n\nexport default function BlockEditor({ block, onChange }: Props) {\n  const updateField = (key: string, value: any) => {\n    onChange({ ...block, [key]: value });\n  };\n\n  const updateListItem = (index: number, value: string) => {\n    const items = [...(block.items || [])];\n    items[index] = value;\n    updateField('items', items);\n  };\n\n  const addListItem = () => {\n    const items = [...(block.items || []), ''];\n    updateField('items', items);\n  };\n\n  const deleteListItem = (index: number) => {\n    const items = [...(block.items || [])];\n    items.splice(index, 1);\n    updateField('items', items);\n  };\n\n  switch (block.type) {\n    case 'text':\n      return (\n        <div>\n          <Label>Text</Label>\n          <Textarea\n            value={block.value || ''}\n            onChange={(e) => updateField('value', e.target.value)}\n          />\n        </div>\n      );\n\n    case 'image':\n      return (\n        <div className=\"space-y-2\">\n          <Label>Image URL</Label>\n          <Input value={block.url || ''} onChange={(e) => updateField('url', e.target.value)} />\n          <Label>Alt Text</Label>\n          <Input value={block.alt || ''} onChange={(e) => updateField('alt', e.target.value)} />\n          {block.url && <img src={block.url} alt={block.alt} className=\"w-full rounded\" />}\n        </div>\n      );\n\n    case 'cta':\n      return (\n        <div className=\"space-y-2\">\n          <Label>CTA Label</Label>\n          <Input value={block.label || ''} onChange={(e) => updateField('label', e.target.value)} />\n          <Label>Link</Label>\n          <Input value={block.link || ''} onChange={(e) => updateField('link', e.target.value)} />\n        </div>\n      );\n\n    case 'quote':\n      return (\n        <div className=\"space-y-2\">\n          <Label>Quote</Label>\n          <Textarea\n            value={block.text || ''}\n            onChange={(e) => updateField('text', e.target.value)}\n          />\n          <Label>Attribution</Label>\n          <Input\n            value={block.attribution || ''}\n            onChange={(e) => updateField('attribution', e.target.value)}\n          />\n        </div>\n      );\n\n    case 'video':\n      return (\n        <div className=\"space-y-2\">\n          <Label>Embed URL (YouTube, Vimeo...)</Label>\n          <Input\n            value={block.embed_url || ''}\n            onChange={(e) => updateField('embed_url', e.target.value)}\n          />\n          <Label>Caption</Label>\n          <Input\n            value={block.caption || ''}\n            onChange={(e) => updateField('caption', e.target.value)}\n          />\n          {block.embed_url && (\n            <iframe src={block.embed_url} className=\"w-full aspect-video rounded\" allowFullScreen />\n          )}\n        </div>\n      );\n\n    case 'divider':\n      return <div className=\"my-4 border-t border-muted\" />;\n\n    case 'list':\n      return (\n        <div className=\"space-y-2\">\n          <Label>List Items</Label>\n          {(block.items || []).map((item: string, i: number) => (\n            <div key={i} className=\"flex gap-2 items-center\">\n              <Input value={item} onChange={(e) => updateListItem(i, e.target.value)} />\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => deleteListItem(i)}>\n                <Trash2 className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          ))}\n          <Button onClick={addListItem} variant=\"outline\" size=\"sm\">\n            <Plus className=\"w-4 h-4 mr-2\" /> Add Item\n          </Button>\n        </div>\n      );\n\n    default:\n      return (\n        <div className=\"text-sm text-muted-foreground\">Unsupported block type: {block.type}</div>\n      );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/block-sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BlockSidebarProps' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// BlockSidebar.tsx\nimport { useState } from 'react';\nimport { X } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport {\n  Block,\n  HeroBlockContent,\n  ServicesBlockContent,\n  TestimonialBlockContent,\n  TextBlockContent,\n  CtaBlockContent,\n  QuoteBlockContent,\n  BlockSidebarProps,\n} from '@/types/blocks';\n\ntype Props = {\n  block: Block;\n  onChange: (block: Block) => void;\n  onClose: () => void;\n};\n\nconst blockTypes = ['hero', 'services', 'testimonial', 'text', 'cta', 'quote'];\n\nexport default function BlockSidebar({ block, onChange, onClose }: Props) {\n  if (!block) return null;\n\n  const updateContent = (key: string, value: any) => {\n    const updatedContent = { ...(block.content || {}), [key]: value };\n    onChange({ ...block, content: updatedContent });\n  };\n\n  const inputClass = 'bg-zinc-800 border-zinc-700 text-white placeholder-zinc-400';\n\n  const content = block.content || {};\n\n  return (\n    <div className=\"fixed right-0 top-0 h-full w-[340px] bg-zinc-900 text-white shadow-lg border-l border-zinc-800 z-50 p-4 space-y-4 overflow-y-auto\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-lg font-semibold capitalize\">{block.type || 'Block'} Block</h2>\n        <Button variant=\"ghost\" onClick={onClose}>\n          <X className=\"w-4 h-4 text-white\" />\n        </Button>\n      </div>\n\n      <div>\n        <Label>Block Type</Label>\n        <select\n          value={block.type}\n          onChange={(e) => onChange({ ...block, type: e.target.value })}\n          className=\"w-full mt-1 rounded bg-zinc-800 text-white border border-zinc-700 px-2 py-1\"\n        >\n          {blockTypes.map((t) => (\n            <option key={t} value={t}>\n              {t.charAt(0).toUpperCase() + t.slice(1)}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {block.type === 'hero' && (\n        <>\n          <Label>Headline</Label>\n          <Input\n            className={inputClass}\n            value={(content as HeroBlockContent).headline || ''}\n            onChange={(e) => updateContent('headline', e.target.value)}\n          />\n          <Label>Subheadline</Label>\n          <Input\n            className={inputClass}\n            value={(content as HeroBlockContent).subheadline || ''}\n            onChange={(e) => updateContent('subheadline', e.target.value)}\n          />\n          <Label>CTA Text</Label>\n          <Input\n            className={inputClass}\n            value={(content as HeroBlockContent).cta_text || ''}\n            onChange={(e) => updateContent('cta_text', e.target.value)}\n          />\n          <Label>CTA Link</Label>\n          <Input\n            className={inputClass}\n            value={(content as HeroBlockContent).cta_link || ''}\n            onChange={(e) => updateContent('cta_link', e.target.value)}\n          />\n        </>\n      )}\n\n      {block.type === 'services' && (\n        <>\n          <Label>Service Items (comma-separated)</Label>\n          <Textarea\n            className={inputClass}\n            value={(content as ServicesBlockContent).items?.join(', ') || ''}\n            onChange={(e) =>\n              updateContent(\n                'items',\n                e.target.value.split(',').map((s) => s.trim())\n              )\n            }\n          />\n        </>\n      )}\n\n      {block.type === 'testimonial' && (\n        <>\n          <Label>Quote</Label>\n          <Textarea\n            className={inputClass}\n            value={(content as TestimonialBlockContent).quote || ''}\n            onChange={(e) => updateContent('quote', e.target.value)}\n          />\n          <Label>Attribution</Label>\n          <Input\n            className={inputClass}\n            value={(content as TestimonialBlockContent).attribution || ''}\n            onChange={(e) => updateContent('attribution', e.target.value)}\n          />\n        </>\n      )}\n\n      {block.type === 'text' && (\n        <>\n          <Label>Text</Label>\n          <Textarea\n            className={inputClass}\n            value={(content as TextBlockContent).value || ''}\n            onChange={(e) => updateContent('value', e.target.value)}\n          />\n        </>\n      )}\n\n      {block.type === 'cta' && (\n        <>\n          <Label>Label</Label>\n          <Input\n            className={inputClass}\n            value={(content as CtaBlockContent).label || ''}\n            onChange={(e) => updateContent('label', e.target.value)}\n          />\n          <Label>Link</Label>\n          <Input\n            className={inputClass}\n            value={(content as CtaBlockContent).link || ''}\n            onChange={(e) => updateContent('link', e.target.value)}\n          />\n        </>\n      )}\n\n      {block.type === 'quote' && (\n        <>\n          <Label>Quote</Label>\n          <Textarea\n            className={inputClass}\n            value={(content as QuoteBlockContent).text || ''}\n            onChange={(e) => updateContent('text', e.target.value)}\n          />\n          <Label>Attribution</Label>\n          <Input\n            className={inputClass}\n            value={(content as QuoteBlockContent).attribution || ''}\n            onChange={(e) => updateContent('attribution', e.target.value)}\n          />\n        </>\n      )}\n\n      {!blockTypes.includes(block.type) && (\n        <div className=\"text-sm text-muted-foreground\">\n          Unsupported block type: <code>{block.type}</code>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/blocks-editor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/branding-preview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":42,"column":11,"nodeType":"JSXOpeningElement","endLine":42,"endColumn":85}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\n\ntype BrandingProfile = {\n  id: string;\n  name: string;\n  theme: 'light' | 'dark';\n  brand: 'green' | 'blue' | 'red';\n  accent_color?: string;\n  logo_url?: string;\n};\n\nconst THEMES = {\n  dark: {\n    background: '#1e293b',\n    foreground: 'white',\n    border: '#334155',\n  },\n  light: {\n    background: '#f1f5f9',\n    foreground: '#0f172a',\n    border: '#cbd5e1',\n  },\n};\n\nexport default function BrandingPreview({ profile }: { profile: BrandingProfile | null }) {\n  if (!profile) return null;\n\n  const theme = THEMES[profile.theme] || THEMES.dark;\n\n  return (\n    <div\n      className=\"rounded border p-4 mt-2\"\n      style={{\n        backgroundColor: theme.background,\n        color: theme.foreground,\n        borderColor: theme.border,\n      }}\n    >\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"font-semibold text-lg\">{profile.name}</h3>\n        {profile.logo_url && (\n          <img src={profile.logo_url} alt=\"Logo\" className=\"h-8 w-8 rounded-full\" />\n        )}\n      </div>\n      <p className=\"text-sm mt-1\">\n        Theme: <strong>{profile.theme}</strong> &nbsp;|&nbsp; Brand:{' '}\n        <strong>{profile.brand}</strong>\n      </p>\n      {profile.accent_color && (\n        <div className=\"mt-2\">\n          <span className=\"text-xs\">Accent:</span>\n          <div\n            className=\"inline-block ml-2 w-4 h-4 rounded-full border\"\n            style={{ backgroundColor: profile.accent_color }}\n          ></div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/device-preview-wrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/grouped-preview.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":39,"column":13,"nodeType":"JSXOpeningElement","endLine":44,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export function GroupedPreview({\n  branding,\n  snapshotId,\n  label,\n  createdAt,\n}: {\n  branding: any;\n  snapshotId: string;\n  label: string;\n  createdAt: string;\n}) {\n  return (\n    <div>\n      <div className=\"text-sm text-gray-100\">\n        Snapshot: <code>{snapshotId}</code>\n      </div>\n      <div className=\"text-xs text-gray-400\">Label: {label || 'No label'}</div>\n      <div className=\"text-xs text-gray-500\">Published: {new Date(createdAt).toLocaleString()}</div>\n      <div className=\"text-xs mt-1\" style={{ fontFamily: branding?.font_family || 'sans-serif' }}>\n        Heading Preview in {branding?.font_family || 'Default'}\n      </div>\n      <div className=\"flex gap-2 mt-1 items-center\">\n        {branding?.primary_color && (\n          <span\n            className=\"inline-block w-4 h-4 rounded-full\"\n            style={{ backgroundColor: branding.primary_color }}\n            title={`Primary: ${branding.primary_color}`}\n          ></span>\n        )}\n        {branding?.secondary_color && (\n          <span\n            className=\"inline-block w-4 h-4 rounded-full\"\n            style={{ backgroundColor: branding.secondary_color }}\n            title={`Secondary: ${branding.secondary_color}`}\n          ></span>\n        )}\n        {branding?.id && (\n          <a href={`/branding/${branding.id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n            <img\n              src={`https://your-project-id.supabase.co/storage/v1/object/public/branding-logos/${branding.id}.png`}\n              alt=\"Logo preview\"\n              className=\"h-8 rounded shadow border\"\n              onError={(e) => (e.currentTarget.style.display = 'none')}\n            />\n          </a>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/mobile-preview-wrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/preview-export-button.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRef } from 'react';\nimport { toPng } from 'html-to-image';\nimport { Button } from '@/components/ui/button';\nimport toast from 'react-hot-toast';\n\nexport default function PreviewExportButton({\n  targetId = 'preview-target',\n  filename = 'template-preview.png',\n}: {\n  targetId?: string;\n  filename?: string;\n}) {\n  const handleExport = async () => {\n    const node = document.getElementById(targetId);\n    if (!node) {\n      toast.error('Preview target not found');\n      return;\n    }\n\n    try {\n      const dataUrl = await toPng(node, { cacheBust: true });\n      const link = document.createElement('a');\n      link.download = filename;\n      link.href = dataUrl;\n      link.click();\n      toast.success('Snapshot downloaded!');\n    } catch (error) {\n      toast.error('Failed to export preview');\n      console.error(error);\n    }\n  };\n\n  return (\n    <Button onClick={handleExport} size=\"sm\" variant=\"secondary\">\n      Download Snapshot\n    </Button>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/render-block.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":11,"column":9,"nodeType":"JSXOpeningElement","endLine":15,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/admin/templates/RenderBlock.tsx\nimport type { Block } from '@/types/block';\n\nexport default function RenderBlock({ block }: { block: Block }) {\n  switch (block.type) {\n    case 'text':\n      return <p className=\"mb-4 text-base text-gray-800\">{block.value}</p>;\n\n    case 'image':\n      return (\n        <img\n          src={block.value.url}\n          alt={block.value.alt}\n          className=\"mb-4 rounded shadow-md max-w-full\"\n        />\n      );\n\n    case 'video':\n      return (\n        <div className=\"mb-4\">\n          <video controls className=\"max-w-full rounded\">\n            <source src={block.value.url} />\n          </video>\n          {block.value.caption && (\n            <p className=\"text-sm text-gray-500 mt-1\">{block.value.caption}</p>\n          )}\n        </div>\n      );\n\n    case 'audio':\n      return (\n        <div className=\"mb-4\">\n          <iframe\n            className=\"w-full\"\n            style={{ height: 80 }}\n            src={block.value.url}\n            title={block.value.title || block.value.provider}\n            allow=\"autoplay; encrypted-media\"\n            loading=\"lazy\"\n          />\n        </div>\n      );\n\n    case 'quote':\n      return (\n        <blockquote className=\"border-l-4 pl-4 italic text-gray-600 mb-4\">\n          “{block.value.text}”\n          {block.value.author && (\n            <footer className=\"mt-1 text-sm text-right\">— {block.value.author}</footer>\n          )}\n        </blockquote>\n      );\n\n    case 'button':\n      return (\n        <a\n          href={block.value.href}\n          className={`inline-block px-4 py-2 rounded text-white text-sm mb-4\n            ${block.value.style === 'ghost' ? 'bg-transparent border' : block.value.style === 'secondary' ? 'bg-gray-600' : 'bg-blue-600'}`}\n        >\n          {block.value.label}\n        </a>\n      );\n\n    case 'grid':\n      return (\n        <div className={`grid grid-cols-${block.value.columns} gap-4 mb-4`}>\n          {block.value.items.map((b, i) => (\n            <RenderBlock key={i} block={b} />\n          ))}\n        </div>\n      );\n\n    default:\n      return null;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/reorderable-block-list.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useSortable' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CSS' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReorderableBlockListProps' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onBlockClick' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { useState } from 'react';\nimport TemplatePreview from './template-preview';\nimport { ReorderableBlockListProps } from '@/types/blocks';\n\n// type ReorderableBlockListProps = {\n//   data: any;\n//   colorScheme: string;\n//   onBlockClick?: (block: any) => void;\n//   onReorder: (updatedData: any) => void;\n// };\n\nexport default function ReorderableBlockList({\n  data,\n  colorScheme,\n  onBlockClick,\n  onReorder,\n}: {\n  data: any;\n  colorScheme: string;\n  onBlockClick?: (block: any) => void;\n  onReorder: (updatedData: any) => void;\n}) {\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor));\n\n  const [activePageIdx] = useState(0); // assuming only 1 page for now\n  const blocks = data?.pages?.[activePageIdx]?.content_blocks || [];\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragEnd={({ active, over }) => {\n        if (!over || active.id === over.id) return;\n        const oldIndex = blocks.findIndex((b: any) => b._id === active.id);\n        const newIndex = blocks.findIndex((b: any) => b._id === over.id);\n        const reordered = arrayMove(blocks, oldIndex, newIndex);\n        const updatedData = {\n          ...data,\n          pages: data.pages.map((p: any, i: number) =>\n            i === activePageIdx ? { ...p, content_blocks: reordered } : p\n          ),\n        };\n        onReorder(updatedData);\n      }}\n    >\n      <SortableContext items={blocks.map((b: any) => b._id)} strategy={verticalListSortingStrategy}>\n        <TemplatePreview\n          data={data}\n          colorScheme={colorScheme}\n          // onBlockClick={onBlockClick}\n        />\n      </SortableContext>\n    </DndContext>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/reorderable-page-list.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/save-share-buttons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/sortable-block-list.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/sortable-block.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/sortable-page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/tag-filter-dropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/tag-input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-action-toolbar.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'template?.published_at'. Either include it or remove the dependency array. If 'setStatus' needs the current value of 'template.published_at', you can also switch to useReducer instead of useState and read 'template.published_at' in the reducer.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [template?.published_at, template.template_name]","fix":{"range":[1091,1116],"text":"[template?.published_at, template.template_name]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'handleShare' and 'onSaveDraft'. Either include them or remove the dependency array. If 'onSaveDraft' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [handleShare, onSaveDraft, template]","fix":{"range":[1714,1724],"text":"[handleShare, onSaveDraft, template]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Button } from '@/components/ui/button';\nimport { saveAsTemplate } from '@/admin/lib/saveAsTemplate';\nimport { createSharedPreview } from '@/admin/lib/createSharedPreview';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport toast from 'react-hot-toast';\n\nexport default function TemplateActionToolbar({\n  template,\n  autosaveStatus,\n  onSaveDraft,\n}: {\n  template: any;\n  autosaveStatus?: string;\n  onSaveDraft?: () => void;\n}) {\n  const router = useRouter();\n  const [status, setStatus] = useState('Draft');\n  const [versions, setVersions] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (template?.template_name) {\n      supabase\n        .from('template_versions')\n        .select('id, commit_message, created_at')\n        .eq('template_name', template.template_name)\n        .order('created_at', { ascending: false })\n        .then(({ data }) => {\n          if (data) setVersions(data);\n        });\n\n      setStatus(template?.published_at ? 'Published' : 'Draft');\n    }\n  }, [template?.template_name]);\n\n  useEffect(() => {\n    const handleHotkey = (e: KeyboardEvent) => {\n      if (e.metaKey && e.key === 's') {\n        e.preventDefault();\n        onSaveDraft?.();\n      }\n      if (e.metaKey && e.shiftKey && e.key.toLowerCase() === 's') {\n        e.preventDefault();\n        handleShare();\n      }\n      if (e.metaKey && e.shiftKey && e.key.toLowerCase() === 'c') {\n        e.preventDefault();\n        toast.success('Copy preview (not implemented)');\n      }\n    };\n    window.addEventListener('keydown', handleHotkey);\n    return () => window.removeEventListener('keydown', handleHotkey);\n  }, [template]);\n\n  const handleSaveAs = async () => {\n    const newId = await saveAsTemplate(template);\n    if (newId) {\n      toast.success('Template copied');\n      router.push(`/admin/templates?selected=${newId}`);\n    } else {\n      toast.error('Failed to copy template');\n    }\n  };\n\n  const handleShare = async () => {\n    const id = await createSharedPreview(template.id);\n    if (id) {\n      toast.success('Preview shared!');\n      router.push(`/shared/${id}`);\n    } else {\n      toast.error('Share failed');\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-0 left-0 w-full z-40 border-t border-gray-700 bg-gray-900 px-6 py-3 flex justify-between items-center text-white\">\n      <div className=\"text-sm font-medium flex gap-4 items-center\">\n        <span>📄 {template.template_name}</span>\n        <span\n          className={`text-xs px-2 py-1 rounded ${\n            status === 'Published' ? 'bg-green-600' : 'bg-yellow-600'\n          }`}\n        >\n          {status}\n        </span>\n        {autosaveStatus && (\n          <span className=\"text-xs text-gray-400 italic\">💾 {autosaveStatus}</span>\n        )}\n      </div>\n\n      <div className=\"flex items-center gap-3\">\n        <select\n          className=\"bg-gray-800 border border-gray-600 text-sm text-white rounded px-2 py-1\"\n          onChange={(e) => toast(`Selected version: ${e.target.value}`)}\n        >\n          <option>View Version</option>\n          {versions.map((v) => (\n            <option key={v.id}>\n              {v.commit_message || 'Untitled'} — {new Date(v.created_at).toLocaleDateString()}\n            </option>\n          ))}\n        </select>\n\n        <Button size=\"sm\" variant=\"secondary\" onClick={onSaveDraft}>\n          Save Draft\n        </Button>\n        <Button size=\"sm\" variant=\"secondary\" onClick={handleSaveAs}>\n          Save As Template\n        </Button>\n        <Button size=\"sm\" variant=\"secondary\" onClick={handleShare}>\n          Share Snapshot\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-editor.branding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-editor.loader.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":50,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport function useTemplateLoader(templateName: string) {\n  const [template, setTemplate] = useState<any | null>(null);\n\n  useEffect(() => {\n    const loadTemplate = async () => {\n      const { data, error } = await supabase\n        .from('templates')\n        .select('*')\n        .eq('template_name', templateName)\n        .single();\n\n      if (error || !data) {\n        toast.error('Failed to load template from DB');\n        return;\n      }\n\n      const draftKey = `draft-${data.id}`;\n      const savedDraft = localStorage.getItem(draftKey);\n\n      if (savedDraft) {\n        try {\n          const parsed = JSON.parse(savedDraft);\n          if (parsed && parsed.pages && parsed.pages.length > 0) {\n            toast((t) => (\n              <span>\n                📝 A draft was found.\n                <button\n                  className=\"ml-2 underline text-blue-400\"\n                  onClick={() => {\n                    toast.dismiss(t.id);\n                    setTemplate({ ...data, data: parsed });\n                  }}\n                >\n                  Restore it?\n                </button>\n              </span>\n            ));\n            setTemplate({ ...data }); // Don't restore by default\n            return;\n          }\n        } catch (err) {\n          console.warn('Failed to parse draft JSON');\n        }\n      }\n\n      setTemplate(data);\n    };\n\n    loadTemplate();\n  }, [templateName]);\n\n  return template;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-editor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'sampleBlocks'. Either include it or remove the dependency array.","line":121,"column":6,"nodeType":"ArrayExpression","endLine":121,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [sampleBlocks, templateName]","fix":{"range":[3824,3838],"text":"[sampleBlocks, templateName]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// TemplateEditor.tsx (with logging + fallback JSON)\nimport { useEffect, useState } from 'react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { TemplateEditorBranding } from './template-editor.branding';\nimport TemplateSettingsPanel from './template-settings-panel';\nimport TemplatePageEditor from './template-page-editor';\nimport TemplateJsonEditor from './template-json-editor';\nimport TemplateHistory from './template-history';\nimport TemplatePreview from './template-preview';\nimport TemplateActionToolbar from './template-action-toolbar';\nimport TemplatePublishModal from './template-publish-modal';\nimport DevicePreviewWrapper from './device-preview-wrapper';\nimport { useAutosaveTemplate } from '@/hooks/useAutosaveTemplate';\nimport { Button } from '@/components/ui/button';\nimport { toast } from 'react-hot-toast';\nimport ImageUploader from '../admin/image-uploader';\nimport TemplateImageGallery from '../admin/template-image-gallery';\nimport type { Template } from '@/types/template';\nimport type { Block } from '@/types/blocks';\nimport { normalizeTemplate } from '@/admin/utils/normalizeTemplate';\nimport type { TemplateData } from '@/types/template';\n\nexport default function TemplateEditor({ templateName }: { templateName: string }) {\n  const [template, setTemplate] = useState<Template>({\n    name: templateName,\n    layout: 'default',\n    color_scheme: '',\n    commit: '',\n    industry: '',\n    theme: '',\n    brand: '',\n    data: { pages: [] },\n  });\n\n  const [rawJson, setRawJson] = useState('');\n  const [livePreviewData, setLivePreviewData] = useState({});\n  const [showPublishModal, setShowPublishModal] = useState(false);\n  const autosave = useAutosaveTemplate(template, rawJson);\n\n  const sampleBlocks: Block[] = [\n    {\n      type: 'text',\n      content: {\n        text: 'Welcome to the playground! This is a simple text block.',\n      },\n    },\n    {\n      type: 'image',\n      content: {\n        url: 'https://placekitten.com/800/400',\n        alt: 'A cute kitten',\n      },\n    },\n    {\n      type: 'video',\n      content: {\n        url: 'https://www.w3schools.com/html/mov_bbb.mp4',\n        caption: 'Example video',\n      },\n    },\n    {\n      type: 'audio',\n      content: {\n        provider: 'soundcloud',\n        url: 'https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/293',\n        title: 'Sound demo',\n      },\n    },\n    {\n      type: 'quote',\n      content: {\n        text: 'The best way to predict the future is to invent it.',\n        author: 'Alan Kay',\n      },\n    },\n    {\n      type: 'button',\n      content: {\n        label: 'Click Me',\n        href: 'https://example.com',\n        style: 'primary',\n      },\n    },\n    {\n      type: 'grid',\n      content: {\n        columns: 2,\n        items: [\n          { type: 'text', content: { text: 'Left column text block' } },\n          {\n            type: 'image',\n            value: { url: 'https://placebear.com/400/200', alt: 'A bear' },\n          },\n        ],\n      },\n    },\n  ];\n\n  useEffect(() => {\n    fetch(`/api/templates/${templateName}`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log('Fetched template data:', data);\n        const fallback = {\n          pages: [\n            {\n              id: 'index',\n              slug: 'index',\n              title: 'Sample Page',\n              content_blocks: sampleBlocks,\n            },\n          ],\n        };\n        const finalData = data?.data && Object.keys(data.data).length > 0 ? data.data : fallback;\n        const normalized = normalizeTemplate({ ...data, data: finalData });\n        setTemplate(normalized);\n        setRawJson(JSON.stringify(finalData, null, 2));\n        setLivePreviewData(finalData);\n      });\n  }, [templateName]);\n\n  useEffect(() => {\n    setRawJson(JSON.stringify(template.data, null, 2));\n  }, [template.data]);\n\n  useEffect(() => {\n    try {\n      const parsed = JSON.parse(rawJson);\n      setLivePreviewData(parsed);\n      setTemplate((prev) => ({ ...prev, data: parsed }));\n    } catch {\n      // Ignore\n    }\n  }, [rawJson]);\n\n  const handleSaveDraft = () => {\n    localStorage.setItem(`draft-${template.id}`, rawJson);\n    toast.success('Draft saved manually');\n  };\n\n  return (\n    <ScrollArea className=\"h-screen w-full\">\n      <div className=\"p-6 space-y-6 pb-40\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-xl font-bold\">{template?.name}</h1>\n          <Button onClick={() => setShowPublishModal(true)}>Publish Site</Button>\n        </div>\n\n        <Tabs defaultValue=\"edit\">\n          <TabsList>\n            <TabsTrigger value=\"edit\">Edit</TabsTrigger>\n            <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n            <TabsTrigger value=\"history\">History</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"edit\">\n            <div className=\"grid md:grid-cols-2 gap-6 pt-4\">\n              <div className=\"space-y-4\">\n                <TemplateSettingsPanel template={template} onChange={setTemplate} />\n                <TemplateEditorBranding\n                  selectedProfileId={template.brand || ''}\n                  onSelectProfileId={(selectedId) =>\n                    setTemplate((prev) => ({ ...prev, brand: selectedId || '' }))\n                  }\n                />\n                <TemplatePageEditor\n                  template={template}\n                  onChange={setTemplate}\n                  onLivePreviewUpdate={(data: any) => setLivePreviewData(data)}\n                />\n                <div className=\"mt-6 p-4 rounded text-sm bg-gray-800 text-white\">\n                  <p className=\"font-bold\">{template?.name}</p>\n                  <p className=\"text-white/80 text-xs\">Layout: {template?.layout}</p>\n                  <p className=\"text-white/80 text-xs\">Industry: {template?.industry}</p>\n                </div>\n                <ImageUploader\n                  siteId={template.site_id || ''}\n                  templateId={template.id || ''}\n                  folder=\"hero\"\n                  dbField=\"hero_url\"\n                  label=\"Hero Image\"\n                />\n\n                <ImageUploader\n                  siteId={template.site_id || ''}\n                  templateId={template.id || ''}\n                  folder=\"banners\"\n                  dbField=\"banner_url\"\n                  label=\"Banner Image\"\n                  initialUrl={template.banner_url}\n                  onUpload={(url) => console.log('Banner uploaded:', url)}\n                />\n\n                <ImageUploader\n                  siteId={template.site_id || ''}\n                  templateId={template.id || ''}\n                  folder=\"logos\"\n                  dbField=\"logo_url\"\n                  label=\"Logo Image\"\n                  initialUrl={template.logo_url}\n                  onUpload={(url) => console.log('Logo updated:', url)}\n                />\n\n                <ImageUploader\n                  siteId={template.site_id || ''}\n                  templateId={template.id || ''}\n                  folder=\"team\"\n                  dbField=\"team_url\"\n                  label=\"Team Photo\"\n                  initialUrl={template.team_url}\n                  onUpload={(url) => console.log('Team updated:', url)}\n                />\n\n                <TemplateImageGallery templateId={template.id || ''} />\n              </div>\n              <TemplateJsonEditor rawJson={rawJson} setRawJson={setRawJson} />\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"preview\">\n            <DevicePreviewWrapper>\n              <TemplatePreview\n                data={livePreviewData as TemplateData}\n                colorScheme={template.color_scheme}\n                theme={template.theme}\n                brand={template.brand}\n              />\n            </DevicePreviewWrapper>\n          </TabsContent>\n\n          <TabsContent value=\"history\">\n            <TemplateHistory template={template} onRevert={(t) => setTemplate(t)} />\n          </TabsContent>\n        </Tabs>\n\n        <TemplatePublishModal\n          open={showPublishModal}\n          onClose={() => setShowPublishModal(false)}\n          snapshotId={template?.id || ''}\n        />\n      </div>\n\n      <TemplateActionToolbar\n        template={template}\n        autosaveStatus={autosave.status}\n        onSaveDraft={handleSaveDraft}\n      />\n    </ScrollArea>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-fields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-header.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Link from 'next/link';\nimport SafeLink from '@/components/ui/safe-link';\n\ntype TemplateHeaderProps = {\n  name: string;\n  updatedAt?: string;\n  duplicateUrl: string;\n  template: any;\n};\n\nexport default function TemplateHeader({ name, updatedAt, duplicateUrl }: TemplateHeaderProps) {\n  return (\n    <div className=\"flex justify-between items-center mb-4\">\n      <div>\n        <h3 className=\"text-lg font-semibold\">{name}</h3>\n        {updatedAt && (\n          <p className=\"text-xs text-muted-foreground\">\n            Last updated: {new Date(updatedAt).toLocaleString()}\n          </p>\n        )}\n      </div>\n      <SafeLink href={duplicateUrl}>\n        <button className=\"text-sm text-blue-500 hover:underline\">Duplicate Template</button>\n      </SafeLink>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-history.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":49,"column":19,"nodeType":"JSXOpeningElement","endLine":53,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport TemplateVersionDiff from './template-version-diff';\nimport { Button } from '@/components/ui/button';\nimport toast from 'react-hot-toast';\n\nexport default function TemplateHistory({\n  template,\n  onRevert,\n}: {\n  template: any;\n  onRevert: (data: any) => void;\n}) {\n  const [versions, setVersions] = useState<any[]>([]);\n  const [selectedVersion, setSelectedVersion] = useState<any>(null);\n\n  useEffect(() => {\n    if (!template?.template_name) return;\n\n    supabase\n      .from('template_versions')\n      .select('*')\n      .eq('template_name', template.template_name)\n      .order('created_at', { ascending: false })\n      .then(({ data }) => {\n        if (data) setVersions(data);\n      });\n  }, [template?.template_name]);\n\n  const handleRevert = () => {\n    if (!selectedVersion) return;\n    onRevert({ ...template, data: selectedVersion.full_data });\n    toast.success('Template reverted to selected version');\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-bold\">Version History</h2>\n      <ul className=\"space-y-2\">\n        {versions.map((v) => (\n          <li key={v.id} className=\"border p-3 rounded bg-white dark:bg-gray-900\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <p className=\"text-sm font-medium\">{v.commit_message || 'No message'}</p>\n                <p className=\"text-xs text-gray-400\">\n                  {new Date(v.created_at || v.saved_at).toLocaleString()}\n                </p>\n                {v.thumbnail_url && (\n                  <img\n                    src={v.thumbnail_url}\n                    alt=\"Preview thumbnail\"\n                    className=\"mt-2 w-32 rounded border border-gray-600 shadow-sm\"\n                  />\n                )}\n              </div>\n              <button\n                className=\"text-blue-500 underline text-xs\"\n                onClick={() => setSelectedVersion(v)}\n              >\n                View Diff\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n\n      {selectedVersion && (\n        <div id=\"version-diff-container\" className=\"mt-6\">\n          <h3 className=\"text-sm font-semibold mb-2 text-gray-300\">Diff from selected version:</h3>\n          <TemplateVersionDiff current={template?.data} previous={selectedVersion.full_data} />\n          <div className=\"flex gap-4 mt-3\">\n            <Button size=\"sm\" variant=\"secondary\" onClick={handleRevert}>\n              Revert to This\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-json-editor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-page-editor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-preview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-publish-modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-save-bar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":62,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/components/ui/button';\nimport { Dispatch, SetStateAction, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport toast from 'react-hot-toast';\n\ntype TemplateSaveBarProps = {\n  template: any;\n  rawJson: string;\n  commitMessage: string;\n  setSaveStatus: Dispatch<SetStateAction<'idle' | 'saved' | 'error'>>;\n  setHighlightErrors: Dispatch<SetStateAction<boolean>>;\n};\n\nexport default function TemplateSaveBar({\n  template,\n  rawJson,\n  commitMessage,\n  setSaveStatus,\n  setHighlightErrors,\n}: TemplateSaveBarProps) {\n  const [saveStatus, setLocalSaveStatus] = useState<'idle' | 'saved' | 'error'>('idle');\n\n  const handleSave = async () => {\n    if (\n      !template?.template_name ||\n      !template?.industry ||\n      !template?.layout ||\n      !template?.data?.pages?.length\n    ) {\n      setHighlightErrors(true);\n      return;\n    }\n\n    try {\n      const { data: user } = await supabase.auth.getUser();\n      const editor_id = user?.user?.email || 'unknown';\n      const payload = { ...template, data: JSON.parse(rawJson) };\n\n      const res = await fetch('/api/templates/update', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...payload,\n          commit_message: commitMessage,\n          editor_id,\n        }),\n      });\n\n      if (res.ok) {\n        setLocalSaveStatus('saved');\n        setSaveStatus('saved');\n        toast.success('Template saved successfully.');\n        setTimeout(() => {\n          setLocalSaveStatus('idle');\n          setSaveStatus('idle');\n        }, 3000);\n      } else {\n        setLocalSaveStatus('error');\n        setSaveStatus('error');\n        toast.error('Failed to save template.');\n      }\n    } catch (err) {\n      setLocalSaveStatus('error');\n      setSaveStatus('error');\n      toast.error('Failed to save template.');\n    }\n  };\n\n  return (\n    <div className=\"flex justify-between items-center fixed bottom-0 left-0 right-0 bg-background border-t p-4\">\n      <div className=\"flex items-center gap-2\">\n        <Button onClick={handleSave}>Save Changes</Button>\n        {saveStatus === 'saved' && (\n          <span className=\"text-green-500 text-xs animate-pulse\">✓ Saved</span>\n        )}\n        {saveStatus === 'error' && <span className=\"text-red-500 text-xs\">⚠️ Error</span>}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-settings-panel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-version-diff.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/template-version-save-bar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/thumbnail-preview-modal.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":20,"column":9,"nodeType":"JSXOpeningElement","endLine":24,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Dialog, DialogContent } from '@/components/ui/dialog';\n\nexport default function ThumbnailPreviewModal({\n  open,\n  onClose,\n  imageUrl,\n  message,\n  timestamp,\n}: {\n  open: boolean;\n  onClose: () => void;\n  imageUrl: string;\n  message?: string;\n  timestamp?: string;\n}) {\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"bg-white dark:bg-gray-900 text-black dark:text-white max-w-xl max-h-screen overflow-y-auto p-4 space-y-4\">\n        <h2 className=\"text-lg font-bold\">Preview Snapshot</h2>\n        <img\n          src={imageUrl}\n          alt=\"Version preview\"\n          className=\"rounded shadow border border-gray-600\"\n        />\n        {message && <p className=\"text-sm text-gray-400\">📝 {message}</p>}\n        {timestamp && (\n          <p className=\"text-xs text-gray-500\">📅 {new Date(timestamp).toLocaleString()}</p>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/templates/version-compare-dropdowns.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'renderVersionDiff' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport VersionCompareDropdowns from '@/components/admin/templates/version-compare-dropdowns';\nimport { renderVersionDiff } from '@/admin/utils/renderVersionDiff';\n\nexport default function VersionHistoryPanel({\n  slug,\n  onRestore,\n}: {\n  slug: string;\n  onRestore: (snapshotId: string, brandingProfileId: string) => void;\n}) {\n  const [versions, setVersions] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [currentVersion, setCurrentVersion] = useState<string | null>(null);\n  const [confirmingDelete, setConfirmingDelete] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchVersions = async () => {\n      const [versionRes, currentRes] = await Promise.all([\n        supabase\n          .from('published_versions')\n          .select(\n            `id, created_at, snapshot_id, label, slug, branding_profile_id, branding_profiles ( id, name, primary_color, secondary_color, font_family )`\n          )\n          .eq('slug', slug)\n          .order('created_at', { ascending: false }),\n        supabase.from('published_sites').select('snapshot_id').eq('slug', slug).maybeSingle(),\n      ]);\n\n      if (!versionRes.error) setVersions(versionRes.data || []);\n      if (!currentRes.error && currentRes.data) setCurrentVersion(currentRes.data.snapshot_id);\n      setLoading(false);\n    };\n\n    fetchVersions();\n  }, [slug]);\n\n  if (loading) return <p className=\"text-sm text-gray-500\">Loading versions...</p>;\n  if (versions.length === 0)\n    return <p className=\"text-sm text-gray-500\">No version history available.</p>;\n\n  return (\n    <div className=\"mt-4 space-y-2\">\n      <h3 className=\"font-semibold text-base\">Version History</h3>\n      <VersionCompareDropdowns slug={slug} onRestore={onRestore} />\n      <ul className=\"space-y-2\">\n        {versions.map((v) => {\n          const isCurrent = v.snapshot_id === currentVersion;\n          return (\n            <li\n              key={v.id}\n              className={`border rounded p-2 flex justify-between items-center ${isCurrent ? 'border-green-500' : 'border-gray-700'}`}\n            >\n              <div>\n                <div className=\"text-sm text-gray-100\">\n                  Snapshot: <code>{v.snapshot_id}</code>\n                </div>\n                <div className=\"text-xs text-gray-400\">Label: {v.label || 'No label'}</div>\n                <div className=\"text-xs text-gray-500\">\n                  Published: {new Date(v.created_at).toLocaleString()}\n                </div>\n                <div\n                  className=\"text-xs mt-1\"\n                  style={{\n                    fontFamily: v.branding_profiles?.font_family || 'sans-serif',\n                  }}\n                >\n                  Heading Preview in {v.branding_profiles?.font_family || 'Default'}\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                {!isCurrent && (\n                  <Button size=\"sm\" onClick={() => onRestore(v.snapshot_id, v.branding_profile_id)}>\n                    Restore\n                  </Button>\n                )}\n                {confirmingDelete === v.id ? (\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={async () => {\n                      const { error } = await supabase\n                        .from('published_versions')\n                        .delete()\n                        .eq('id', v.id);\n                      if (!error) setVersions(versions.filter((ver) => ver.id !== v.id));\n                      setConfirmingDelete(null);\n                    }}\n                  >\n                    Confirm Delete\n                  </Button>\n                ) : (\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => setConfirmingDelete(v.id)}>\n                    Delete\n                  </Button>\n                )}\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/test-client-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/tokens/email-token-modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/tooltip.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'prevPlacement' is assigned a value but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'autoPlacement'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPrevPlacement' needs the current value of 'autoPlacement'.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [autoPlacement, placement]","fix":{"range":[1260,1271],"text":"[autoPlacement, placement]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { ReactNode, useEffect, useRef, useState } from 'react';\n\ninterface TooltipProps {\n  placement?: 'top' | 'bottom' | 'left' | 'right';\n  content: ReactNode;\n  children: ReactNode;\n  labelledById?: string;\n  clickable?: boolean;\n}\n\nexport default function Tooltip({\n  content,\n  children,\n  clickable = false,\n  placement = 'top',\n  labelledById = `tooltip-${Math.random().toString(36).slice(2, 10)}`,\n}: TooltipProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const [autoPlacement, setAutoPlacement] = useState<'top' | 'bottom' | 'left' | 'right'>(\n    placement\n  );\n  const [prevPlacement, setPrevPlacement] = useState<'top' | 'bottom' | 'left' | 'right'>(\n    placement\n  );\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setPrevPlacement(autoPlacement);\n    const rect = ref.current.getBoundingClientRect();\n    const buffer = 20;\n    if (placement === 'top' && rect.top < buffer) setAutoPlacement('bottom');\n    else if (placement === 'bottom' && rect.bottom > window.innerHeight - buffer)\n      setAutoPlacement('top');\n    else if (placement === 'left' && rect.left < buffer) setAutoPlacement('right');\n    else if (placement === 'right' && rect.right > window.innerWidth - buffer)\n      setAutoPlacement('left');\n  }, [placement]);\n\n  const tooltipPosition =\n    autoPlacement === 'top'\n      ? 'bottom-full mb-1 -top-6'\n      : autoPlacement === 'bottom'\n        ? 'top-full mt-1 translate-y-1'\n        : autoPlacement === 'left'\n          ? 'right-full mr-1 -left-6 top-1/2 -translate-y-1/2'\n          : 'left-full ml-1 -right-6 top-1/2 -translate-y-1/2';\n\n  const arrowStyles =\n    autoPlacement === 'top'\n      ? 'before:-bottom-1 before:border-t-zinc-700'\n      : autoPlacement === 'bottom'\n        ? 'before:-top-1 before:border-b-zinc-700'\n        : autoPlacement === 'left'\n          ? 'before:-right-1 before:border-l-zinc-700'\n          : 'before:-left-1 before:border-r-zinc-700';\n\n  return (\n    <div\n      ref={ref}\n      className=\"group relative inline-block touch-none\"\n      aria-describedby={labelledById}\n      onTouchStart={() =>\n        ref.current?.querySelector('[role=tooltip]')?.classList.add('opacity-100')\n      }\n    >\n      <span\n        role=\"tooltip\"\n        id={labelledById}\n        aria-live=\"polite\"\n        aria-hidden=\"false\"\n        tabIndex={0}\n        onKeyDown={(e) => {\n          if (e.key === 'Escape') {\n            (e.target as HTMLElement).blur();\n          }\n        }}\n        className={`opacity-0 group-hover:opacity-100 group-hover:translate-y-0 absolute left-1/2 -translate-x-1/2 transition-[top,left] duration-300 ease-in-out bg-zinc-700 text-white text-xs rounded px-2 py-1 whitespace-nowrap z-10 transition-opacity transition-transform duration-300 ${clickable ? 'pointer-events-auto cursor-pointer' : 'pointer-events-none'} ${tooltipPosition} before:content-[''] before:absolute before:left-1/2 before:-translate-x-1/2 before:border-4 before:border-transparent ${arrowStyles}`}\n      >\n        {content}\n      </span>\n      {children}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/use-smart-link-persisted.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/user-gate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/version-history-panel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/admin/visual-schema.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/analytics/heatmap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/app-header-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/auth/RequireRole.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎····?·role.includes(currentRole)⏎···` with `·?·role.includes(currentRole)`","line":16,"column":38,"nodeType":null,"messageId":"replace","endLine":18,"endColumn":4,"fix":{"range":[411,448],"text":" ? role.includes(currentRole)"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// lib/components/auth/RequireRole.tsx\n'use client';\n\nimport { ReactNode } from 'react';\nimport { useSession } from '@/lib/providers/SessionProvider';\n\ntype Props = {\n  role: string | string[];\n  fallback?: ReactNode;\n  children: ReactNode;\n};\n\nexport default function RequireRole({ role, fallback = null, children }: Props) {\n  const { role: currentRole } = useSession();\n\n  const allowed = Array.isArray(role)\n    ? role.includes(currentRole)\n    : currentRole === role;\n\n  return allowed ? <>{children}</> : <>{fallback}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/checkin-map.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/command-palette.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/domain-preview-card.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":12,"column":9,"nodeType":"JSXOpeningElement","endLine":12,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useDomainPreview } from '../hooks/useDomainPreview.jsx';\n\nexport default function DomainPreviewCard({ domain }: { domain: string }) {\n  const { imageUrl, loading } = useDomainPreview(domain);\n\n  return (\n    <div className=\"bg-zinc-800 rounded shadow p-4 w-full max-w-md mx-auto text-white\">\n      <h3 className=\"text-lg font-bold mb-2\">{domain}</h3>\n      {loading ? (\n        <p className=\"text-sm text-zinc-400\">Checking preview...</p>\n      ) : imageUrl ? (\n        <img src={imageUrl} alt=\"Preview\" className=\"rounded w-full\" />\n      ) : (\n        <div className=\"text-sm text-yellow-400\">\n          No screenshot found.\n          <br />\n          <a href={`/api/screenshot?domain=${domain}`} className=\"text-blue-400 underline text-xs\">\n            Generate now\n          </a>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/domain-with-status.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":11,"column":11,"nodeType":"JSXOpeningElement","endLine":15,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useDomainPreview } from '@/hooks/useDomainPreview';\n\nexport function DomainWithStatus({ domain, status }: { domain: string; status: string }) {\n  const { imageUrl, loading } = useDomainPreview(domain);\n  return (\n    <div className=\"flex items-center gap-4 border-b border-zinc-800 py-2 text-white\">\n      <div className=\"w-32 h-20 bg-zinc-900 rounded overflow-hidden\">\n        {loading ? (\n          <div className=\"text-xs p-2 text-zinc-400\">Loading…</div>\n        ) : imageUrl ? (\n          <img\n            src={imageUrl.replace('.png', '.thumb.png')}\n            alt={domain}\n            className=\"w-full h-full object-cover\"\n          />\n        ) : (\n          <div className=\"text-xs p-2 text-yellow-400\">No preview</div>\n        )}\n      </div>\n      <div className=\"flex-1\">\n        <div className=\"text-sm font-medium\">{domain}</div>\n        <div className={`text-xs ${status === 'failed' ? 'text-red-400' : 'text-zinc-400'}`}>\n          Status: {status}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/embed/celebration-modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/embed/celebration-toast.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'duration'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [duration]","fix":{"range":[774,776],"text":"[duration]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// Example Usage:\n// {showToast && (\n//   <CelebrationToast message=\"🎉 Goal Reached!\" subtext=\"You're on fire.\" />\n// )}\n\nimport { useEffect } from 'react';\nimport confetti from 'canvas-confetti';\n\ntype CelebrationToastProps = {\n  message: string;\n  subtext?: string;\n  duration?: number;\n};\n\nexport function CelebrationToast({ message, subtext, duration = 4000 }: CelebrationToastProps) {\n  useEffect(() => {\n    confetti({ particleCount: 100, spread: 80, origin: { y: 0.6 } });\n    const audio = new Audio('/sounds/celebration.mp3');\n    audio.play().catch(() => {});\n    const timer = setTimeout(() => {\n      const el = document.getElementById('celebration-toast');\n      if (el) el.remove();\n    }, duration);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div\n      id=\"celebration-toast\"\n      className=\"fixed bottom-6 right-6 z-50 bg-green-600 text-white px-4 py-2 rounded shadow-lg\"\n    >\n      <p className=\"font-bold\">{message}</p>\n      {subtext && <p className=\"text-sm opacity-90\">{subtext}</p>}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/embed/embed-format-modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/habit-leaderboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/layout/admin-layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/layout/default-public-layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/layout/page.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Delete `····`","line":12,"column":9,"nodeType":null,"messageId":"delete","endLine":12,"endColumn":13,"fix":{"range":[433,437],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `······`","line":13,"column":1,"nodeType":null,"messageId":"delete","endLine":13,"endColumn":7,"fix":{"range":[445,451],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `······`","line":14,"column":1,"nodeType":null,"messageId":"delete","endLine":14,"endColumn":7,"fix":{"range":[481,487],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `······`","line":15,"column":11,"nodeType":null,"messageId":"delete","endLine":15,"endColumn":17,"fix":{"range":[533,539],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `····`","line":16,"column":9,"nodeType":null,"messageId":"delete","endLine":16,"endColumn":13,"fix":{"range":[610,614],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `····`","line":17,"column":1,"nodeType":null,"messageId":"delete","endLine":17,"endColumn":5,"fix":{"range":[617,621],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":18,"column":1,"nodeType":null,"messageId":"delete","endLine":18,"endColumn":3,"fix":{"range":[641,643],"text":""}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"// /components/layout/page.tsx\nimport AppHeader from '@/components/admin/AppHeader/app-header';\nimport AdminLayout from '@/components/layout/admin-layout';\nimport { getSessionContext } from '@/lib/supabase/getSessionContext';\n\nexport default async function AdminLayoutWithHeader({ children }: { children: React.ReactNode }) {\n  const { user, role } = await getSessionContext();\n\n  return (\n    <AdminLayout>\n      <AppHeader\n            user={{\n                id: user?.id ?? '',\n                email: user?.email ?? '',\n                avatar_url: user?.avatar_url ?? '', // Ensure this is a string\n            }}\n            role={role}\n        />\n\n      <div className=\"text-xs text-gray-400 bg-zinc-900 px-4 py-2 border-b border-zinc-700\">\n        <code>\n          Authenticated as {user?.email} with role {role}\n        </code>\n      </div>\n\n      <div className=\"p-6\">{children}</div>\n    </AdminLayout>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/layouts/admin-layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/layouts/viewer-layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/macd-trend.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/meta-tags.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/nav-badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/reward-tally.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/share-tools-enhanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/share-tools.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/suggest-block-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/supabase-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/avatar-with-tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/breadcrumbs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRouter, usePathname } from 'next/navigation';\n\nexport default function Breadcrumbs() {\n  const pathname = usePathname();\n  const parts = pathname?.split('/').filter(Boolean) || [];\n\n  return (\n    <div className=\"text-sm text-gray-500 mb-4\">\n      {parts.map((part, idx) => (\n        <span key={idx}>\n          <span className=\"capitalize\">{part.replace(/[-_]/g, ' ')}</span>\n          {idx < parts.length - 1 && ' / '}\n        </span>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/celebration-modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/command-palette.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/loader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/loading-redirect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/modal-wrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/nav-badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/safe-link.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/theme-toggle-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/theme-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/themed-bar-chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/constants/blockSchemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/saveAsTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useAutoRedirect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useAutoRedirectByRole.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":45,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\ntype RoleMap = Partial<Record<string, string>>;\n\ntype Options = {\n  roleRoutes?: RoleMap;\n  fallbackRoute?: string;\n  enableTestBypass?: boolean;\n};\n\n/**\n * Redirects the user based on their Supabase `user_profiles.role`.\n * Customize the `roleRoutes` map to control where each role should go.\n */\nexport function useAutoRedirectByRole({\n  roleRoutes = {\n    admin: '/admin/dashboard',\n    owner: '/admin/dashboard',\n    reseller: '/admin/dashboard',\n    viewer: '/viewer',\n  },\n  fallbackRoute = '/unauthorized',\n  enableTestBypass = false,\n}: Options = {}) {\n  const router = useRouter();\n\n  useEffect(() => {\n    const isTestMode = enableTestBypass && process.env.NEXT_PUBLIC_IS_PLAYWRIGHT_TEST === 'true';\n\n    if (isTestMode) {\n      router.replace(roleRoutes.admin || '/admin/dashboard');\n      return;\n    }\n\n    supabase.auth.getUser().then(async ({ data: { user } }) => {\n      if (!user?.id) {\n        router.replace('/login');\n        return;\n      }\n\n      const { data: profile, error } = await supabase\n        .from('user_profiles')\n        .select('role')\n        .eq('user_id', user.id)\n        .maybeSingle();\n\n      const role = profile?.role ?? 'viewer';\n      const redirectTo = roleRoutes[role] || fallbackRoute;\n\n      console.log(`[🔁 AutoRedirect] Role \"${role}\" → ${redirectTo}`);\n      router.replace(redirectTo);\n    });\n  }, [router, roleRoutes, fallbackRoute, enableTestBypass]);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useAutosaveTemplate.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'template.id'. Either include it or remove the dependency array.","line":20,"column":6,"nodeType":"ArrayExpression","endLine":20,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [rawJson, template.id]","fix":{"range":[643,652],"text":"[rawJson, template.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef, useState } from 'react';\nimport { toast } from 'react-hot-toast';\n\nexport function useAutosaveTemplate(template: any, rawJson: string) {\n  const [status, setStatus] = useState<'idle' | 'saving' | 'saved'>('idle');\n  const lastSave = useRef('');\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (rawJson !== lastSave.current) {\n        setStatus('saving');\n        localStorage.setItem(`draft-${template.id}`, rawJson);\n        lastSave.current = rawJson;\n        setStatus('saved');\n        toast.success('Changes autosaved');\n      }\n    }, 2000);\n\n    return () => clearTimeout(timeout);\n  }, [rawJson]);\n\n  const restore = () => {\n    const saved = localStorage.getItem(`draft-${template.id}`);\n    return saved || '';\n  };\n\n  const clear = () => {\n    localStorage.removeItem(`draft-${template.id}`);\n  };\n\n  return { status, restore, clear };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useAutosaveToggle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useAvatarUploader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useBrandingAutoSuggest.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'setSelectedProfileId' and 'template'. Either include them or remove the dependency array. If 'setSelectedProfileId' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":28,"column":6,"nodeType":"ArrayExpression","endLine":28,"endColumn":81,"suggestions":[{"desc":"Update the dependencies array to be: [template?.industry, template.layout, brandingProfiles, selectedProfileId, template, setSelectedProfileId]","fix":{"range":[812,887],"text":"[template?.industry, template.layout, brandingProfiles, selectedProfileId, template, setSelectedProfileId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport toast from 'react-hot-toast';\n\nexport function useBrandingAutoSuggest({\n  template,\n  brandingProfiles,\n  selectedProfileId,\n  setSelectedProfileId,\n}: {\n  template: any;\n  brandingProfiles: any[];\n  selectedProfileId: string | null;\n  setSelectedProfileId: (id: string) => void;\n}) {\n  useEffect(() => {\n    if (!template || !brandingProfiles?.length || selectedProfileId) return;\n\n    const match = brandingProfiles.find(\n      (p) =>\n        (template?.industry && p.name.toLowerCase().includes(template?.industry.toLowerCase())) ||\n        (template.layout && p.name.toLowerCase().includes(template.layout.toLowerCase()))\n    );\n\n    if (match) {\n      setSelectedProfileId(match.id);\n      toast.success(`Auto-selected branding profile: ${match.name}`);\n    }\n  }, [template?.industry, template?.layout, brandingProfiles, selectedProfileId]);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useBrandingProfiles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useCampaignForm.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'leads'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [city, selectedLeads, nameWasManuallySet, startsAt, leads]","fix":{"range":[1810,1861],"text":"[city, selectedLeads, nameWasManuallySet, startsAt, leads]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'alt1' and 'alt2'. Either include them or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [selectedLeads, leads, alt1, alt2]","fix":{"range":[2226,2248],"text":"[selectedLeads, leads, alt1, alt2]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport dayjs from 'dayjs';\nimport { supabase } from '../admin/lib/supabaseClient';\nimport { useLeads } from './useLeads';\n\nfunction slugify(name: string): string {\n  return name\n    .toLowerCase()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/^-|-$/g, '');\n}\n\nexport function useCampaignForm(city: string, state: string) {\n  const router = useRouter();\n  const [name, setName] = useState('');\n  const [nameWasManuallySet, setNameWasManuallySet] = useState(false);\n  const [alt1, setAlt1] = useState('');\n  const [alt2, setAlt2] = useState('');\n  const [startsAt, setStartsAt] = useState(dayjs().toISOString().slice(0, 16));\n  const [endsAt, setEndsAt] = useState(dayjs().add(3, 'day').toISOString().slice(0, 16));\n  const [silentMode, setSilentMode] = useState(false);\n  const [email, setEmail] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n\n  const { leads, loading: leadsLoading } = useLeads({ city, state, industry: 'towing' });\n\n  const [selectedLeads, setSelectedLeads] = useState<string[]>([]);\n\n  function toggleLead(id: string) {\n    setSelectedLeads((prev) => (prev.includes(id) ? prev.filter((l) => l !== id) : [...prev, id]));\n  }\n\n  useEffect(() => {\n    if (!nameWasManuallySet && city && selectedLeads.length >= 2 && startsAt) {\n      const a = leads.find((l) => l.id === selectedLeads[0])?.business_name?.split(' ')[0] || 'A';\n      const b = leads.find((l) => l.id === selectedLeads[1])?.business_name?.split(' ')[0] || 'B';\n      const category = 'Towing';\n      const date = dayjs(startsAt).format('YYYY-MM-DD');\n      setName(`${city} ${category}: ${a} vs ${b} ${date}`);\n    }\n  }, [city, selectedLeads, nameWasManuallySet, startsAt]);\n\n  useEffect(() => {\n    if (selectedLeads.length >= 2) {\n      const leadA = leads.find((l) => l.id === selectedLeads[0]);\n      const leadB = leads.find((l) => l.id === selectedLeads[1]);\n\n      if (leadA && !alt1) setAlt1(slugify(leadA.business_name || '') + '.com');\n      if (leadB && !alt2) setAlt2(slugify(leadB.business_name || '') + '.com');\n    }\n  }, [selectedLeads, leads]);\n\n  useEffect(() => {\n    supabase.auth.getUser().then(({ data }) => {\n      setEmail(data?.user?.email || '');\n    });\n  }, []);\n\n  function validateFields(): boolean {\n    const errors: Record<string, string> = {};\n\n    if (!name.trim()) errors.name = 'Campaign name is required.';\n    if (selectedLeads.length < 2) errors.leads = 'Select at least 2 leads.';\n    if (dayjs(startsAt).isAfter(dayjs(endsAt)))\n      errors.dates = 'Start date must be before end date.';\n\n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  }\n\n  const submit = async (mode: 'draft' | 'submit' = 'submit') => {\n    setError(null);\n    if (!validateFields()) return;\n\n    const status = mode === 'draft' ? 'draft' : 'active';\n\n    const { data, error: insertError } = await supabase\n      .from('campaigns')\n      .insert([\n        {\n          name,\n          city,\n          state,\n          starts_at: startsAt,\n          ends_at: endsAt,\n          lead_ids: selectedLeads,\n          alt_domains: [alt1, alt2],\n          created_by: email,\n          status,\n        },\n      ])\n      .select()\n      .single();\n\n    if (insertError) {\n      setError(insertError.message);\n      return;\n    }\n\n    if (mode === 'submit') {\n      await supabase.from('leads').update({ campaign_id: data.id }).in('id', selectedLeads);\n\n      if (!silentMode) {\n        await supabase.from('user_action_logs').insert([\n          {\n            action_type: 'campaign_created',\n            triggered_by: email,\n            notes: `Created campaign: ${name}`,\n          },\n        ]);\n      }\n\n      router.push(`/admin/campaigns?new=${data.id}`);\n    } else {\n      router.push(`/admin/start-campaign?draftId=${data.id}`);\n    }\n  };\n\n  return {\n    name,\n    setName,\n    nameWasManuallySet,\n    setNameWasManuallySet,\n    alt1,\n    alt2,\n    setAlt1,\n    setAlt2,\n    startsAt,\n    setStartsAt,\n    endsAt,\n    setEndsAt,\n    silentMode,\n    setSilentMode,\n    email,\n    error,\n    validationErrors,\n    submit,\n    leads,\n    selectedLeads,\n    toggleLead,\n    leadsLoading,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useCanonicalRole.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useCurrentRole.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useCurrentUser.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎····context.user?.role·||⏎···` with `·context.user?.role·||`","line":65,"column":64,"nodeType":null,"messageId":"replace","endLine":67,"endColumn":4,"fix":{"range":[1916,1946],"text":" context.user?.role ||"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// /hooks/useCurrentUser.tsx\nimport { useContext, useEffect, useState } from 'react';\nimport {\n  CurrentUserContext,\n  CurrentUserContextType,\n} from '@/components/admin/context/current-user-provider';\nimport { supabase } from '@/admin/lib/supabaseClient';\n\nexport function useCurrentUser(): CurrentUserContextType & {\n  role: string;\n  roleSource: string;\n  isLoading: boolean;\n  ready: boolean;\n} {\n  const context = useContext(CurrentUserContext);\n\n  const [fetchedRole, setFetchedRole] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [roleSource, setRoleSource] = useState<'session' | 'db' | 'cache'>('session');\n\n  useEffect(() => {\n    const fetchRole = async () => {\n      if (!context.user?.email) {\n        setIsLoading(false);\n        return;\n      }\n\n      const cacheKey = `cached-role-${context.user.email}`;\n\n      // Check localStorage first\n      const cached = localStorage.getItem(cacheKey);\n      if (cached) {\n        console.debug('📦 Using cached fallback role:', cached);\n        setFetchedRole(cached);\n        setRoleSource('cache');\n        setIsLoading(false);\n        return;\n      }\n\n      // Otherwise query Supabase\n      const { data, error } = await supabase\n        .from('user_roles')\n        .select('new_role')\n        .eq('user_email', context.user.email)\n        .order('updated_at', { ascending: false })\n        .limit(1)\n        .single();\n\n      if (error) {\n        console.warn('🔍 Role fetch error', error.message);\n      } else if (data?.new_role?.trim()) {\n        console.debug('✅ Fallback role from DB:', data.new_role);\n        setFetchedRole(data.new_role);\n        setRoleSource('db');\n        localStorage.setItem(cacheKey, data.new_role);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchRole();\n  }, [context.user?.email]);\n\n  const role: string =\n    (fetchedRole as 'viewer' | 'admin' | 'editor' | 'owner') ||\n    context.user?.role ||\n    'viewer';\n\n  return {\n    ...context,\n    role: role as 'viewer' | 'admin' | 'editor' | 'owner',\n    roleSource,\n    isLoading,\n    ready: !isLoading,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useDashboardLayout.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'activeDashboardId'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [activeDashboardId, userId]","fix":{"range":[1148,1156],"text":"[activeDashboardId, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// hooks/useDashboardLayout.ts\n\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../admin/lib/supabaseClient';\n\ntype Block = { id: string; title: string };\ntype Settings = Record<string, Record<string, any>>;\n\nexport function useDashboardLayout(userId: string | null, dashboardId?: string) {\n  const [order, setOrder] = useState<Block[]>([]);\n  const [hidden, setHidden] = useState<string[]>([]);\n  const [settings, setSettings] = useState<Settings>({});\n  const [dashboards, setDashboards] = useState<any[]>([]);\n  const [activeDashboardId, setActiveDashboardId] = useState<string | null>(dashboardId || null);\n  const [loaded, setLoaded] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch dashboards for the user\n  useEffect(() => {\n    if (!userId) return;\n    setLoading(true);\n    supabase\n      .from('dashboard_user_layouts')\n      .select('*')\n      .eq('user_id', userId)\n      .then(({ data }) => {\n        setDashboards(data || []);\n        if (!activeDashboardId && data?.[0]) {\n          setActiveDashboardId(data[0].dashboard_id);\n        }\n        setLoading(false);\n      });\n  }, [userId]);\n\n  // Load selected layout\n  useEffect(() => {\n    if (!userId || !activeDashboardId) return;\n    setLoading(true);\n    supabase\n      .from('dashboard_user_layouts')\n      .select('layout, hidden, settings')\n      .eq('user_id', userId)\n      .eq('dashboard_id', activeDashboardId)\n      .single()\n      .then(({ data }) => {\n        if (data?.layout) setOrder(data.layout);\n        if (data?.hidden) setHidden(data.hidden);\n        if (data?.settings) setSettings(data.settings);\n        setLoaded(true);\n        setLoading(false);\n      });\n\n    const channel = supabase\n      .channel('dashboard_sync')\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'dashboard_user_layouts',\n          filter: `user_id=eq.${userId}`,\n        },\n        (payload) => {\n          const updated = payload.new;\n          if (updated.dashboard_id === activeDashboardId) {\n            if (updated.layout) setOrder(updated.layout);\n            if (updated.hidden) setHidden(updated.hidden);\n            if (updated.settings) setSettings(updated.settings);\n          }\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [userId, activeDashboardId]);\n\n  const save = async (layout: Block[], hiddenList: string[], newSettings = settings) => {\n    if (!userId || !activeDashboardId) return;\n    setLoading(true);\n    await supabase.from('dashboard_user_layouts').upsert({\n      user_id: userId,\n      dashboard_id: activeDashboardId,\n      layout,\n      hidden: hiddenList,\n      settings: newSettings,\n      updated_at: new Date().toISOString(),\n    });\n    setOrder(layout);\n    setHidden(hiddenList);\n    setSettings(newSettings);\n    setLoading(false);\n  };\n\n  const updateBlockSetting = (blockId: string, key: string, value: any) => {\n    const newSettings = {\n      ...settings,\n      [blockId]: {\n        ...(settings[blockId] || {}),\n        [key]: value,\n      },\n    };\n    save(order, hidden, newSettings);\n  };\n  const createDashboard = async (name: string) => {\n    if (!userId) return;\n    setLoading(true);\n    const { data } = await supabase\n      .from('dashboard_user_layouts')\n      .insert({\n        user_id: userId,\n        name,\n        layout: 'DEFAULT_LAYOUT',\n        hidden: [],\n        settings: {},\n      })\n      .select()\n      .single();\n\n    if (data) {\n      setDashboards((prev) => [...prev, data]);\n      setActiveDashboardId(data.dashboard_id);\n      setOrder(data.layout);\n      setHidden([]);\n      setSettings({});\n      setLoading(false);\n    }\n  };\n\n  return {\n    order,\n    hidden,\n    settings,\n    dashboards,\n    activeDashboardId,\n    setActiveDashboardId,\n    loaded,\n    save,\n    updateBlockSetting,\n    createDashboard,\n    loading,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useDateRange.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'searchParams'. Either include it or remove the dependency array.","line":11,"column":6,"nodeType":"ArrayExpression","endLine":11,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [searchParams]","fix":{"range":[328,356],"text":"[searchParams]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":11,"column":7,"nodeType":"ChainExpression","endLine":11,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'searchParams'. Either include it or remove the dependency array.","line":16,"column":6,"nodeType":"ArrayExpression","endLine":16,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [searchParams]","fix":{"range":[496,522],"text":"[searchParams]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":16,"column":7,"nodeType":"ChainExpression","endLine":16,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useMemo } from 'react';\n\nexport function useDateRange() {\n  const searchParams = useSearchParams();\n\n  const start = useMemo(() => {\n    if (typeof searchParams?.get('start') === 'string') return searchParams.get('start');\n    return '';\n  }, [searchParams?.get('start')]);\n\n  const end = useMemo(() => {\n    if (typeof searchParams?.get('end') === 'string') return searchParams.get('end');\n    return '';\n  }, [searchParams?.get('end')]);\n\n  return { start, end };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useDomainPreview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useFlashToast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'className', 'duration', 'icon', 'key', 'prefix', 'searchParams', and 'type'. Either include them or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [className, duration, icon, key, prefix, searchParams, type, value]","fix":{"range":[1373,1380],"text":"[className, duration, icon, key, prefix, searchParams, type, value]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { toast, ToastOptions } from 'react-hot-toast';\n\ntype ToastType = 'success' | 'error' | 'loading' | 'custom';\n\ntype UseFlashToastOptions = {\n  type?: ToastType;\n  prefix?: string;\n  duration?: number;\n  icon?: string;\n  className?: string;\n};\n\nexport function useFlashToast(\n  key: string,\n  { type = 'success', prefix = '', duration = 3000, icon, className }: UseFlashToastOptions = {}\n) {\n  const searchParams = useSearchParams();\n  const value = searchParams?.get(key);\n\n  useEffect(() => {\n    if (value && typeof value === 'string') {\n      const message = `${prefix}${value}`;\n\n      const toastOptions: ToastOptions = {\n        duration,\n        icon,\n        className,\n      };\n\n      switch (type) {\n        case 'error':\n          toast.error(message, toastOptions);\n          break;\n        case 'loading':\n          toast.loading(message, toastOptions);\n          break;\n        case 'custom':\n          toast(message, toastOptions);\n          break;\n        default:\n          toast.success(message, toastOptions);\n      }\n\n      // Remove the flash param from the URL\n      const rest = new URLSearchParams(searchParams?.toString() || '');\n      rest.delete(key);\n      window.location.href = `${window.location.pathname}?${rest.toString()}`;\n    }\n  }, [value]);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useGeoLocation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":26,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// hooks/useGeoLocation.ts\nimport { useEffect, useState } from 'react';\nimport { getCachedGeo, setCachedGeo } from '../lib/geoCache.js';\nimport staticGeo from '../public/staticGeo.json';\n\n// USAGE:\n// const { lat, lon, loading, error } = useGeoLocation('Franklin', 'WI');\n// if (loading) return <p>Loading map...</p>;\n// if (error) return <p>Error: {error}</p>;\n\nfunction getStaticFallback(city: string, state: string): { lat: number; lon: number } | undefined {\n  const key = `${city.trim().toLowerCase()},${state.trim().toLowerCase()}`;\n  return staticGeo[key as keyof typeof staticGeo];\n}\n\nexport function useGeoLocation(city: string, state: string) {\n  const [coords, setCoords] = useState<{ lat: number; lon: number } | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!city || !state) return;\n\n    const tryGeoSources = async () => {\n      setLoading(true);\n      const key = `${city}, ${state}`;\n\n      // 1. Local memory cache\n      const memoryHit = getCachedGeo(city, state);\n      if (memoryHit) {\n        setCoords(memoryHit);\n        setLoading(false);\n        return;\n      }\n\n      // 2. Static fallback JSON\n      const staticHit = getStaticFallback(city, state);\n      if (staticHit) {\n        setCachedGeo(city, state, staticHit.lat, staticHit.lon);\n        setCoords(staticHit);\n        setLoading(false);\n        return;\n      }\n\n      // 3. Remote API\n      try {\n        const res = await fetch(\n          `/api/geocode?city=${encodeURIComponent(city)}&state=${encodeURIComponent(state)}`\n        );\n        if (!res.ok) throw new Error(`API failed: ${res.status}`);\n        const data = await res.json();\n        const lat = Number(data.lat || 0);\n        const lon = Number(data.lon || 0);\n        setCachedGeo(city, state, lat, lon);\n        setCoords({ lat, lon });\n      } catch (err: any) {\n        setError(err.message || 'Unknown error');\n        setCoords({ lat: 0, lon: 0 });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    tryGeoSources();\n  }, [city, state]);\n\n  return { lat: coords?.lat, lon: coords?.lon, loading, error };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useImageUploader.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'label' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { supabase } from '../admin/lib/supabaseClient';\n\ninterface UseImageUploaderOptions {\n  siteId: string;\n  templateId: string;\n  dbField: string;\n  folder?: string;\n  label?: string;\n  initialUrl?: string;\n  onChange?: (url: string | null) => void;\n}\n\nexport function useImageUploader({\n  siteId,\n  templateId,\n  dbField,\n  folder = 'uploads',\n  label,\n  initialUrl,\n  onChange,\n}: UseImageUploaderOptions) {\n  const [preview, setPreview] = useState<string | null>(initialUrl ?? null);\n  const [uploading, setUploading] = useState(false);\n\n  function sanitizeFilename(filename: string): string {\n    const parts = filename.split('.');\n    const ext = parts.pop(); // file extension\n    const base = parts.join('-').replace(/\\s+/g, '-');\n    const timestamp = Date.now(); // or use dayjs() for formatted date\n    return `${base}-${timestamp}.${ext}`.toLowerCase();\n  }\n\n  const uploadImage = async (file: File) => {\n    if (!file) return;\n\n    const cleanName = sanitizeFilename(file.name);\n    const filePath = `${folder}/${siteId}/${cleanName}`;\n    setUploading(true);\n    setPreview(URL.createObjectURL(file));\n\n    const { error: uploadError } = await supabase.storage\n      .from('site-images')\n      .upload(filePath, file, { upsert: true });\n\n    if (uploadError) {\n      console.error('Upload error:', uploadError.message);\n      setUploading(false);\n      return;\n    }\n\n    const { data: publicData } = supabase.storage.from('site-images').getPublicUrl(filePath);\n\n    const publicUrl = publicData?.publicUrl;\n    if (!publicUrl) return;\n\n    const { error: updateError } = await supabase\n      .from('templates')\n      .update({\n        [dbField]: publicUrl,\n        [`${dbField}_meta`]: {\n          originalName: file.name,\n          path: filePath,\n          uploadedAt: new Date().toISOString(),\n        },\n      })\n      .eq('id', templateId);\n\n    if (updateError) {\n      console.error('DB update error:', updateError.message);\n    } else {\n      setPreview(publicUrl);\n      onChange?.(publicUrl);\n    }\n\n    setUploading(false);\n  };\n\n  const removeImage = async () => {\n    if (!preview) return;\n\n    const { data: bucketInfo } = supabase.storage.from('site-images').getPublicUrl('');\n    const bucketUrl = bucketInfo?.publicUrl;\n    const path = preview.replace(`${bucketUrl}/`, '');\n\n    const { error: deleteError } = await supabase.storage.from('site-images').remove([path]);\n\n    if (deleteError) {\n      console.error('Storage delete error:', deleteError.message);\n      return;\n    }\n\n    const { error: updateError } = await supabase\n      .from('templates')\n      .update({ [dbField]: null })\n      .eq('id', templateId);\n\n    if (updateError) {\n      console.error('DB remove error:', updateError.message);\n    } else {\n      setPreview(null);\n      onChange?.(null);\n    }\n  };\n\n  return {\n    preview,\n    uploading,\n    uploadImage,\n    removeImage,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useIsAdmin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useLastSeen.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useLatestTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useLeads.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useLiveAdminStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useLiveDraftStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useLiveTable.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'filter' and 'sort'. Either include them or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":93,"suggestions":[{"desc":"Update the dependencies array to be: [table, filter.column, filter.operator, filter.value, sort.column, sort.ascending, filter, sort]","fix":{"range":[2258,2345],"text":"[table, filter.column, filter.operator, filter.value, sort.column, sort.ascending, filter, sort]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { supabase } from '../admin/lib/supabaseClient';\n\ntype Filter = { column: keyof any; operator: 'eq' | 'neq'; value: any };\ntype Sort = { column: keyof any; ascending?: boolean };\n\nexport function useLiveTable<T extends { id: string | number }>(\n  table: string,\n  filter?: Filter,\n  sort?: Sort\n): T[] {\n  const [rows, setRows] = useState<T[]>([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchInitial = async () => {\n      let query = supabase.from(table).select('*');\n\n      if (filter) {\n        query = query.filter(filter.column as string, filter.operator, filter.value);\n      }\n\n      if (sort) {\n        query = query.order(sort.column as string, {\n          ascending: sort.ascending ?? true,\n        });\n      }\n\n      const { data, error } = await query;\n      if (!error && mounted) setRows((data as T[]) || []);\n    };\n\n    fetchInitial();\n\n    const subscription = supabase\n      .channel(`realtime:${table}`)\n      .on('postgres_changes', { event: '*', schema: 'public', table }, (payload) => {\n        const applyFilter = (row: T) => {\n          if (!filter) return true;\n          switch (filter.operator) {\n            case 'eq':\n              return row[filter.column as keyof T] === filter.value;\n            case 'neq':\n              return row[filter.column as keyof T] !== filter.value;\n            default:\n              return true;\n          }\n        };\n\n        setRows((prev) => {\n          const updated = [...prev];\n          const index = updated.findIndex((r) => r.id === (payload.new as T)?.id);\n\n          switch (payload.eventType) {\n            case 'INSERT':\n              return applyFilter(payload.new as T) ? [...updated, payload.new as T] : updated;\n            case 'UPDATE':\n              if (index !== -1 && applyFilter(payload.new as T)) {\n                updated[index] = payload.new as T;\n              }\n              return updated;\n            case 'DELETE':\n              return updated.filter((r) => r.id !== (payload.old as T)?.id);\n            default:\n              return updated;\n          }\n        });\n      })\n      .subscribe();\n\n    return () => {\n      mounted = false;\n      supabase.removeChannel(subscription);\n    };\n  }, [table, filter?.column, filter?.operator, filter?.value, sort?.column, sort?.ascending]);\n\n  return rows;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useLiveTableWrapper.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'filter' and 'sort'. Either include them or remove the dependency array.","line":22,"column":6,"nodeType":"ArrayExpression","endLine":22,"endColumn":59,"suggestions":[{"desc":"Update the dependencies array to be: [filter, sort, table]","fix":{"range":[532,585],"text":"[filter, sort, table]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":22,"column":14,"nodeType":"CallExpression","endLine":22,"endColumn":36},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":22,"column":38,"nodeType":"CallExpression","endLine":22,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\n\nexport function useLiveTableWrapper<T>(table: string, filter: any, sort: any): T[] {\n  const [data, setData] = useState<T[]>([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      const mod = await import('./useLiveTable.jsx');\n      const result = mod.useLiveTable<{ id: string | number } & T>(table, filter, sort);\n      if (mounted) setData(result);\n    };\n\n    fetchData();\n\n    return () => {\n      mounted = false;\n    };\n  }, [table, JSON.stringify(filter), JSON.stringify(sort)]);\n\n  return data;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useLogNotFound.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useNavBadge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useNavBadges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useQueryFlash.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'key' and 'searchParams'. Either include them or remove the dependency array.","line":18,"column":6,"nodeType":"ArrayExpression","endLine":18,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [key, searchParams]","fix":{"range":[639,663],"text":"[key, searchParams]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":18,"column":7,"nodeType":"ChainExpression","endLine":18,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\n\nexport function useQueryFlash(key: string): string | null {\n  const searchParams = useSearchParams();\n  const [value, setValue] = useState<string | null>(null);\n\n  useEffect(() => {\n    const param = searchParams?.get(key);\n    if (param && typeof param === 'string') {\n      setValue(param);\n\n      // Strip it from the URL without full reload\n      const rest = new URLSearchParams(searchParams?.toString() || '');\n      rest.delete(key);\n      window.location.href = `${window.location.pathname}?${rest.toString()}`;\n    }\n  }, [searchParams?.get(key)]); // re-run if query changes\n\n  return value;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useQueryParam.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useRedirectAfterLogin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useResolvedRole.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'resolveRole' is assigned a value but never used.","line":43,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { supabase } from '@/lib/supabase/client';\n\nexport function useResolvedRole(): [string | null, () => Promise<void>] {\n  const [role, setRole] = useState<string | null>(null);\n\n  const resolveRole = async () => {\n    const { data: sessionData } = await supabase.auth.getSession();\n    const user = sessionData.session?.user;\n\n    if (!user) {\n      setRole(null);\n      return;\n    }\n\n    const email = user.email ?? '';\n    const cacheKey = `cached-role-${email}`;\n    let resolvedRole = localStorage.getItem(cacheKey) || 'viewer';\n\n    const { data: profile } = await supabase\n      .from('user_profiles')\n      .select('role')\n      .eq('user_id', user.id)\n      .maybeSingle();\n\n    if (profile?.role) {\n      resolvedRole = profile.role;\n      localStorage.setItem(cacheKey, resolvedRole);\n    }\n\n    setRole(resolvedRole);\n  };\n\n  useEffect(() => {\n    resolveRole();\n  }, []);\n\n  return [role, resolveRole];\n}\n\nexport function useRoleAccessGuard(allowedRoles: string[]) {\n  const [role, resolveRole] = useResolvedRole();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!role) return;\n\n    const email = localStorage.getItem('cached-email') ?? '';\n    const isOwner = email === 'sandonjurowski@gmail.com';\n\n    if (!allowedRoles.includes(role) && !isOwner) {\n      router.push('/unauthorized');\n    }\n  }, [role, allowedRoles, router]);\n\n  return role;\n}\n\nexport async function getServerResolvedRole(userId: string): Promise<string> {\n  const { data: profile } = await supabase\n    .from('user_profiles')\n    .select('role')\n    .eq('user_id', userId)\n    .maybeSingle();\n\n  return profile?.role ?? 'viewer';\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useRoleAccess.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useSession.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":12,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { supabase } from '@/lib/supabase/client';\n\nexport function useSession() {\n  const [user, setUser] = useState<null | { id: string; email: string; role: string }>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const getUser = async () => {\n      const { data, error } = await supabase.auth.getUser();\n      if (data?.user) {\n        // Optionally fetch custom role from your own profile table\n        setUser({ id: data.user.id, email: data.user.email!, role: 'admin' }); // hardcoded for now\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    };\n    getUser();\n  }, []);\n\n  return { user, loading };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useSessionReady.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useSetSessionFromHash.ts","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Insert `⏎······`","line":24,"column":18,"nodeType":null,"messageId":"insert","endLine":24,"endColumn":18,"fix":{"range":[657,657],"text":"\n      "}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [router]","fix":{"range":[1002,1004],"text":"[router]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// hooks/useSetSessionFromHash.ts\n'use client';\n\nimport { useEffect } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport { useRouter } from 'next/navigation';\n\nexport function useSetSessionFromHash() {\n  const router = useRouter();\n\n  useEffect(() => {\n    const hash = window.location.hash;\n\n    if (!hash) return;\n\n    const params = new URLSearchParams(hash.substring(1));\n    const accessToken = params.get('access_token');\n    const refreshToken = params.get('refresh_token');\n\n    if (!accessToken || !refreshToken) return;\n\n    console.log('[🔐 Extracted tokens from hash]', { accessToken, refreshToken });\n\n    supabase.auth.setSession({ access_token: accessToken, refresh_token: refreshToken })\n      .then(({ error }) => {\n        if (error) {\n          console.error('[❌ Failed to set session]', error);\n        } else {\n          console.log('[✅ Supabase session restored]');\n          router.replace('/'); // 🔄 Clean up the hash from URL\n        }\n      });\n  }, []);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useSharedPreview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useSmartNav.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useTypedQueryParam.ts","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎··key:·string,⏎··fallback:·any,⏎··type:·T,⏎··schema?:·z.ZodTypeAny⏎` with `key:·string,·fallback:·any,·type:·T,·schema?:·z.ZodTypeAny`","line":41,"column":3,"nodeType":null,"messageId":"replace","endLine":46,"endColumn":1,"fix":{"range":[939,1007],"text":"key: string, fallback: any, type: T, schema?: z.ZodTypeAny"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { z } from 'zod';\nimport { parseTypedQueryValue } from '@/admin/lib/query/parseTypedQueryValue';\n\ntype ParamReturn<T> = [\n  T extends 'string[]'\n    ? string[]\n    : T extends 'number[]'\n      ? number[]\n      : T extends 'string'\n        ? string\n        : T extends 'number'\n          ? number\n          : T extends 'date'\n            ? Date\n            : T extends 'date[]'\n              ? Date[]\n              : T extends 'json'\n                ? Record<string, any>\n                : T extends 'json[]'\n                  ? Record<string, any>[]\n                  : T extends 'boolean'\n                    ? boolean\n                    : never,\n  (value: any) => void,\n];\n\nexport default function useTypedQueryParam<\n  T extends\n    | 'string'\n    | 'number'\n    | 'boolean'\n    | 'string[]'\n    | 'number[]'\n    | 'date'\n    | 'date[]'\n    | 'json'\n    | 'json[]',\n>(\n  key: string,\n  fallback: any,\n  type: T,\n  schema?: z.ZodTypeAny\n): ParamReturn<T> {\n  const router = useRouter();\n  const searchParams = new URLSearchParams(\n    typeof window !== 'undefined' ? window.location.search : ''\n  );\n\n  const setParam = (value: any) => {\n    const newParams = new URLSearchParams(window.location.search);\n\n    if (Array.isArray(value)) {\n      newParams.delete(key);\n      value.forEach((v) => {\n        const serialized =\n          typeof v === 'object' ? encodeURIComponent(JSON.stringify(v)) : String(v);\n        newParams.append(key, serialized);\n      });\n    } else if (value instanceof Date) {\n      newParams.set(key, value.toISOString());\n    } else if (typeof value === 'object' && value !== null) {\n      newParams.set(key, encodeURIComponent(JSON.stringify(value)));\n    } else {\n      newParams.set(key, String(value));\n    }\n\n    const newUrl = `${window.location.pathname}?${newParams.toString()}`;\n    router.replace(newUrl);\n  };\n\n  if (!searchParams.has(key) && fallback !== undefined && type !== 'json') {\n    searchParams.set(key, String(fallback));\n    const newUrl = `${window.location.pathname}?${searchParams.toString()}`;\n    router.replace(newUrl);\n  }\n\n  const values = searchParams.getAll(key);\n  const value = ['string[]', 'number[]', 'date[]', 'json[]'].includes(type)\n    ? values\n    : searchParams.get(key);\n\n  const parsed: ParamReturn<T>[0] = parseTypedQueryValue(\n    key,\n    value,\n    fallback,\n    type,\n    schema as any,\n    router as any\n  );\n\n  return [parsed, setParam];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useUserMap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/hooks/useZodPlaygroundState.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'isEmbed', 'loadSchemaFromQueryParam', and 'router'. Either include them or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [isEmbed, loadSchemaFromQueryParam, params, router]","fix":{"range":[2545,2553],"text":"[isEmbed, loadSchemaFromQueryParam, params, router]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { createClient } from '@supabase/supabase-js';\nimport { ZodTypeAny } from 'zod';\nimport { defaultSchema } from '@/admin/lib/defaultSchema';\nimport { jsonSchemaToZod } from '@/admin/utils/jsonSchemaToZod';\nimport { zodToJsonSchema } from '@/admin/utils/zodToJsonSchema';\nimport { useCurrentUser } from '@/hooks/useCurrentUser';\nimport { logEmbedView } from '@/admin/lib/logEmbedView';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport function useZodPlaygroundState() {\n  const router = useRouter();\n  const params = useSearchParams();\n  const { user } = useCurrentUser();\n\n  // was: ts-expect-error TS2589: deep type inference\n  const [schema, setSchema] = useState<ZodTypeAny>(defaultSchema);\n  const [error, setError] = useState<string | null>(null);\n  const [jsonExport, setJsonExport] = useState<string | null>(null);\n  const [shortLink, setShortLink] = useState<string | null>(null);\n  const [slackUsername, setSlackUsername] = useState('');\n\n  const isEmbed =\n    typeof window !== 'undefined' &&\n    new URLSearchParams(window.location.search).get('embed') === '1';\n\n  const loadSchemaFromQueryParam = () => {\n    const encoded = params?.get('schema');\n    if (!encoded) return;\n\n    try {\n      const decoded = decodeURIComponent(encoded);\n      const parsed = JSON.parse(decoded);\n      const zodified = jsonSchemaToZod(parsed);\n      // was: @ts-expect-error TS2589: deep type inference\n      setSchema(zodified);\n      setJsonExport(decoded);\n    } catch (err: any) {\n      setError('Invalid schema from query param: ' + err.message);\n    }\n  };\n\n  useEffect(() => {\n    const schemaId = params?.get('schema_id');\n    if (schemaId) {\n      supabase\n        .from('schema_links')\n        .select('*')\n        .eq('id', schemaId)\n        .single()\n        .then(({ data, error }) => {\n          if (error || !data) {\n            router.push('/admin/links?error=schema_id_not_found');\n            return;\n          }\n\n          try {\n            const parsed = JSON.parse(data.json);\n            const zodified = jsonSchemaToZod(parsed);\n            setSchema(zodified);\n            setJsonExport(data.json);\n            if (isEmbed) logEmbedView(schemaId);\n          } catch (err: any) {\n            setError('Failed to parse schema from ID: ' + err.message);\n          }\n        });\n\n      return;\n    }\n\n    loadSchemaFromQueryParam();\n  }, [params]);\n\n  const exportJsonSchema = () => {\n    try {\n      // was: @ts-expect-error TS2589: deep type inference\n      const json = zodToJsonSchema(schema);\n      const stringified = JSON.stringify(json, null, 2);\n      setJsonExport(stringified);\n\n      const blob = new Blob([stringified], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'schema.json';\n      a.click();\n      URL.revokeObjectURL(url);\n    } catch (err: any) {\n      setError('Failed to export schema: ' + err.message);\n    }\n  };\n\n  const handleCreateShortLink = async () => {\n    if (!user || !jsonExport) return;\n\n    const { data, error } = await supabase\n      .from('schema_links')\n      .insert({\n        user_id: user.id,\n        json: jsonExport,\n        slack_username: slackUsername,\n      })\n      .select()\n      .single();\n\n    if (error) return alert('Failed to create short link');\n    setShortLink(`${window.location.origin}/admin/zod-playground?schema_id=${data.id}`);\n  };\n\n  const handleDeploy = (payload: Record<string, any>) => {\n    const encoded = encodeURIComponent(JSON.stringify(payload));\n    router.push(`/launch?params=${encoded}`);\n  };\n\n  return {\n    schema,\n    setSchema,\n    error,\n    setError,\n    jsonExport,\n    setJsonExport,\n    shortLink,\n    setShortLink,\n    slackUsername,\n    setSlackUsername,\n    exportJsonSchema,\n    handleCreateShortLink,\n    handleDeploy,\n    isEmbed,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/init.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/admin/routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/admin/templates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/api/compareSlugsClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/api/json.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/api/method.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/api/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/api/openapi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/api/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/api/withInputOutputValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/api/withQueryValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/auth/AuthContext.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `localStorage.getItem(`cached-role-${email}`)·??·'viewer'` with `(localStorage.getItem(`cached-role-${email}`)·??·'viewer')`","line":30,"column":13,"nodeType":null,"messageId":"replace","endLine":30,"endColumn":69,"fix":{"range":[822,878],"text":"(localStorage.getItem(`cached-role-${email}`) ?? 'viewer')"}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `·data:·{·user·},·error` with `⏎······data:·{·user·},⏎······error,⏎···`","line":37,"column":12,"nodeType":null,"messageId":"replace","endLine":37,"endColumn":34,"fix":{"range":[1056,1078],"text":"\n      data: { user },\n      error,\n   "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profileError' is assigned a value but never used.","line":47,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":47},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSession'. Either include it or remove the dependency array.","line":100,"column":6,"nodeType":"ArrayExpression","endLine":100,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSession]","fix":{"range":[2608,2610],"text":"[loadSession]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\n\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '@/lib/supabase/client';\nimport type { User } from '@supabase/supabase-js';\n\ntype AuthState = {\n  user: User | null;\n  role: string | null;\n  ready: boolean;\n  roleSource: string;\n  refetch: () => void;\n};\n\nconst AuthContext = createContext<AuthState>({\n  user: null,\n  role: null,\n  ready: false,\n  roleSource: 'init',\n  refetch: () => {},\n});\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [role, setRole] = useState<string | null>(null);\n  const [roleSource, setRoleSource] = useState('init');\n  const [ready, setReady] = useState(false);\n\n  const getCachedRole = (email: string | undefined | null) =>\n    email ? localStorage.getItem(`cached-role-${email}`) ?? 'viewer' : 'viewer';\n\n  const cacheRole = (email: string, role: string) => {\n    localStorage.setItem(`cached-role-${email}`, role);\n  };\n\n  const loadSession = async () => {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    if (error || !user) {\n      setUser(null);\n      setRole(null);\n      setReady(true);\n      return;\n    }\n\n    setUser(user);\n\n    const { data: profile, error: profileError } = await supabase\n      .from('user_profiles')\n      .select('role')\n      .eq('user_id', user.id)\n      .maybeSingle();\n\n    if (profile?.role) {\n      setRole(profile.role);\n      setRoleSource('profile');\n      cacheRole(user.email ?? '', profile.role);\n    } else {\n      const fallbackRole = getCachedRole(user.email);\n      setRole(fallbackRole);\n      setRoleSource('cache');\n    }\n\n    setReady(true);\n  };\n\n  useEffect(() => {\n    loadSession();\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      const u = session?.user ?? null;\n      setUser(u);\n\n      if (u?.id) {\n        supabase\n          .from('user_profiles')\n          .select('role')\n          .eq('user_id', u.id)\n          .maybeSingle()\n          .then(({ data }) => {\n            if (data?.role) {\n              setRole(data.role);\n              setRoleSource('onAuthChange-profile');\n              cacheRole(u.email ?? '', data.role);\n            } else {\n              const fallback = getCachedRole(u.email);\n              setRole(fallback);\n              setRoleSource('onAuthChange-cache');\n            }\n            setReady(true);\n          });\n      } else {\n        setRole(null);\n        setReady(true);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, role, roleSource, ready, refetch: loadSession }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useCurrentUser() {\n  return useContext(AuthContext);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/auth/AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/auth/verifyRoleFromJWT.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/domainTracker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/generateHero.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/generateServices.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/geoCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/getBadgeForReferrer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/leads/photoProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/loadLeads.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/nav/links.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/og/renderOgImage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/providers/SessionProvider.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎··createContext,⏎··useContext,⏎··useEffect,⏎··useState,⏎··type·ReactNode,⏎` with `·createContext,·useContext,·useEffect,·useState,·type·ReactNode·`","line":3,"column":9,"nodeType":null,"messageId":"replace","endLine":9,"endColumn":1,"fix":{"range":[23,98],"text":" createContext, useContext, useEffect, useState, type ReactNode "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used.","line":11,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":23},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `·data:·{·user·}` with `⏎······data:·{·user·},⏎···`","line":36,"column":12,"nodeType":null,"messageId":"replace","endLine":36,"endColumn":27,"fix":{"range":[908,923],"text":"\n      data: { user },\n   "}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎······{children}⏎····` with `{children}`","line":74,"column":63,"nodeType":null,"messageId":"replace","endLine":76,"endColumn":5,"fix":{"range":[1729,1751],"text":"{children}"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\n\nimport {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  type ReactNode,\n} from 'react';\nimport { supabase } from '@/lib/supabase/client'; // ✅ Use singleton\nimport type { Database } from '@/types/supabase';\n\ntype SessionContextType = {\n  user: {\n    id: string;\n    email: string;\n    avatar_url?: string;\n  } | null;\n  role: string;\n  supabase: ReturnType<typeof supabase>;\n};\n\nconst SessionContext = createContext<SessionContextType | null>(null);\n\nexport function useSession() {\n  const context = useContext(SessionContext);\n  if (!context) throw new Error('useSession must be used within <SessionProvider>');\n  return context;\n}\n\nexport function SessionProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<SessionContextType['user'] | null>(null);\n  const [role, setRole] = useState<string>('guest');\n\n  async function refreshUser() {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) {\n      setUser(null);\n      setRole('guest');\n      return;\n    }\n\n    setUser({\n      id: user.id,\n      email: user.email ?? '',\n      avatar_url: user.user_metadata?.avatar_url ?? '',\n    });\n\n    const { data: profile } = await supabase\n      .from('user_profiles')\n      .select('role')\n      .eq('user_id', user.id)\n      .maybeSingle();\n\n    setRole(profile?.role || 'guest');\n  }\n\n  useEffect(() => {\n    refreshUser();\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((event) => {\n      console.log(`[🔄 Supabase Auth Event] ${event}`);\n      refreshUser();\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <SessionContext.Provider value={{ user, role, supabase }}>\n      {children}\n    </SessionContext.Provider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/qr/helpers.block-qr.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'registerFont' is defined but never used.","line":3,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loadImage' is defined but never used.","line":3,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hash' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getOutputPath' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ensureDir' is defined but never used.","line":17,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createZipFromHandleDir' is defined but never used.","line":22,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'label' is assigned a value but never used.","line":45,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'font' is assigned a value but never used.","line":47,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fontSize' is assigned a value but never used.","line":48,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'color' is assigned a value but never used.","line":49,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'background' is assigned a value but never used.","line":50,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mode' is assigned a value but never used.","line":52,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'zip' is assigned a value but never used.","line":53,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'signed' is assigned a value but never used.","line":54,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🔧 Extracted helper functions for /block-qr route\n\nimport { createCanvas, registerFont, loadImage } from 'canvas';\nimport QRCode from 'qrcode';\nimport crypto from 'node:crypto';\nimport path from 'node:path';\nimport fs from 'node:fs/promises';\nimport archiver from 'archiver';\nimport { NextRequest } from 'next/server';\n\nfunction hash(input: string): string {\n  return crypto.createHash('sha1').update(input).digest('hex');\n}\nfunction getOutputPath(handle: string, filename: string) {\n  return path.resolve('public/generated-qr', handle, filename);\n}\nasync function ensureDir(handle: string) {\n  const dir = path.resolve('public/generated-qr', handle);\n  await fs.mkdir(dir, { recursive: true });\n  return dir;\n}\nasync function createZipFromHandleDir(handle: string) {\n  const dir = path.resolve('public/generated-qr', handle);\n  const zipPath = path.resolve(dir, 'archive.zip');\n  const output = await fs.open(zipPath, 'w');\n  const archive = archiver('zip', { zlib: { level: 9 } });\n\n  const stream = output.createWriteStream();\n  archive.pipe(stream);\n\n  const files = await fs.readdir(dir);\n  for (const file of files) {\n    if (file.endsWith('.png') || file.endsWith('.svg')) {\n      archive.file(path.join(dir, file), { name: file });\n    }\n  }\n  archive.finalize();\n  return output;\n}\n\nexport async function POST(req: NextRequest) {\n  const {\n    blockId,\n    handle,\n    label = `block-${blockId}`,\n    size = 512,\n    font = 'Inter',\n    fontSize = 20,\n    color = '#000000',\n    background = '#ffffff',\n    format = 'png',\n    mode = 'inline',\n    zip = false,\n    signed = false,\n  } = await req.json();\n\n  if (!blockId || !handle) {\n    return Response.json({ error: 'Missing blockId or handle' }, { status: 400 });\n  }\n\n  const url = `https://quicksites.ai/world/${handle}#block-${blockId}`;\n  const canvas = createCanvas(size, size);\n  await QRCode.toCanvas(canvas, url);\n  const buffer = canvas.toBuffer();\n  const filename = `${blockId}.${format}`;\n  const filepath = path.resolve('public/generated-qr', handle, filename);\n  await fs.writeFile(filepath, buffer);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/referral.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/resolveAdminPath.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/resolveGeo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/sdk/zod-playground-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/seo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/server/logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/siteHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/slugHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/store-referral.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/client.ts","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎··|·ReturnType<typeof·createBrowserClient<Database>>⏎·` with `·ReturnType<typeof·createBrowserClient<Database>>`","line":7,"column":27,"nodeType":null,"messageId":"replace","endLine":9,"endColumn":2,"fix":{"range":[197,252],"text":" ReturnType<typeof createBrowserClient<Database>>"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { createBrowserClient } from '@supabase/ssr';\nimport type { Database } from '@/types/supabase';\n\n// Singleton cache to avoid multiple instantiations\nlet browserSupabaseClient:\n  | ReturnType<typeof createBrowserClient<Database>>\n  | null = null;\n\n// Optional: Set this flag during debugging to see where second inits come from\nconst DEBUG_SUPABASE_CLIENT = false;\n\nif (browserSupabaseClient) {\n  if (DEBUG_SUPABASE_CLIENT) {\n    console.error('[❌ SupabaseClient] Already instantiated');\n    console.trace(); // Optional: print call stack\n  }\n  throw new Error('[❌ SupabaseClient] Multiple browser Supabase clients detected');\n}\n\nbrowserSupabaseClient = createBrowserClient<Database>(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  {\n    auth: {\n      persistSession: true,\n      autoRefreshToken: true,\n      detectSessionInUrl: true,\n    },\n  }\n);\n\nexport const supabase = browserSupabaseClient;\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/createScopedClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/getRoleRedirectTarget.ts","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎····?·roleRoutes[role]·||·fallbackRoute⏎···` with `·?·roleRoutes[role]·||·fallbackRoute`","line":52,"column":24,"nodeType":null,"messageId":"replace","endLine":54,"endColumn":4,"fix":{"range":[1309,1353],"text":" ? roleRoutes[role] || fallbackRoute"}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `/:([a-zA-Z0-9_]+)/g,·(_,·key)·=>⏎···` with `⏎····/:([a-zA-Z0-9_]+)/g,⏎····(_,·key)·=>`","line":62,"column":41,"nodeType":null,"messageId":"replace","endLine":63,"endColumn":4,"fix":{"range":[1507,1543],"text":"\n    /:([a-zA-Z0-9_]+)/g,\n    (_, key) =>"}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎······?·{·id:·user.id,·email:·user.email·}⏎·····` with `·?·{·id:·user.id,·email:·user.email·}`","line":70,"column":15,"nodeType":null,"messageId":"replace","endLine":72,"endColumn":6,"fix":{"range":[1646,1695],"text":" ? { id: user.id, email: user.email }"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use server';\n\nimport { getSessionContext } from './getSessionContext';\nimport { getSlugContext } from './getSlugContext';\n\ntype RoleMap = Partial<Record<string, string>>;\n\ntype Options = {\n  roleRoutes?: RoleMap;\n  fallbackRoute?: string;\n  replacements?: Record<string, string>;\n};\n\ntype RedirectTargetResult = {\n  path: string;\n  role: string;\n  slug: string;\n  user: {\n    id: string;\n    email: string | null;\n  } | null;\n  slugContext: {\n    source: 'header' | 'cookie' | 'host' | 'lookup' | 'default';\n    host: string;\n    domain?: string;\n    tenantId?: string | null;\n  };\n};\n\n/**\n * Resolves the redirect path a user should be routed to based on their role and slug context.\n * Supports route templates like /viewer/:slug and dynamic slug resolution via host, cookie, or lookup.\n */\nexport async function getRoleRedirectTarget({\n  roleRoutes = {\n    admin: '/admin/dashboard',\n    owner: '/admin/dashboard',\n    reseller: '/admin/dashboard',\n    viewer: '/viewer/:slug',\n  },\n  fallbackRoute = '/unauthorized',\n  replacements = {},\n}: Options = {}): Promise<RedirectTargetResult> {\n  const { user, role } = await getSessionContext();\n  const slugContext = await getSlugContext({\n    subdomainSlugMode: true,\n    resolveTenantId: true,\n  });\n\n  const { slug } = slugContext;\n\n  const template = user\n    ? roleRoutes[role] || fallbackRoute\n    : '/login';\n\n  const tokenMap: Record<string, string> = {\n    slug,\n    role,\n    ...(replacements || {}),\n  };\n\n  const resolvedPath = template.replace(/:([a-zA-Z0-9_]+)/g, (_, key) =>\n    tokenMap[key] ?? `:${key}`\n  );\n\n  return {\n    path: resolvedPath,\n    role,\n    slug,\n    user: user\n      ? { id: user.id, email: user.email }\n      : null,\n    slugContext,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/getScopedHeaders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/getServerContext.ts","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Delete `⏎`","line":9,"column":1,"nodeType":null,"messageId":"delete","endLine":10,"endColumn":1,"fix":{"range":[273,274],"text":""}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use server';\n\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Headers as ServerHeaders } from 'next/dist/compiled/@edge-runtime/primitives';\nimport type { Database } from '@/types/supabase';\n\nimport { createServerClient } from '@supabase/ssr';\n\n\n/**\n * Safely returns request-scoped Supabase client, headers, and cookies.\n * Use only in server components, route handlers, or middleware.\n */\nexport async function getServerContext(): Promise<{\n  supabase: SupabaseClient<Database>;\n  cookies: ReturnType<Awaited<typeof import('next/headers')>['cookies']>;\n  headers: ServerHeaders;\n}> {\n  const { cookies, headers } = await import('next/headers');\n\n  const cookieStore = cookies();\n  const headerStore = headers();\n\n  const supabase = createServerClient<Database>({\n    cookies: async () => cookieStore,\n  });\n\n  return {\n    supabase,\n    cookies: cookieStore,\n    headers: headerStore,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/getServerUserProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/getSessionContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/getSlugContext.ts","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Delete `⏎···`","line":41,"column":34,"nodeType":null,"messageId":"delete","endLine":42,"endColumn":4,"fix":{"range":[1354,1358],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎····slugFromHeader·||⏎····slugFromCookie·||⏎····slugFromLookup·||⏎···` with `·slugFromHeader·||·slugFromCookie·||·slugFromLookup·||`","line":50,"column":15,"nodeType":null,"messageId":"replace","endLine":54,"endColumn":4,"fix":{"range":[1631,1701],"text":" slugFromHeader || slugFromCookie || slugFromLookup ||"}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":59,"column":5,"nodeType":null,"messageId":"insert","endLine":59,"endColumn":5,"fix":{"range":[1786,1786],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `··`","line":60,"column":1,"nodeType":null,"messageId":"insert","endLine":60,"endColumn":1,"fix":{"range":[1797,1797],"text":"  "}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `····` with `········`","line":61,"column":1,"nodeType":null,"messageId":"replace","endLine":61,"endColumn":5,"fix":{"range":[1818,1822],"text":"        "}},{"ruleId":"prettier/prettier","severity":1,"message":"Insert `····`","line":62,"column":1,"nodeType":null,"messageId":"insert","endLine":62,"endColumn":1,"fix":{"range":[1833,1833],"text":"    "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":"'use server';\n\nimport { headers as getHeaders, cookies as getCookies } from 'next/headers';\nimport { lookupSlugByHost } from '../supabase/lookupSlugByHost';\nimport { lookupTenantBySlug } from '../supabase/lookupTenantBySlug';\n\nexport type SlugContext = {\n  slug: string;\n  source: 'header' | 'cookie' | 'host' | 'lookup' | 'default';\n  host: string;\n  domain?: string;\n  tenantId?: string | null;\n};\n\ntype Options = {\n  subdomainSlugMode?: boolean;\n  resolveTenantId?: boolean;\n  headersOverride?: Headers;\n  cookiesOverride?: ReturnType<typeof getCookies>;\n};\n\n/**\n * Resolves a context-aware slug from headers, cookies, or fallback Supabase lookup.\n * Supports subdomain parsing and tenant ID resolution.\n */\nexport async function getSlugContext({\n  subdomainSlugMode = true,\n  resolveTenantId = false,\n  headersOverride,\n  cookiesOverride,\n}: Options = {}): Promise<SlugContext> {\n  const headers = headersOverride || (getHeaders() as unknown as Headers);\n  const cookies = cookiesOverride || (getCookies() as unknown as ReturnType<typeof getCookies>);\n\n  const rawHost = headers.get('x-forwarded-host') || headers.get('host') || '';\n  const host = rawHost.toLowerCase().trim();\n  const domain = host.replace(/^www\\./, '');\n\n  // 1. Try explicit header (e.g. from reverse proxy or middleware)\n  const slugFromHeader =\n    headers.get('x-site-slug') ||\n    (subdomainSlugMode ? host.split('.')[0] : null);\n\n  // 2. Try cookie (e.g. SSR remember-slug)\n  const slugFromCookie = (await cookies).get('site_slug')?.value ?? null;\n\n  // 3. DB fallback via Supabase\n  const slugFromLookup = await lookupSlugByHost(host);\n\n  const slug =\n    slugFromHeader ||\n    slugFromCookie ||\n    slugFromLookup ||\n    'default';\n\n  const source = slugFromHeader\n    ? 'header'\n    : slugFromCookie\n    ? 'cookie'\n    : slugFromLookup\n    ? 'lookup'\n    : 'default';\n\n  // 4. Optional: resolve tenant ID from slug\n  let tenantId: string | null = null;\n\n  if (resolveTenantId && slug !== 'default') {\n    tenantId = await lookupTenantBySlug(slug); // implement as needed\n  }\n\n  return {\n    slug,\n    source,\n    host,\n    domain,\n    tenantId,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/lookupSlugByHost.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/lookupTenantBySlug.ts","messages":[],"suppressedMessages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"❌ Do not use `await cookies()`. This function is synchronous in App Router.","line":7,"column":29,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":7,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/middlewareClient.ts","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎··req:·NextRequest⏎` with `req:·NextRequest`","line":7,"column":48,"nodeType":null,"messageId":"replace","endLine":9,"endColumn":1,"fix":{"range":[295,315],"text":"req: NextRequest"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// lib/supabase/middlewareClient.ts\nimport { createServerClient } from '@supabase/ssr';\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '@/types/supabase';\nimport type { NextRequest } from 'next/server';\n\nexport function createMiddlewareSupabaseClient(\n  req: NextRequest\n): SupabaseClient<Database> {\n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return req.cookies.get(name)?.value;\n        },\n      },\n    }\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/redirectByRoleServer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/server/getServerUserProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/universal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/supabase/useSupabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/useInviteGate.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'allow' and 'router'. Either include them or remove the dependency array.","line":15,"column":6,"nodeType":"ArrayExpression","endLine":15,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [allow, router]","fix":{"range":[379,381],"text":"[allow, router]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\n\nexport function useInviteGate(allow = false) {\n  const router = useRouter();\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const verified = localStorage.getItem('invite_verified') === 'true';\n\n    if (!allow && !verified) {\n      router.push('/early-access');\n    }\n  }, []);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/usePageSeo.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { usePathname, useRouter, useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { getPageSeo } from './seo';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\ntype SiteSeoFields = {\n  domain?: string;\n  seo_title?: string;\n  seo_description?: string;\n  twitter_handle?: string;\n  site_name?: string;\n};\n\nexport function usePageSeo({\n  title,\n  description,\n  noindex = false,\n}: {\n  title?: string;\n  description: string;\n  noindex?: boolean;\n}) {\n  const pathname = usePathname();\n  const asPath = useSearchParams()?.get('asPath');\n  const [site, setSite] = useState<SiteSeoFields>({});\n\n  useEffect(() => {\n    const slug = pathname?.split('/')[1]; // assumes /edit/[slug] or /view/[slug]\n\n    if (!slug) return;\n\n    supabase\n      .from('sites')\n      .select('domain, seo_title, seo_description, twitter_handle, site_name')\n      .eq('slug', slug)\n      .single()\n      .then(({ data }) => {\n        if (data) setSite(data);\n      });\n  }, [pathname]);\n\n  const derivedTitle =\n    title ||\n    site.seo_title ||\n    pathname\n      ?.replace(/^\\//, '')\n      .replace(/-/g, ' ')\n      .replace(/\\b\\w/g, (c) => c.toUpperCase()) ||\n    'Home';\n\n  const siteUrl = site.domain\n    ? `https://${site.domain}`\n    : process.env.NEXT_PUBLIC_SITE_URL || 'https://example.com';\n\n  const fullUrl = `${siteUrl}${asPath}`;\n\n  return {\n    ...getPageSeo({\n      title: derivedTitle,\n      description: description || site.seo_description || '',\n      slug: pathname || 'home',\n    }),\n    ...(noindex && { robots: 'noindex,nofollow' }),\n    canonical: fullUrl,\n    openGraph: {\n      url: fullUrl,\n      title: derivedTitle,\n      description: description || site.seo_description || '',\n      site_name: site.site_name || 'QuickSites',\n      type: 'website',\n    },\n    twitter: {\n      handle: site.twitter_handle || '@QuickSitesAI',\n      site: site.twitter_handle || '@QuickSitesAI',\n      cardType: 'summary_large_image',\n    },\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/useRefTracker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/next-seo.config.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":5,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":30,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// next-seo.config.js\nconst title = 'QuickSites';\nconst description = 'AI-powered local site generator and dashboard';\n\nexport default {\n  title,\n  description,\n  canonical: 'https://quicksites.ai',\n  openGraph: {\n    type: 'website',\n    locale: 'en_US',\n    url: 'https://quicksites.ai',\n    site_name: 'QuickSites',\n    title,\n    description,\n    images: [\n      {\n        url: '/assets/opengraph-image.dark.safe.png',\n        width: 1200,\n        height: 630,\n        alt: title,\n      },\n    ],\n  },\n  twitter: {\n    handle: '@quicksites_ai',\n    site: '@quicksites_ai',\n    cardType: 'summary_large_image',\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/next.rewrites.template.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/openapi-gen/generate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/openapi-gen/schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/__screenshots__/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/_sites/[slug].tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/about.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/admin/admin/branding/[id].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":109,"column":13,"nodeType":"JSXOpeningElement","endLine":109,"endColumn":87},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":115,"column":11,"nodeType":"JSXOpeningElement","endLine":119,"endColumn":13},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":125,"column":13,"nodeType":"JSXOpeningElement","endLine":125,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport QRCode from 'qrcode';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function BrandingProfilePage() {\n  const searchParams = useSearchParams();\n  const id = searchParams?.get('id') as string;\n  const [profile, setProfile] = useState<any>(null);\n  const [qr, setQr] = useState<string | null>(null);\n  const [accessOk, setAccessOk] = useState(false);\n  const [passwordAttempt, setPasswordAttempt] = useState('');\n\n  useEffect(() => {\n    if (!id || typeof id !== 'string') return;\n\n    supabase\n      .from('branding_profiles')\n      .select('*')\n      .eq('id', id)\n      .single()\n      .then(({ data }) => {\n        if (data) {\n          const accessParam = new URLSearchParams(window.location.search).get('access');\n          if (!data.access_token && !data.password) {\n            setAccessOk(true);\n          } else if (data.access_token && accessParam === data.access_token) {\n            setAccessOk(true);\n          } else {\n            setAccessOk(false);\n          }\n          setProfile(data);\n          const previewUrl = `${window.location.origin}/api/og/snapshot?theme=${data.theme}&brand=${data.brand}`;\n          QRCode.toDataURL(previewUrl).then(setQr);\n        }\n      });\n  }, [id]);\n\n  if (!profile) return <p className=\"p-6 text-sm text-muted-foreground\">Loading profile...</p>;\n\n  if (!accessOk && profile?.password) {\n    return (\n      <div className=\"p-6\">\n        <h2 className=\"text-lg font-semibold mb-2\">Password Required</h2>\n        <input\n          className=\"border px-2 py-1 rounded mr-2\"\n          placeholder=\"Enter password\"\n          value={passwordAttempt}\n          onChange={(e) => setPasswordAttempt(e.target.value)}\n        />\n        <button\n          className=\"bg-black text-white px-3 py-1 rounded\"\n          onClick={() => {\n            if (passwordAttempt === profile.password) setAccessOk(true);\n            else alert('Incorrect password');\n          }}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  const previewUrl = `/api/og/snapshot?theme=${profile.theme}&brand=${profile.brand}`;\n\n  async function downloadPDF() {\n    const html2pdf = (await import('html2pdf.js')).default;\n    const element = document.getElementById('branding-preview-pdf');\n    if (element) {\n      html2pdf()\n        .set({\n          filename: `${profile.name}-preview.pdf`,\n          margin: 10,\n          html2canvas: { scale: 2 },\n          jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },\n        })\n        .from(element)\n        .save();\n    }\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-6 space-y-6\">\n      <div id=\"branding-preview-pdf\" className=\"space-y-6\">\n        <h1 className=\"text-2xl font-bold\">{profile.name}</h1>\n\n        <div className=\"flex items-center gap-4\">\n          <span className=\"text-sm font-medium\">Theme:</span>\n          <span className=\"px-2 py-1 rounded bg-gray-200\">{profile.theme}</span>\n\n          <span className=\"text-sm font-medium\">Brand:</span>\n          <span className=\"px-2 py-1 rounded bg-gray-200\">{profile.brand}</span>\n\n          {profile.accent_color && (\n            <span\n              className=\"w-5 h-5 rounded-full border\"\n              style={{ backgroundColor: profile.accent_color }}\n            />\n          )}\n\n          {profile.logo_url && (\n            <img src={profile.logo_url} alt=\"Logo\" className=\"w-8 h-8 rounded-full\" />\n          )}\n        </div>\n\n        <div>\n          <p className=\"text-sm text-muted-foreground mb-1\">OG Preview:</p>\n          <img\n            src={previewUrl}\n            alt=\"OG Preview\"\n            className=\"w-full max-w-xl border shadow rounded\"\n          />\n        </div>\n\n        {qr && (\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-1\">QR Code:</p>\n            <img src={qr} alt=\"QR Code\" className=\"w-32 h-32 border rounded\" />\n          </div>\n        )}\n\n        <div>\n          <p className=\"text-sm\">Link:</p>\n          <code className=\"text-xs bg-gray-100 p-2 rounded block\">{previewUrl}</code>\n        </div>\n      </div>\n\n      <button className=\"bg-blue-600 text-white px-4 py-2 rounded mt-4\" onClick={downloadPDF}>\n        Download PDF Preview\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/announce.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function AnnouncePage() {\n  const [entries, setEntries] = useState([]);\n\n  useEffect(() => {\n    fetch('/announcements.json')\n      .then((res) => res.json())\n      .then(setEntries);\n  }, []);\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-6 text-white\">\n      <h1 className=\"text-3xl font-bold mb-4\">📣 Announcements</h1>\n      <ul className=\"space-y-6\">\n        {entries.map((a: any, i: number) => (\n          <li key={i} className=\"border-l-2 border-blue-500 pl-4\">\n            <div className=\"text-zinc-400 text-sm mb-1\">{a.date}</div>\n            <div className=\"text-white font-semibold\">{a.title}</div>\n            <div className=\"text-zinc-300 text-sm\">{a.body}</div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/block/[id].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":29,"column":7,"nodeType":"JSXOpeningElement","endLine":33,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { json } from '@/lib/api/json';\nimport { useEffect, useState } from 'react';\n\nexport default function BlockDetail() {\n  const searchParams = useSearchParams();\n  const id = searchParams?.get('id') as string;\n  const [block, setBlock] = useState<any>(null);\n\n  useEffect(() => {\n    if (!id) return;\n    fetch('/api/block?id=' + id)\n      .then((res) => res.json())\n      .then(setBlock);\n  }, [id]);\n\n  if (!block) return <div className=\"text-white p-6\">Loading...</div>;\n\n  return (\n    <div className=\"text-white p-6 max-w-xl mx-auto space-y-4\">\n      <h1 className=\"text-2xl font-bold\">\n        {block.emoji} {block.title}\n      </h1>\n      <p className=\"text-zinc-400\">{block.message}</p>\n      <p className=\"text-sm text-zinc-600\">\n        Lat: {block.lat}, Lon: {block.lon}\n      </p>\n      <img\n        src={`/api/block-qr?handle=${block.owner_handle || 'me'}&blockId=${block.id}`}\n        className=\"w-32 h-32 mt-4\"\n        alt=\"QR\"\n      />\n      <div>\n        <a\n          href={`/api/print-labels-pdf?handle=${block.owner_handle || 'me'}`}\n          className=\"text-blue-400 hover:underline text-sm\"\n        >\n          🧾 Print PDF with this label\n        </a>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/block/new.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/checkin-map.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/claim-handle.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function ClaimHandlePage() {\n  const [handle, setHandle] = useState('');\n  const [message, setMessage] = useState('');\n\n  const submit = async () => {\n    const res = await fetch('/api/claim-handle', {\n      method: 'POST',\n      body: JSON.stringify({ handle }),\n    });\n    const result = await res.json();\n    setMessage(result.message || 'Saved');\n  };\n\n  return (\n    <div className=\"p-6 text-white max-w-md mx-auto text-center\">\n      <h1 className=\"text-2xl font-bold mb-4\">🔖 Claim Your Handle</h1>\n      <input\n        className=\"w-full mb-4 p-2 rounded bg-zinc-800\"\n        value={handle}\n        onChange={(e) => setHandle(e.target.value.toLowerCase())}\n        placeholder=\"@yourname\"\n      />\n      <button onClick={submit} className=\"bg-blue-600 px-4 py-2 rounded hover:bg-blue-700\">\n        Claim\n      </button>\n      {message && <p className=\"mt-4 text-sm text-zinc-400\">{message}</p>}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/claim/[slug].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":35,"column":7,"nodeType":"JSXOpeningElement","endLine":39,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useState, useEffect } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useRouter, useSearchParams } from 'next/navigation';\n\nexport default function ClaimPage() {\n  const searchParams = useSearchParams();\n  const slug = searchParams?.get('slug') as string;\n  const [status, setStatus] = useState<'loading' | 'claimed' | 'unclaimed'>('loading');\n  const [email, setEmail] = useState('');\n  const [anon, setAnon] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n\n  useEffect(() => {\n    if (slug) {\n      fetch(`/api/check-claim?slug=${slug}`)\n        .then((res) => res.json())\n        .then((d) => setStatus(d.claimed ? 'claimed' : 'unclaimed'));\n    }\n  }, [slug]);\n\n  const handleSubmit = async () => {\n    await fetch('/api/claim-site', {\n      method: 'POST',\n      body: JSON.stringify({ slug, email, anon }),\n    });\n    setSubmitted(true);\n  };\n\n  if (!slug) return null;\n\n  return (\n    <div className=\"max-w-xl mx-auto text-white p-6 text-center\">\n      <h1 className=\"text-2xl font-bold mb-4\">🪪 Claim {slug}</h1>\n      <img\n        src={`/screenshots/${slug}.thumb.png`}\n        alt={`${slug} preview`}\n        className=\"w-full h-40 object-cover rounded mb-4\"\n      />\n\n      {status === 'claimed' && (\n        <p className=\"text-red-400 text-sm mb-4\">This site has already been claimed.</p>\n      )}\n\n      {status === 'unclaimed' && !submitted && (\n        <>\n          <input\n            type=\"email\"\n            placeholder=\"your@email.com\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            className=\"w-full p-2 rounded bg-zinc-800 mb-3 text-white\"\n          />\n          <label className=\"flex items-center gap-2 mb-4 justify-center\">\n            <input type=\"checkbox\" checked={anon} onChange={(e) => setAnon(e.target.checked)} />\n            <span className=\"text-sm text-zinc-300\">Claim anonymously</span>\n          </label>\n          <button\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded\"\n            onClick={handleSubmit}\n          >\n            Claim this site\n          </button>\n        </>\n      )}\n\n      {submitted && (\n        <p className=\"text-green-400 mt-4\">🎉 You’ve claimed this site successfully.</p>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/confirm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\n\nexport default function ConfirmPage() {\n  const searchParams = useSearchParams();\n  const code = searchParams?.get('code') as string;\n\n  useEffect(() => {\n    if (!code) return;\n    // for now: assume any code is valid\n    localStorage.setItem('invite_verified', 'true');\n    setTimeout(() => (window.location.href = '/starter'), 1000);\n  }, [code]);\n\n  return (\n    <div className=\"p-6 text-white text-center\">\n      <h1 className=\"text-2xl font-bold mb-4\">🔓 Confirming Access…</h1>\n      <p className=\"text-zinc-400\">You’ll be redirected shortly.</p>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/contact.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/creator/[handle].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":40,"column":9,"nodeType":"JSXOpeningElement","endLine":40,"endColumn":95}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { json } from '@/lib/api/json';\nimport { useEffect, useState } from 'react';\n\ntype Badge = {\n  icon: string;\n  title: string;\n};\n\ntype HandleProfile = {\n  avatar?: string;\n  bio?: string;\n  badge?: Badge;\n};\n\nexport default function PublicHandlePage() {\n  const searchParams = useSearchParams();\n  const handle = searchParams?.get('handle') as string;\n  const [data, setData] = useState<HandleProfile | null>(null);\n\n  useEffect(() => {\n    if (!handle) return;\n    fetch(`/api/handle-profile?handle=${handle}`)\n      .then((res) => res.json())\n      .then(setData)\n      .catch((err) => {\n        console.error('Failed to fetch handle profile:', err);\n        setData(null);\n      });\n  }, [handle]);\n\n  if (!data) {\n    return <div className=\"text-white p-6\">Loading profile…</div>;\n  }\n\n  return (\n    <div className=\"text-white p-6 text-center max-w-2xl mx-auto\">\n      {data.avatar && (\n        <img src={data.avatar} alt=\"avatar\" className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n      )}\n      <h1 className=\"text-2xl font-bold\">@{handle}</h1>\n      {data.badge && (\n        <p className=\"text-yellow-400\">\n          {data.badge.icon} {data.badge.title}\n        </p>\n      )}\n      {data.bio && <p className=\"text-zinc-400 mt-2\">{data.bio}</p>}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/creator/me/campaigns/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport Link from 'next/link';\nimport { useUser } from '@supabase/auth-helpers-react';\n\nexport default function MyCampaigns() {\n  const user = useUser();\n  const [campaigns, setCampaigns] = useState([]);\n\n  useEffect(() => {\n    if (!user) return;\n    fetch('/api/my-campaigns?user_id=' + user.id)\n      .then((res) => res.json())\n      .then(setCampaigns);\n  }, [user]);\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6 text-white space-y-6\">\n      <h1 className=\"text-2xl font-bold\">🎯 My Campaigns</h1>\n      <ul className=\"space-y-4\">\n        {campaigns.map((c: any) => (\n          <li key={c.slug} className=\"bg-zinc-800 p-4 rounded\">\n            <Link\n              href={`/support/${c.slug}`}\n              className=\"text-blue-400 text-lg font-semibold hover:underline\"\n            >\n              {c.headline}\n            </Link>\n            <p className=\"text-sm text-zinc-400\">\n              {c.goal_count} {c.target_action}s goal • Created{' '}\n              {new Date(c.created_at).toLocaleDateString()}\n            </p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/creator/me/campaigns/new.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function NewCampaign() {\n  const [slug, setSlug] = useState('');\n  const [headline, setHeadline] = useState('');\n  const [goal, setGoal] = useState(10);\n  const [action, setAction] = useState('cheer');\n  const [blockId, setBlockId] = useState('');\n  const [message, setMessage] = useState('');\n\n  const submit = async () => {\n    const res = await fetch('/api/create-campaign', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${localStorage.getItem('supabase.auth.token')}`,\n      },\n      body: JSON.stringify({\n        slug,\n        headline,\n        goal_count: goal,\n        target_action: action,\n        block_id: blockId,\n      }),\n    });\n\n    const json = await res.json();\n    setMessage(json.error ? 'Error: ' + json.error : '✅ Campaign created!');\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 text-white space-y-4\">\n      <h1 className=\"text-2xl font-bold\">🎯 Create Campaign</h1>\n      <input\n        value={slug}\n        onChange={(e) => setSlug(e.target.value)}\n        placeholder=\"Slug (e.g. floss)\"\n        className=\"p-2 text-black w-full rounded\"\n      />\n      <input\n        value={headline}\n        onChange={(e) => setHeadline(e.target.value)}\n        placeholder=\"Headline\"\n        className=\"p-2 text-black w-full rounded\"\n      />\n      <input\n        type=\"number\"\n        value={goal}\n        onChange={(e) => setGoal(Number(e.target.value))}\n        placeholder=\"Goal\"\n        className=\"p-2 text-black w-full rounded\"\n      />\n      <select\n        value={action}\n        onChange={(e) => setAction(e.target.value)}\n        className=\"p-2 text-black w-full rounded\"\n      >\n        <option value=\"cheer\">🎉 Cheer</option>\n        <option value=\"echo\">🔁 Echo</option>\n        <option value=\"reflect\">🪞 Reflect</option>\n        <option value=\"checkin\">✅ Check-in</option>\n      </select>\n      <input\n        value={blockId}\n        onChange={(e) => setBlockId(e.target.value)}\n        placeholder=\"Block ID\"\n        className=\"p-2 text-black w-full rounded\"\n      />\n      <button onClick={submit} className=\"bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded\">\n        Create\n      </button>\n      {message && <p className=\"text-green-300 text-sm\">{message}</p>}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/creator/me/campaigns/posters.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":23,"column":13,"nodeType":"JSXOpeningElement","endLine":27,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useUser } from '@supabase/auth-helpers-react';\n\nexport default function PosterBatchView() {\n  const user = useUser();\n  const [campaigns, setCampaigns] = useState([]);\n\n  useEffect(() => {\n    if (!user) return;\n    fetch('/api/my-campaigns?user_id=' + user.id)\n      .then((res) => res.json())\n      .then(setCampaigns);\n  }, [user]);\n\n  return (\n    <div className=\"p-6 text-white max-w-6xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">🖨️ Poster Print Batch</h1>\n      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n        {campaigns.map((c: any) => (\n          <div key={c.slug} className=\"bg-zinc-800 p-4 rounded\">\n            <img\n              src={`/posters/${c.slug}`}\n              alt={c.headline}\n              className=\"w-full rounded shadow border border-zinc-700\"\n            />\n            <div className=\"mt-2 text-sm text-zinc-300 truncate\">{c.headline}</div>\n            <a\n              href={`/posters/${c.slug}`}\n              download={`${c.slug}-poster.png`}\n              className=\"text-blue-400 hover:underline text-xs\"\n            >\n              Download\n            </a>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/creator/me/feedback.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useUser } from '@supabase/auth-helpers-react';\n\nexport default function MyFeedback() {\n  const user = useUser();\n  const [received, setReceived] = useState([]);\n  const [sent, setSent] = useState([]);\n\n  useEffect(() => {\n    if (!user) return;\n    fetch('/api/feedback-history?type=received&user_id=' + user.id)\n      .then((res) => res.json())\n      .then(setReceived);\n\n    fetch('/api/feedback-history?type=sent&user_id=' + user.id)\n      .then((res) => res.json())\n      .then(setSent);\n  }, [user]);\n\n  return (\n    <div className=\"p-6 text-white max-w-2xl mx-auto space-y-6\">\n      <h1 className=\"text-2xl font-bold\">🧾 Feedback</h1>\n\n      <div>\n        <h2 className=\"text-xl font-semibold mb-2\">🎯 Received</h2>\n        {received.length === 0 && <p className=\"text-zinc-400 text-sm\">Nothing yet.</p>}\n        <ul className=\"space-y-2\">\n          {received.map((f: any) => (\n            <li key={f.id} className=\"bg-zinc-800 p-3 rounded text-sm\">\n              <span className=\"font-bold\">{f.action}</span> on <code>{f.block_id.slice(0, 8)}</code>\n              {f.message && <p className=\"text-zinc-300 mt-1 italic\">“{f.message}”</p>}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div>\n        <h2 className=\"text-xl font-semibold mt-6 mb-2\">📤 Sent</h2>\n        {sent.length === 0 && <p className=\"text-zinc-400 text-sm\">No outgoing feedback yet.</p>}\n        <ul className=\"space-y-2\">\n          {sent.map((f: any) => (\n            <li key={f.id} className=\"bg-zinc-800 p-3 rounded text-sm\">\n              <span className=\"font-bold\">{f.action}</span> to block{' '}\n              <code>{f.block_id.slice(0, 8)}</code>\n              {f.message && <p className=\"text-zinc-300 mt-1 italic\">“{f.message}”</p>}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/creator/me/notifications.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useUser } from '@supabase/auth-helpers-react';\n\nexport default function NotificationsPage() {\n  const user = useUser();\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    if (!user) return;\n    fetch('/api/notifications?handle=' + user.user_metadata?.handle)\n      .then((res) => res.json())\n      .then(setItems);\n  }, [user]);\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6 text-white space-y-4\">\n      <h1 className=\"text-2xl font-bold\">🔔 Notifications</h1>\n      {items.length === 0 && <p className=\"text-zinc-400\">Nothing new yet.</p>}\n      {items.map((r: any) => (\n        <div key={r.id} className=\"bg-zinc-800 p-4 rounded\">\n          <div className=\"text-sm\">\n            <span className=\"text-green-400\">@{r.receiver_handle}</span> received a support request\n          </div>\n          <div className=\"text-zinc-400 text-xs mt-1\">\n            {r.slug} • {r.message}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/creator/me/summary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useUser } from '@supabase/auth-helpers-react';\n\nexport default function SummaryPage() {\n  const user = useUser();\n  const [summary, setSummary] = useState<any>(null);\n\n  useEffect(() => {\n    if (!user) return;\n    fetch('/api/feedback-summary?user_id=' + user.id)\n      .then((res) => res.json())\n      .then(setSummary);\n  }, [user]);\n\n  if (!summary) return <div className=\"p-6 text-white\">Loading summary...</div>;\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6 text-white space-y-6\">\n      <h1 className=\"text-2xl font-bold\">🧠 Weekly Summary</h1>\n\n      <div>\n        <h2 className=\"text-lg font-semibold mb-2\">📥 Received Feedback</h2>\n        {summary.received_feedback.length === 0 && (\n          <p className=\"text-zinc-400\">No feedback yet.</p>\n        )}\n        <ul className=\"space-y-2\">\n          {summary.received_feedback.map((f: any, i: number) => (\n            <li key={i} className=\"bg-zinc-800 p-3 rounded text-sm\">\n              <span className=\"font-bold\">{f.action}</span> on <code>{f.block_id.slice(0, 8)}</code>\n              {f.message && <p className=\"italic mt-1 text-zinc-300\">“{f.message}”</p>}\n              <div className=\"text-xs text-zinc-400\">{new Date(f.created_at).toLocaleString()}</div>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div>\n        <h2 className=\"text-lg font-semibold mb-2 mt-6\">📆 Check-in History</h2>\n        {summary.checkin_history.length === 0 && <p className=\"text-zinc-400\">No check-ins yet.</p>}\n        <ul className=\"space-y-2\">\n          {summary.checkin_history.map((c: any, i: number) => (\n            <li key={i} className=\"bg-zinc-900 p-2 rounded text-sm\">\n              ✅ <strong>{c.slug}</strong> @ {new Date(c.created_at).toLocaleString()}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/creator/me/thank.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\ntype Supporter = {\n  user_id: string;\n};\n\nexport default function ThankSupporters() {\n  const [supporters, setSupporters] = useState<Supporter[]>([]);\n  const [sent, setSent] = useState<Record<string, boolean>>({});\n\n  useEffect(() => {\n    fetch('/api/supporters?handle=me') // TODO: replace 'me' with dynamic handle\n      .then((res) => res.json())\n      .then(setSupporters)\n      .catch((err) => console.error('Failed to load supporters:', err));\n  }, []);\n\n  const handleSendThanks = async (userId: string) => {\n    const message = prompt('What would you like to say?');\n    if (!message) return;\n\n    try {\n      await fetch('/api/send-thanks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('supabase.auth.token') || ''}`,\n        },\n        body: JSON.stringify({\n          recipient_id: userId,\n          block_id: 'N/A', // Replace if needed\n          message,\n        }),\n      });\n\n      setSent((prev) => ({ ...prev, [userId]: true }));\n    } catch (err) {\n      console.error('Failed to send message:', err);\n      alert('Failed to send. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 text-white space-y-4\">\n      <h1 className=\"text-2xl font-bold\">🙏 Send Thanks</h1>\n      {supporters.map((s) => (\n        <div key={s.user_id} className=\"bg-zinc-800 p-3 rounded\">\n          <div className=\"text-green-400 text-sm mb-2\">User: {s.user_id.slice(0, 8)}</div>\n          <button\n            disabled={sent[s.user_id]}\n            onClick={() => handleSendThanks(s.user_id)}\n            className=\"bg-blue-600 hover:bg-blue-700 px-4 py-1 text-sm rounded disabled:opacity-50\"\n          >\n            {sent[s.user_id] ? '✅ Sent' : 'Send Thanks'}\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/discover.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport Link from 'next/link';\n\nexport default function DiscoverPage() {\n  const [profiles, setProfiles] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/discover')\n      .then((res) => res.json())\n      .then(setProfiles);\n  }, []);\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6 text-white space-y-4\">\n      <h1 className=\"text-2xl font-bold\">🌍 Discover Public Worlds</h1>\n      {profiles.length === 0 && <p className=\"text-zinc-400\">No public profiles yet.</p>}\n      <ul className=\"space-y-4\">\n        {profiles.map((p: any) => (\n          <li key={p.user_id} className=\"bg-zinc-800 p-4 rounded shadow\">\n            <div className=\"text-xl font-semibold\">\n              <Link href={`/world/${p.handle}/share`} className=\"hover:underline\">\n                {p.emoji} @{p.handle}\n              </Link>\n            </div>\n            {p.bio && <p className=\"text-sm text-zinc-400 mt-1\">{p.bio}</p>}\n            {p.goal_tags?.length > 0 && (\n              <div className=\"text-xs text-green-400 uppercase mt-1\">{p.goal_tags.join(' • ')}</div>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/docs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/early-access.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/early.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/edit/[slug].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'arrayMove' is defined but never used.","line":14,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used.","line":21,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'slug'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [siteData, slug]","fix":{"range":[2918,2928],"text":"[siteData, slug]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport Head from 'next/head';\nimport { json } from '@/lib/api/json';\n\nimport { useEffect, useState, useRef } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport dynamic from 'next/dynamic';\nimport { createClient } from '@supabase/supabase-js';\nimport { GripVertical } from 'lucide-react';\nimport RenderBlock from '@/components/admin/templates/render-block';\nimport BlockSidebar from '@/components/admin/templates/block-sidebar';\nimport { SortableBlockList } from '@/components/admin/templates/sortable-block-list';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { SortableContext, arrayMove, verticalListSortingStrategy } from '@dnd-kit/sortable';\nconst SiteSettingsPanel = dynamic(() => import('@/components/admin/site-settings-panel'), {\n  ssr: false,\n});\nimport ModalWrapper from '@/components/ui/modal-wrapper';\nimport type { SiteData } from '@/types/site';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport default function EditPage() {\n  const searchParams = useSearchParams();\n  const slug = searchParams?.get('slug') as string;\n  const [siteData, setSiteData] = useState<SiteData | null>(null);\n  const [currentPageIndex, setCurrentPageIndex] = useState(0);\n  const [selectedBlockIndex, setSelectedBlockIndex] = useState<number | null>(null);\n  const [showBlockPicker, setShowBlockPicker] = useState(false);\n  const [previewMode, setPreviewMode] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [saved, setSaved] = useState(false);\n  const [isHydrated, setIsHydrated] = useState(false);\n\n  const saveTimeout = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    setIsHydrated(true);\n  }, []);\n\n  useEffect(() => {\n    if (!slug) return;\n    fetch(`/api/sites/${slug}`) // TODO: add error handling for 404 and 500 errors\n      .then((res) => res.json())\n      .then((data) => {\n        console.debug('[EditPage] useEffect triggered', data);\n        setSiteData(data);\n      })\n      .catch((err) => {\n        console.error('Site load failed:', err);\n        alert('Failed to load site');\n      });\n  }, [slug]);\n\n  useEffect(() => {\n    console.debug('[EditPage] useEffect triggered', siteData, slug);\n    if (!siteData) {\n      console.debug('[EditPage] siteData is null', siteData, slug);\n      return;\n    }\n    if (saveTimeout.current) clearTimeout(saveTimeout.current);\n    saveTimeout.current = setTimeout(async () => {\n      if (!siteData?._meta?.id) return;\n      await fetch('/api/sites/save', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: siteData._meta.id, data: siteData }),\n      });\n      console.log('Saving site to UUID:', siteData?._meta?.id);\n\n      setSaved(true);\n      setTimeout(() => setSaved(false), 1500);\n    }, 800);\n  }, [siteData]);\n\n  const handleSlugChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!siteData) return;\n    const nextSlug = e.target.value.toLowerCase().replace(/[^a-z0-9-]+/g, '-');\n    setSiteData({ ...siteData, slug: nextSlug });\n  };\n\n  const handleTogglePublish = () => {\n    if (!siteData) return;\n    setSiteData({ ...siteData, is_published: !siteData.is_published });\n  };\n\n  const currentPage = siteData?.pages?.[currentPageIndex];\n  if (!currentPage) return;\n  const blocksWithId =\n    currentPage?.content_blocks?.map((b: any, i: number) => ({\n      _id: b._id || `block-${i}-${Date.now()}`,\n      ...b,\n    })) || [];\n\n  const handleBlockSave = (updatedBlock: any) => {\n    const pages = [...siteData.pages];\n    pages[currentPageIndex].content_blocks[selectedBlockIndex!] = updatedBlock;\n    setSiteData({ ...siteData, pages });\n    setSelectedBlockIndex(null);\n  };\n\n  const handleAddBlock = (type: string) => {\n    const newBlock = {\n      _id: `block-${Date.now()}`,\n      type,\n      content: {\n        headline: 'New Block',\n        subheadline: '',\n        cta_text: '',\n        cta_link: '',\n      },\n    };\n    const pages = [...siteData.pages];\n    pages[currentPageIndex].content_blocks.push(newBlock as any);\n    setSiteData({ ...siteData, pages });\n    setShowBlockPicker(false);\n  };\n\n  console.debug('[EditPage] siteData:', JSON.stringify(siteData));\n  return (\n    <>\n      <Head>\n        <title>{siteData?.seo_title || siteData?.business_name || 'Editing Site'}</title>\n        <meta\n          name=\"description\"\n          content={siteData?.seo_description || 'Edit this site’s content, SEO, and design.'}\n        />\n        {siteData?.slug && (\n          <link\n            rel=\"canonical\"\n            href={`https://${siteData.custom_domain || `${siteData.slug}.quicksites.ai`}`}\n          />\n        )}\n        {siteData?.twitter_handle && <meta name=\"twitter:site\" content={siteData.twitter_handle} />}\n      </Head>\n\n      <div className=\"text-white p-6 max-w-screen-xl mx-auto relative\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <div>\n            <input\n              type=\"text\"\n              value={siteData?.slug || ''}\n              onChange={handleSlugChange}\n              className=\"text-2xl font-bold bg-transparent border-b border-zinc-600 focus:outline-none px-2 py-1\"\n              placeholder=\"custom-slug\"\n            />\n            <span className=\"ml-2 text-sm text-zinc-400\">\n              {siteData?.is_published ? '🌐 Live' : '📝 Draft'}\n            </span>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            <label className=\"flex items-center gap-2 text-sm cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                checked={!!siteData?.is_published}\n                onChange={handleTogglePublish}\n                className=\"accent-blue-500\"\n              />\n              Publish\n            </label>\n\n            {siteData?.slug && (\n              <a\n                href={`https://${siteData.slug}.quicksites.ai`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-blue-400 text-sm hover:underline\"\n              >\n                🔗 View Site\n              </a>\n            )}\n\n            <button\n              onClick={() => setShowSettings(true)}\n              className=\"text-sm text-blue-400 hover:underline\"\n            >\n              🛠 Site Settings\n            </button>\n          </div>\n        </div>\n\n        {saved && (\n          <div className=\"absolute top-4 right-6 text-green-400 text-sm bg-zinc-800 px-3 py-1 rounded shadow\">\n            ✅ Saved\n          </div>\n        )}\n\n        {isHydrated && showSettings && siteData?._meta?.id && (\n          <ModalWrapper open={showSettings} onClose={() => setShowSettings(false)}>\n            <div className=\"h-full p-6\">\n              <SiteSettingsPanel siteId={siteData._meta.id} />\n            </div>\n          </ModalWrapper>\n        )}\n\n        {!siteData ? (\n          <p>Loading...</p>\n        ) : (\n          <>\n            <div className=\"flex justify-between mb-4\">\n              <label className=\"text-sm text-zinc-400\">Page:</label>\n              <select\n                value={currentPageIndex}\n                onChange={(e) => setCurrentPageIndex(Number(e.target.value))}\n                className=\"bg-zinc-800 p-2 rounded ml-2\"\n              >\n                {siteData.pages.map((p: any, i: number) => (\n                  <option key={p.id} value={i}>\n                    {p.slug || `Page ${i + 1}`}\n                  </option>\n                ))}\n              </select>\n              <button\n                onClick={() => setPreviewMode(!previewMode)}\n                className=\"text-sm text-blue-400 hover:underline\"\n              >\n                {previewMode ? '🔧 Edit Mode' : '👁️ Preview Mode'}\n              </button>\n            </div>\n\n            {previewMode ? (\n              <DndContext collisionDetection={closestCenter}>\n                <SortableContext\n                  items={siteData.pages.map((p: any) => p.id)}\n                  strategy={verticalListSortingStrategy}\n                >\n                  <div className=\"space-y-4\">\n                    {siteData.pages.map((page: any, pageIndex: number) => (\n                      <div key={page.id} className=\"mb-8 bg-zinc-800 rounded p-4 shadow\">\n                        <div className=\"flex items-center gap-2 text-zinc-300 mb-4\">\n                          <GripVertical className=\"w-4 h-4 opacity-60\" />\n                          <h2 className=\"text-lg font-semibold\">\n                            📄 {page.slug || `Page ${pageIndex + 1}`}\n                          </h2>\n                        </div>\n                        {page.content_blocks.map((block: any, i: number) => (\n                          <div key={i} className=\"mb-4\">\n                            <RenderBlock block={block} />\n                          </div>\n                        ))}\n                      </div>\n                    ))}\n                  </div>\n                </SortableContext>\n              </DndContext>\n            ) : (\n              <>\n                <SortableBlockList\n                  blocks={blocksWithId}\n                  onChange={(next) => {\n                    const pages = [...siteData.pages];\n                    pages[currentPageIndex].content_blocks = next;\n                    setSiteData({ ...siteData, pages });\n                  }}\n                  /*\n                onDelete={(blockId: string) => {\n                  const pages = [...siteData.pages];\n                  pages[currentPageIndex].content_blocks = pages[currentPageIndex].content_blocks.filter(\n                      (b: { _id: string }) => b._id !== blockId\n                  );\n                  setSiteData({ ...siteData, pages });\n                }}\n                onEdit={(blockId: string) => {\n                  const index = blocksWithId.findIndex((b: { _id: string }) => b._id === blockId);\n                  if (index !== -1) setSelectedBlockIndex(index);\n                }}\n                */\n                />\n                <button\n                  className=\"mt-4 px-3 py-2 text-sm bg-blue-700 rounded hover:bg-blue-800\"\n                  onClick={() => setShowBlockPicker(true)}\n                >\n                  ➕ Add Block\n                </button>\n\n                {showBlockPicker && (\n                  <div className=\"mt-4 p-4 border border-zinc-700 rounded bg-zinc-800\">\n                    <h3 className=\"text-sm font-semibold mb-2\">Choose a block type</h3>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {['hero', 'services', 'testimonial', 'text', 'cta', 'quote'].map((type) => (\n                        <button\n                          key={type}\n                          onClick={() => handleAddBlock(type)}\n                          className=\"text-left p-2 rounded bg-zinc-700 hover:bg-zinc-600\"\n                        >\n                          <span className=\"block font-medium capitalize\">{type}</span>\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n\n            {selectedBlockIndex !== null && (\n              <BlockSidebar\n                block={siteData.pages[currentPageIndex].content_blocks[selectedBlockIndex]}\n                onChange={(updated) => handleBlockSave(updated)}\n                onClose={() => setSelectedBlockIndex(null)}\n              />\n            )}\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/edit/remix/[slug].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { BlocksEditor } from '@/components/admin/templates/blocks-editor';\nimport type { Block } from '@/types/blocks';\n\nexport default function PublicEditPage() {\n  const searchParams = useSearchParams();\n  const slug = searchParams?.get('slug') as string;\n  const [data, setData] = useState<Block[] | null>(null);\n  const [forked, setForked] = useState(false);\n\n  useEffect(() => {\n    if (slug) {\n      fetch(`/api/template?domain=${slug}`)\n        .then((res) => res.json())\n        .then((d) => setData(d.data));\n    }\n  }, [slug]);\n\n  const saveFork = async () => {\n    await fetch('/api/fork-template', {\n      method: 'POST',\n      body: JSON.stringify({ base_slug: slug, data }),\n    });\n    setForked(true);\n  };\n\n  return (\n    <div className=\"p-6 text-white max-w-4xl mx-auto\">\n      <h1 className=\"text-xl font-bold mb-4\">Remix: {slug}</h1>\n      {data && <BlocksEditor blocks={data} onChange={(updated) => setData(updated)} />}\n      <button onClick={saveFork} className=\"mt-4 bg-green-700 px-4 py-2 rounded\">\n        Save a Copy\n      </button>\n      {forked && <p className=\"text-green-400 mt-2\">Forked! Check /starter to claim it.</p>}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/forks.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\ntype ForkRecord = {\n  name: string;\n  base?: string;\n  count: number;\n};\n\nexport default function ForksPage() {\n  const [data, setData] = useState<ForkRecord[]>([]);\n\n  useEffect(() => {\n    fetch('/api/forks')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  return (\n    <div className=\"p-6 text-white max-w-4xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">🔁 Forked Templates</h1>\n      <table className=\"w-full text-sm\">\n        <thead className=\"text-zinc-400 text-xs border-b border-zinc-600\">\n          <tr>\n            <th className=\"text-left p-2\">Template</th>\n            <th className=\"text-left p-2\">Forked From</th>\n            <th className=\"text-right p-2\">Times Forked</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((row, i) => (\n            <tr key={i} className=\"border-b border-zinc-700\">\n              <td className=\"p-2\">{row.name}</td>\n              <td className=\"p-2\">{row.base || '—'}</td>\n              <td className=\"p-2 text-right\">{row.count}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/forks/[template_id].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { json } from '@/lib/api/json';\nimport { useEffect, useState } from 'react';\n\ntype ForkRecord = {\n  handle: string;\n  name: string;\n  created_at: string;\n};\n\nexport default function ForksPage() {\n  const searchParams = useSearchParams();\n  const template_id = searchParams?.get('template_id') as string;\n  const [forks, setForks] = useState<ForkRecord[]>([]);\n\n  useEffect(() => {\n    if (!template_id) return;\n    fetch('/api/forks-tree?template_id=' + template_id)\n      .then((res) => res.json())\n      .then(setForks);\n  }, [template_id]);\n\n  return (\n    <div className=\"text-white p-6 max-w-2xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-6\">🌱 Remix Lineage</h1>\n      <ul className=\"space-y-3 border-l border-zinc-600 pl-4\">\n        {forks.map((f, i) => (\n          <li key={i}>\n            <div className=\"text-sm text-zinc-300\">\n              <strong>@{f.handle}</strong> → {f.name}\n              <div className=\"text-xs text-zinc-500\">{f.created_at}</div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/goodbye.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/habits/[slug]/leaderboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useRouter, useSearchParams } from 'next/navigation';\n\nexport default function HabitLeaderboard() {\n  const searchParams = useSearchParams();\n  const slug = searchParams?.get('slug') as string;\n  const [entries, setEntries] = useState([]);\n\n  useEffect(() => {\n    if (!slug) return;\n    fetch('/api/habit-leaderboard?slug=' + slug)\n      .then((res) => res.json())\n      .then(setEntries);\n  }, [slug]);\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">🏆 {slug} Leaderboard</h1>\n      {!entries.length && <p className=\"text-zinc-400\">Loading...</p>}\n      <ol className=\"space-y-3 list-decimal list-inside\">\n        {entries.map((e: any, i: number) => (\n          <li key={i} className=\"bg-zinc-800 p-3 rounded\">\n            <div className=\"flex justify-between\">\n              <span>User: {e.user_id.slice(0, 8)}…</span>\n              <span className=\"text-green-400\">{e.total} check-ins</span>\n            </div>\n          </li>\n        ))}\n      </ol>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/habits/add.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useUser' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [slug, accessToken, user, router]","fix":{"range":[1492,1517],"text":"[slug, accessToken, user, router]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useUser } from '@supabase/auth-helpers-react';\nimport { useSession } from '@supabase/auth-helpers-react';\n\nexport default function AddHabitBlock() {\n  const router = useRouter();\n  const session = useSession(); // ✅\n  const user = session?.user;\n  const accessToken = session?.access_token; // ✅\n  const params = useSearchParams();\n  const slug = params?.get('slug') || '';\n  const [status, setStatus] = useState('initial');\n\n  useEffect(() => {\n    if (!slug || !accessToken || !user) return;\n\n    navigator.geolocation.getCurrentPosition(async (pos) => {\n      setStatus('saving');\n      const res = await fetch('/api/create-block', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${accessToken}`, // ✅\n        },\n        body: JSON.stringify({\n          lat: pos.coords.latitude,\n          lon: pos.coords.longitude,\n          title: slug.charAt(0).toUpperCase() + slug.slice(1),\n          message: `Tracking: ${slug}`,\n          emoji: slug === 'floss' ? '🦷' : slug === 'water' ? '💧' : '🧘',\n          slug,\n          type: 'tracking',\n          actions: [{ label: 'Check In', type: 'check-in', target: slug }],\n        }),\n      });\n\n      if (res.ok) {\n        setStatus('done');\n        router.push('/world/me');\n      } else {\n        setStatus('error');\n      }\n    });\n  }, [slug, accessToken, user]);\n\n  return (\n    <div className=\"text-white p-6 text-center\">\n      {status === 'saving' && <p>📍 Pinning to your current location...</p>}\n      {status === 'done' && <p>✅ Added! Redirecting...</p>}\n      {status === 'error' && <p className=\"text-red-500\">⚠️ Error adding block.</p>}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/habits/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function HabitLibrary() {\n  const [templates, setTemplates] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/habit-templates')\n      .then((res) => res.json())\n      .then(setTemplates);\n  }, []);\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6 text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">📚 Habit Library</h1>\n      <ul className=\"space-y-4\">\n        {templates.map((t: any) => (\n          <li key={t.slug} className=\"bg-zinc-800 rounded p-4\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <div className=\"text-lg font-semibold\">\n                  {t.emoji} {t.title}\n                </div>\n                <div className=\"text-sm text-zinc-400\">{t.message}</div>\n              </div>\n              <a\n                href={`/habits/add?slug=${t.slug}`}\n                className=\"text-sm px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded text-white\"\n              >\n                ➕ Add\n              </a>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/hall-of-fame.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { NextSeo } from 'next-seo';\nimport { json } from '@/lib/api/json';\nimport { usePageSeo } from '@/lib/usePageSeo';\nimport { useEffect, useState } from 'react';\n\nexport default function HallOfFame() {\n  const seo = usePageSeo({\n    description: 'Hall of fame page.',\n  });\n\n  const [entries, setEntries] = useState<any[]>([]);\n\n  useEffect(() => {\n    fetch('/api/hall-of-fame')\n      .then((res) => res.json())\n      .then(setEntries);\n  }, []);\n\n  return (\n    <>\n      <NextSeo {...seo} />\n      <div className=\"max-w-4xl mx-auto p-6 text-white\">\n        <h1 className=\"text-3xl font-bold mb-6 text-center\">🏅 Hall of Fame</h1>\n        <p className=\"text-center text-zinc-400 mb-8 text-sm\">\n          Celebrating those who grew the network with care and courage.\n        </p>\n\n        <table className=\"w-full text-sm text-zinc-200\">\n          <thead className=\"text-xs uppercase text-zinc-400 border-b border-zinc-700\">\n            <tr>\n              <th className=\"text-left p-2\">Name / Alias</th>\n              <th className=\"text-right p-2\">Claims</th>\n              <th className=\"text-right p-2\">Referrals</th>\n              <th className=\"text-right p-2 font-bold\">Impact</th>\n            </tr>\n          </thead>\n          <tbody>\n            {entries.map((entry, i) => (\n              <tr key={i} className={i % 2 === 0 ? 'bg-zinc-900' : 'bg-zinc-800'}>\n                <td className=\"p-2\">{entry.alias || '🕶 Anonymous'}</td>\n                <td className=\"p-2 text-right\">{entry.claims}</td>\n                <td className=\"p-2 text-right\">{entry.referrals}</td>\n                <td className=\"p-2 text-right font-bold\">{entry.claims + entry.referrals}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/hub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/hub/[handle].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":35,"column":13,"nodeType":"JSXOpeningElement","endLine":39,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport Link from 'next/link';\nimport { json } from '@/lib/api/json';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\n\nexport default function BlockHub() {\n  const searchParams = useSearchParams();\n  const handle = searchParams?.get('handle') as string;\n  const [blocks, setBlocks] = useState([]);\n\n  useEffect(() => {\n    if (!handle) return;\n    fetch('/api/blocks-by-handle?handle=' + handle)\n      .then((res) => res.json())\n      .then(setBlocks);\n  }, [handle]);\n\n  return (\n    <div className=\"p-6 text-white max-w-3xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-6\">📍 Block Hub: @{handle}</h1>\n      <ul className=\"space-y-4\">\n        {blocks.map((b: any) => (\n          <li key={b.id} className=\"bg-zinc-800 rounded p-4\">\n            <div className=\"text-xl\">\n              {b.emoji} {b.title}\n            </div>\n            <div className=\"text-sm text-zinc-400\">{b.message}</div>\n            <Link\n              href={`/hub/${handle}/print`}\n              className=\"inline-block mb-6 text-blue-400 hover:underline text-sm\"\n            >\n              🖨️ Print All Block Labels\n            </Link>\n            <img\n              src={`/api/block-qr?handle=${handle}&blockId=${b.id}`}\n              alt=\"QR code\"\n              className=\"mt-3 w-24 h-24 rounded bg-white p-1\"\n            />\n            <a\n              href={`/world/${handle}#block-${b.id}`}\n              className=\"text-blue-400 text-xs hover:underline\"\n            >\n              View on map\n            </a>\n            <a\n              href={`/api/print-labels-pdf?handle=${handle}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"inline-block text-blue-500 hover:underline text-sm mt-2\"\n            >\n              🧾 Download as PDF\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/hub/[handle]/print.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":26,"column":11,"nodeType":"JSXOpeningElement","endLine":30,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { json } from '@/lib/api/json';\nimport { useEffect, useState } from 'react';\n\nexport default function PrintLabels() {\n  const searchParams = useSearchParams();\n  const handle = searchParams?.get('handle') as string;\n  const [blocks, setBlocks] = useState([]);\n\n  useEffect(() => {\n    if (!handle) return;\n    fetch('/api/blocks-by-handle?handle=' + handle)\n      .then((res) => res.json())\n      .then(setBlocks);\n  }, [handle]);\n\n  return (\n    <div className=\"p-4 print:p-0 bg-white text-black grid grid-cols-2 sm:grid-cols-3 gap-4\">\n      {blocks.map((b: any) => (\n        <div key={b.id} className=\"border p-3 rounded text-center text-sm break-words\">\n          <div className=\"text-xl\">\n            {b.emoji} {b.title}\n          </div>\n          <p className=\"text-xs text-zinc-600\">{b.message}</p>\n          <img\n            src={`/api/block-qr?handle=${handle}&blockId=${b.id}`}\n            alt=\"QR\"\n            className=\"w-32 h-32 mx-auto my-2\"\n          />\n          <p className=\"text-xs text-zinc-500\">\n            quicksites.ai/world/{handle}#block-{b.id}\n          </p>\n          <div className=\"flex justify-center\">\n            <a\n              href={`/api/print-labels-pdf?handle=${handle}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"inline-block text-blue-500 hover:underline text-sm mt-2\"\n              style={{ border: '1px solid #222' }}\n            >\n              🧾 Download as PDF\n            </a>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/launch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/leaderboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":34,"column":19,"nodeType":"JSXOpeningElement","endLine":38,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { NextSeo } from 'next-seo';\nimport { json } from '@/lib/api/json';\nimport { usePageSeo } from '@/lib/usePageSeo';\nimport { useEffect, useState } from 'react';\nimport Link from 'next/link';\n\nexport default function WeeklyLeaderboard() {\n  const [campaigns, setCampaigns] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/weekly-leaderboard')\n      .then((res) => res.json())\n      .then(setCampaigns);\n  }, []);\n\n  return (\n    <>\n      <NextSeo\n        {...usePageSeo({\n          description: 'Leaderboard page.',\n        })}\n      />\n      <div className=\"max-w-3xl mx-auto p-6 text-white\">\n        <h1 className=\"text-3xl font-bold mb-6\">🏆 Weekly Leaderboard</h1>\n        <p className=\"text-zinc-400 mb-4\">\n          Top 10 campaigns this week by cheers, check-ins, echoes, or reflections.\n        </p>\n        <ol className=\"space-y-4\">\n          {campaigns.map((c: any, i: number) => (\n            <li key={c.slug} className=\"bg-zinc-800 rounded p-4 flex justify-between items-center\">\n              <div className=\"flex items-center gap-3\">\n                {i < 3 && (\n                  <img\n                    src={`/api/badge/${c.slug}`}\n                    alt=\"badge\"\n                    className=\"w-12 h-12 rounded border border-zinc-700\"\n                  />\n                )}\n                <div>\n                  <Link\n                    href={`/support/${c.slug}`}\n                    className=\"text-blue-400 font-semibold hover:underline\"\n                  >\n                    {c.headline}\n                  </Link>\n                  <p className=\"text-xs text-zinc-400\">{c.action.toUpperCase()}</p>\n                </div>\n              </div>\n              <span className=\"text-xl font-bold text-green-400\">{c.count}</span>\n            </li>\n          ))}\n        </ol>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/login.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'searchParams' is assigned a value but never used.","line":10,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'assignRoleOnLogin' is assigned a value but never used.","line":20,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":26},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `·data:·{·user·},·error` with `⏎········data:·{·user·},⏎········error,⏎·····`","line":35,"column":14,"nodeType":null,"messageId":"replace","endLine":35,"endColumn":36,"fix":{"range":[1165,1187],"text":"\n        data: { user },\n        error,\n     "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'redirect' is assigned a value but never used.","line":54,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":23},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":76,"column":1,"nodeType":null,"messageId":"delete","endLine":76,"endColumn":3,"fix":{"range":[2231,2233],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎······process.env.NODE_ENV·===·'development'·&&⏎······devEmail·&&⏎······devEmail.includes('@')⏎····` with `process.env.NODE_ENV·===·'development'·&&·devEmail·&&·devEmail.includes('@')`","line":77,"column":9,"nodeType":null,"messageId":"replace","endLine":81,"endColumn":5,"fix":{"range":[2242,2342],"text":"process.env.NODE_ENV === 'development' && devEmail && devEmail.includes('@')"}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":83,"column":1,"nodeType":null,"messageId":"delete","endLine":83,"endColumn":3,"fix":{"range":[2407,2409],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":100,"column":1,"nodeType":null,"messageId":"delete","endLine":100,"endColumn":3,"fix":{"range":[2825,2827],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":109,"column":1,"nodeType":null,"messageId":"delete","endLine":109,"endColumn":3,"fix":{"range":[3171,3173],"text":""}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.","line":113,"column":6,"nodeType":"ArrayExpression","endLine":113,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [router]","fix":{"range":[3248,3250],"text":"[router]"}}]},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":114,"column":1,"nodeType":null,"messageId":"delete","endLine":114,"endColumn":3,"fix":{"range":[3253,3255],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Replace `·data:·{·user·}` with `⏎······data:·{·user·},⏎···`","line":142,"column":12,"nodeType":null,"messageId":"replace","endLine":142,"endColumn":27,"fix":{"range":[3988,4003],"text":"\n      data: { user },\n   "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":8,"source":"'use client';\n\nimport { useEffect, useRef, useState } from 'react';\nimport { supabase } from '@/admin/lib/supabaseClient';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\nexport default function LoginPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const recaptchaRef = useRef<any>(null);\n\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState<string | null>(null);\n  const [toast, setToast] = useState<string | null>(null);\n  const [showOnboarding, setShowOnboarding] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [debug, setDebug] = useState<any>(null);\n\n  const assignRoleOnLogin = false;\n  const showSpinner = false;\n\n  // ✅ Check for session token in URL hash\n  useEffect(() => {\n    const hasSessionToken =\n      typeof window !== 'undefined' && window.location.hash.includes('access_token');\n\n    if (hasSessionToken) {\n      supabase.auth.getSession().then(({ data }) => {\n        console.log('[🔁 Refreshed session from hash]', data);\n      });\n    }\n\n    const checkUser = async () => {\n      const { data: { user }, error } = await supabase.auth.getUser();\n      if (!user || error) {\n        setDebug({ error, user });\n        setLoading(false);\n        return;\n      }\n\n      const { data: profile } = await supabase\n        .from('user_profiles')\n        .select('role, plan')\n        .eq('user_id', user.id)\n        .maybeSingle();\n\n      const role = profile?.role ?? 'viewer';\n      const plan = profile?.plan ?? 'free';\n\n      setDebug({ user, profile, role, plan });\n\n      if (role !== 'viewer') {\n        const redirect =\n          plan === 'enterprise'\n            ? '/enterprise/dashboard'\n            : ['admin', 'owner', 'reseller'].includes(role)\n              ? '/admin/dashboard?message=welcome'\n              : '/?message=welcome';\n\n        // router.replace(redirect);\n      } else {\n        setShowOnboarding(true);\n      }\n\n      setLoading(false);\n    };\n\n    checkUser();\n  }, []);\n\n  // ✅ Dev AutoLogin Trigger\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const devEmail = params.get('dev-login');\n  \n    if (\n      process.env.NODE_ENV === 'development' &&\n      devEmail &&\n      devEmail.includes('@')\n    ) {\n      console.log(`[⚙️ Dev AutoLogin Trigger] ${devEmail}`);\n  \n      supabase.auth\n        .signInWithOtp({\n          email: devEmail,\n          options: {\n            emailRedirectTo: `${window.location.origin}/login`,\n          },\n        })\n        .then(({ error }) => {\n          if (error) {\n            console.error('[❌ Dev AutoLogin Error]', error.message);\n          } else {\n            console.log('[✅ Dev Magic Link Sent]');\n          }\n        });\n    }\n  }, []);\n  \n  // ✅ Handle magic link sign-in\n  useEffect(() => {\n    const { data: listener } = supabase.auth.onAuthStateChange((event, session) => {\n      if (event === 'SIGNED_IN' && session?.user) {\n        console.log('[✅ SIGNED_IN from magic link]', session.user);\n        router.replace('/login'); // Forces refresh of current logic\n      }\n    });\n  \n    return () => {\n      listener.subscription.unsubscribe();\n    };\n  }, []);\n  \n  // ✅ Handle manual login\n  const handleLogin = async () => {\n    const token = await recaptchaRef.current?.executeAsync();\n    recaptchaRef.current?.reset();\n\n    if (!token) {\n      setMessage('❌ reCAPTCHA failed. Try again.');\n      return;\n    }\n\n    const res = await fetch('/api/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, recaptchaToken: token }),\n    });\n\n    const data = await res.json();\n\n    if (!res.ok) {\n      setMessage(`❌ ${data.error || 'Login failed.'}`);\n    } else {\n      setMessage('✅ Check your email for the magic link.');\n    }\n  };\n\n  // ✅ Handle role assignment\n  const assignRole = async (selected: string) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    const id = user?.id;\n    const email = user?.email ?? '';\n    if (!id || !email) return;\n\n    const now = new Date().toISOString();\n\n    await supabase.from('user_profiles').upsert({\n      user_id: id,\n      email,\n      role: selected,\n      last_seen_at: now,\n    });\n\n    await supabase.from('session_logs').insert({\n      type: 'assign_role',\n      user_id: id,\n      email,\n      role: selected,\n      timestamp: now,\n    });\n\n    setShowOnboarding(false);\n    setToast(`✅ Role set to \"${selected}\"`);\n    setTimeout(() => setToast(null), 3000);\n\n    const redirect = selected === 'admin' ? '/admin/dashboard' : '/?message=role-assigned';\n    router.replace(redirect);\n    setTimeout(() => window.location.reload(), 1000);\n  };\n\n  // ✅ Render the login page\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-black text-white p-4 relative\">\n      {loading && (\n        <div className=\"fixed inset-0 z-50 bg-black/90 flex flex-col items-center justify-center\">\n          {showSpinner && (\n            <svg\n              className=\"animate-spin h-8 w-8 text-white mb-3\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              />\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z\"\n              />\n            </svg>\n          )}\n          <p className=\"text-sm text-gray-300\">Checking session…</p>\n        </div>\n      )}\n\n      <div className=\"bg-zinc-900 p-6 rounded shadow max-w-sm w-full\">\n        <h1 className=\"text-xl font-bold mb-4 text-center\">Login</h1>\n\n        {showOnboarding ? (\n          <div className=\"text-sm text-center space-y-4\">\n            <p>👋 Welcome! Choose your starting role:</p>\n            <div className=\"flex flex-col gap-2\">\n              {['viewer', 'reseller'].map((r) => (\n                <button\n                  key={r}\n                  onClick={() => assignRole(r)}\n                  className=\"bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded\"\n                >\n                  Continue as {r}\n                </button>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <>\n            {toast && <p className=\"text-center mb-4 text-yellow-400 text-sm\">{toast}</p>}\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"you@example.com\"\n              className=\"w-full px-3 py-2 mb-4 rounded bg-zinc-800 border border-zinc-700 text-white\"\n            />\n            <button\n              onClick={handleLogin}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded text-sm font-semibold\"\n            >\n              Send Magic Link\n            </button>\n            {message && (\n              <p\n                className={`mt-4 text-sm text-center ${message.startsWith('✅') ? 'text-green-400' : 'text-red-400'}`}\n              >\n                {message}\n              </p>\n            )}\n            <ReCAPTCHA\n              sitekey={process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY!}\n              size=\"invisible\"\n              ref={recaptchaRef}\n            />\n          </>\n        )}\n\n        {debug && (\n          <pre className=\"text-xs text-left text-gray-400 bg-zinc-900 p-2 mt-4 rounded max-w-lg overflow-auto\">\n            {JSON.stringify(debug, null, 2)}\n          </pre>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/manifesto.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/map.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/match.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function MatchPage() {\n  const [tags, setTags] = useState('');\n  const [results, setResults] = useState([]);\n\n  const search = async () => {\n    const res = await fetch('/api/match?tags=' + encodeURIComponent(tags));\n    const json = await res.json();\n    setResults(json);\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 text-white space-y-4\">\n      <h1 className=\"text-2xl font-bold\">🔍 Match by Goals</h1>\n      <input\n        value={tags}\n        onChange={(e) => setTags(e.target.value)}\n        placeholder=\"e.g. floss, meditate\"\n        className=\"text-black p-2 w-full rounded\"\n      />\n      <button onClick={search} className=\"bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded\">\n        Match\n      </button>\n\n      <ul className=\"space-y-3 pt-4\">\n        {results.map((r: any) => (\n          <li key={r.user_id} className=\"bg-zinc-800 p-4 rounded\">\n            <div className=\"text-lg\">\n              <a href={`/world/${r.handle}/share`} className=\"text-blue-400 hover:underline\">\n                {r.emoji} @{r.handle}\n              </a>\n            </div>\n            <p className=\"text-sm text-zinc-400\">{r.bio}</p>\n            <div className=\"text-xs text-green-400 uppercase mt-1\">{r.goal_tags?.join(' • ')}</div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/metrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/portfolio/[handle].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'usePageSeo' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextSeo' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useSession' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useUser' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { json } from '@/lib/api/json';\nimport { useEffect, useState } from 'react';\nimport { usePageSeo } from '@/lib/usePageSeo';\nimport { NextSeo } from 'next-seo';\nimport { useSession } from '@supabase/auth-helpers-react';\nimport { useUser } from '@supabase/auth-helpers-react';\nimport { Template } from '@/types/template';\n\nexport default function CreatorTemplatesPage() {\n  const searchParams = useSearchParams();\n  const handle = searchParams?.get('handle') as string;\n  const [templates, setTemplates] = useState([]);\n\n  useEffect(() => {\n    if (!handle) return;\n    fetch('/api/templates-by-creator?handle=' + handle)\n      .then((res) => res.json())\n      .then(setTemplates);\n  }, [handle]);\n\n  return (\n    <div className=\"text-white p-6 max-w-3xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-6\">🎨 Templates by @{handle}</h1>\n      <ul className=\"space-y-4\">\n        {templates.map((t: Template, i) => (\n          <li key={i} className=\"bg-zinc-800 rounded p-4\">\n            <div className=\"font-semibold\">{t.name}</div>\n            <div className=\"text-zinc-400 text-sm\">{t.headline || t.description}</div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/press.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { NextSeo } from 'next-seo';\nimport { usePageSeo } from '@/lib/usePageSeo';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\nexport default function PressPage() {\n  return (\n    <>\n      <NextSeo\n        {...usePageSeo({\n          description: 'Press page.',\n        })}\n      />\n      <div className=\"p-6 max-w-3xl mx-auto text-white\">\n        <h1 className=\"text-3xl font-bold mb-4\">📣 QuickSites Press Kit</h1>\n\n        <p className=\"text-zinc-400 mb-6\">\n          QuickSites is a transparent publishing layer for human-centered presence. Open-source,\n          steward-led, and remixable.\n        </p>\n\n        <h2 className=\"text-xl font-semibold mb-2\">🎨 Logos & Media</h2>\n        <div className=\"mb-4 space-x-4\">\n          <a href=\"/press/quicksites-logo.svg\" className=\"underline text-blue-400\" download>\n            Download SVG\n          </a>\n          <a href=\"/press/quicksites-logo.png\" className=\"underline text-blue-400\" download>\n            Download PNG\n          </a>\n        </div>\n        <Image\n          src=\"/press/quicksites-logo.png\"\n          alt=\"QuickSites Logo\"\n          width={200}\n          height={80}\n          className=\"mb-6 bg-white p-2 rounded\"\n        />\n\n        <h2 className=\"text-xl font-semibold mb-2\">📸 Screenshots</h2>\n        <div className=\"mb-6\">\n          <Image\n            src=\"/press/site-preview.png\"\n            alt=\"Site Screenshot\"\n            width={600}\n            height={320}\n            className=\"rounded border border-zinc-700\"\n          />\n        </div>\n\n        <h2 className=\"text-xl font-semibold mb-2\">📰 Description</h2>\n        <p className=\"text-zinc-300 mb-6 text-sm\">\n          QuickSites lets anyone launch a fully transparent site in minutes, remix existing\n          templates, and track civic impact via referral chains and remix trees. Built with\n          simplicity, shared stewardship, and sunlight.\n        </p>\n\n        <h2 className=\"text-xl font-semibold mb-2\">📬 Contact</h2>\n        <p className=\"text-sm text-zinc-400\">\n          For press inquiries or interviews, email:{' '}\n          <code className=\"text-white\">press@quicksites.ai</code>\n        </p>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/profile.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RewardTally } from '@/components/reward-tally';\nimport { json } from '@/lib/api/json';\nimport { useUser } from '@supabase/auth-helpers-react';\nimport { useEffect, useState } from 'react';\n\nexport default function Profile() {\n  const user = useUser();\n  const [points, setPoints] = useState(0);\n  const [refLink, setRefLink] = useState('');\n\n  useEffect(() => {\n    if (user) {\n      fetch(`/api/reward-points?user_id=${user.id}`)\n        .then((res) => res.json())\n        .then((d) => setPoints(d.total || 0));\n      setRefLink(`${window.location.origin}/?ref=${user.id}`);\n    }\n  }, [user]);\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 text-white\">\n      <h1 className=\"text-2xl font-bold mb-4\">👤 Profile</h1>\n      {user && (\n        <>\n          <div className=\"mb-6\">\n            <RewardTally points={points} />\n          </div>\n          <div className=\"bg-zinc-800 p-4 rounded text-sm\">\n            <div className=\"text-zinc-400 mb-1\">Your referral link:</div>\n            <code className=\"text-blue-400\">{refLink}</code>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/publish/[slug].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":35,"column":11,"nodeType":"JSXOpeningElement","endLine":39,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { Template } from '@/types/template';\n\nexport default function PublishPage() {\n  const searchParams = useSearchParams();\n  const slug = searchParams?.get('slug') as string;\n  const [template, setTemplate] = useState<Template | null>(null);\n  const [status, setStatus] = useState<'idle' | 'publishing' | 'done'>('idle');\n\n  useEffect(() => {\n    if (!slug) return;\n    fetch(`/api/template?domain=${slug}`)\n      .then((res) => res.json())\n      .then((d) => setTemplate(d?.data));\n  }, [slug]);\n\n  const handlePublish = async () => {\n    setStatus('publishing');\n    await fetch('/api/publish-site', {\n      method: 'POST',\n      body: JSON.stringify({ domain: slug }),\n    });\n    setStatus('done');\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 text-white text-center\">\n      <h1 className=\"text-2xl font-bold mb-4\">🚀 Publish: {slug}</h1>\n      {template && (\n        <>\n          <p className=\"mb-2 text-sm text-zinc-400\">Template: {template.id}</p>\n          <img\n            src={`/screenshots/${slug}.thumb.png`}\n            alt={`${slug} preview`}\n            className=\"w-full h-32 object-cover rounded mb-4\"\n          />\n        </>\n      )}\n      {status === 'done' ? (\n        <p className=\"text-green-400 font-medium\">🎉 Published! Visit: https://{slug}</p>\n      ) : (\n        <button\n          onClick={handlePublish}\n          className=\"bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded text-white\"\n        >\n          {status === 'publishing' ? 'Publishing…' : 'Publish Site'}\n        </button>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/remix-map.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport ReactFlow, { Background, Controls } from 'reactflow';\nimport { json } from '@/lib/api/json';\nimport 'reactflow/dist/style.css';\nimport { useEffect, useState } from 'react';\n\nexport default function RemixMap() {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/remix-dag')\n      .then((res) => res.json())\n      .then(({ nodes, edges }) => {\n        setNodes(nodes);\n        setEdges(edges);\n      });\n  }, []);\n\n  return (\n    <div className=\"h-screen bg-zinc-900 text-white\">\n      <h1 className=\"text-2xl font-bold p-4\">🌐 Remix DAG</h1>\n      <div className=\"h-[90%]\">\n        <ReactFlow nodes={nodes} edges={edges} fitView>\n          <Background />\n          <Controls />\n        </ReactFlow>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/settings/share.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profile' is assigned a value but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useUser, useSession } from '@supabase/auth-helpers-react';\n\nexport default function ShareSettings() {\n  const user = useUser();\n  const session = useSession();\n  const accessToken = session?.access_token;\n\n  const [profile, setProfile] = useState<any>(null);\n  const [bio, setBio] = useState('');\n  const [emoji, setEmoji] = useState('🌱');\n  const [tags, setTags] = useState('');\n  const [visible, setVisible] = useState(false);\n  const [status, setStatus] = useState<'idle' | 'saving' | 'done' | 'error'>('idle');\n\n  useEffect(() => {\n    if (!user) return;\n    fetch('/api/public-profile?handle=' + user.user_metadata.handle)\n      .then((res) => res.json())\n      .then((data) => {\n        setProfile(data);\n        setBio(data.bio || '');\n        setEmoji(data.emoji || '🌱');\n        setTags((data.goal_tags || []).join(', '));\n        setVisible(data.visible);\n      });\n  }, [user]);\n\n  const handleSave = async () => {\n    if (!accessToken || !user) return;\n    setStatus('saving');\n    const res = await fetch('/api/update-profile', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify({\n        bio,\n        emoji,\n        visible,\n        goal_tags: tags.split(',').map((t) => t.trim()),\n        handle: user.user_metadata.handle,\n      }),\n    });\n    setStatus(res.ok ? 'done' : 'error');\n  };\n\n  return (\n    <div className=\"p-6 text-white max-w-xl mx-auto space-y-4\">\n      <h1 className=\"text-2xl font-bold\">📡 Share My World</h1>\n      <p className=\"text-zinc-400 text-sm\">\n        This page controls what others can see at /world/[handle]/share\n      </p>\n\n      <div>\n        <label className=\"block text-sm mb-1\">Emoji</label>\n        <input\n          value={emoji}\n          onChange={(e) => setEmoji(e.target.value)}\n          className=\"text-black w-full p-1 rounded\"\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm mb-1\">Short Bio</label>\n        <textarea\n          value={bio}\n          onChange={(e) => setBio(e.target.value)}\n          rows={2}\n          className=\"text-black w-full p-1 rounded\"\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm mb-1\">Goal Tags (comma separated)</label>\n        <input\n          value={tags}\n          onChange={(e) => setTags(e.target.value)}\n          className=\"text-black w-full p-1 rounded\"\n        />\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <input type=\"checkbox\" checked={visible} onChange={() => setVisible(!visible)} />\n        <label>Make my page public</label>\n      </div>\n\n      <button onClick={handleSave} className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded\">\n        {status === 'saving' ? 'Saving...' : 'Save Changes'}\n      </button>\n      {status === 'done' && <p className=\"text-green-400 text-sm\">✅ Updated</p>}\n      {status === 'error' && <p className=\"text-red-500 text-sm\">⚠️ Something went wrong</p>}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/source.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/start.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useRouter } from 'next/navigation';\nimport { useUser, useSession } from '@supabase/auth-helpers-react';\n\nexport default function StartPage() {\n  const user = useUser();\n  const session = useSession();\n  const router = useRouter();\n\n  const [templates, setTemplates] = useState([]);\n  const [loc, setLoc] = useState<GeolocationCoordinates | null>(null);\n  const [selected, setSelected] = useState('');\n  const [status, setStatus] = useState<'idle' | 'saving' | 'done' | 'error'>('idle');\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      (pos) => setLoc(pos.coords),\n      () => setLoc(null)\n    );\n    fetch('/api/habit-templates')\n      .then((_res) => _res.json())\n      .then(setTemplates);\n  }, []);\n\n  const handleAdd = async () => {\n    if (!selected || !user || !session || !loc) return;\n    setStatus('saving');\n\n    const accessToken = session.access_token;\n\n    const res = await fetch('/api/create-block', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify({\n        lat: loc.latitude,\n        lon: loc.longitude,\n        title: selected.charAt(0).toUpperCase() + selected.slice(1),\n        message: `Tracking: ${selected}`,\n        emoji: selected === 'floss' ? '🦷' : selected === 'water' ? '💧' : '🧘',\n        slug: selected,\n        type: 'tracking',\n        actions: [{ label: 'Check In', type: 'check-in', target: selected }],\n      }),\n    });\n\n    if (res.ok) {\n      setStatus('done');\n      router.push('/world/me');\n    } else {\n      setStatus('error');\n    }\n  };\n\n  return (\n    <div className=\"text-white p-6 max-w-xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">👋 Welcome to Your AR Habit Tracker</h1>\n      <p className=\"text-zinc-400 mb-4\">\n        Choose a habit to start tracking, and we&apos;ll place it in your world:\n      </p>\n      <ul className=\"space-y-3\">\n        {templates.map((t: any) => (\n          <li key={t.slug}>\n            <label className=\"flex items-center space-x-3 cursor-pointer\">\n              <input\n                type=\"radio\"\n                name=\"habit\"\n                value={t.slug}\n                checked={selected === t.slug}\n                onChange={() => setSelected(t.slug)}\n                className=\"form-radio\"\n              />\n              <span>\n                {t.emoji} {t.title}\n              </span>\n            </label>\n          </li>\n        ))}\n      </ul>\n      <button\n        onClick={handleAdd}\n        disabled={!selected || !loc || status === 'saving'}\n        className=\"mt-6 px-4 py-2 rounded bg-blue-600 hover:bg-blue-700 disabled:opacity-50\"\n      >\n        {status === 'saving' ? 'Creating...' : '➕ Add to My World'}\n      </button>\n      {status === 'error' && (\n        <p className=\"text-red-500 mt-4\">Something went wrong. Please try again.</p>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/starter.tsx","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎··············setSlug(e.target.value.toLowerCase().replace(/[^a-z0-9-]+/g,·'-'))⏎············` with `·setSlug(e.target.value.toLowerCase().replace(/[^a-z0-9-]+/g,·'-'))`","line":190,"column":29,"nodeType":null,"messageId":"replace","endLine":192,"endColumn":13,"fix":{"range":[5707,5801],"text":" setSlug(e.target.value.toLowerCase().replace(/[^a-z0-9-]+/g, '-'))"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { useEffect, useState, useRef } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport Image from 'next/image';\nimport { createClient } from '@supabase/supabase-js';\nimport { generateBaseSlug } from '@/lib/slugHelpers';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nconst copyToClipboard = (text: string) => {\n  navigator.clipboard.writeText(text).then(() => {\n    alert('Link copied to clipboard!');\n  });\n};\n\nexport default function StarterPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n\n  const [bizName, setBizName] = useState('');\n  const [location, setLocation] = useState('');\n  const [slug, setSlug] = useState('');\n  const [domain, setDomain] = useState('');\n  const [template, setTemplate] = useState<any>(null);\n  const [templateVersionId, setTemplateVersionId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [slugAvailable, setSlugAvailable] = useState<boolean | null>(null);\n  const [generatingSlug, setGeneratingSlug] = useState(false);\n  const [typedDomain, setTypedDomain] = useState('');\n  const bizNameRef = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    bizNameRef.current?.focus();\n  }, []);\n\n  useEffect(() => {\n    const name = searchParams?.get('template') || '';\n    if (!name) return;\n\n    supabase\n      .from('template_versions')\n      .select('*')\n      .eq('template_name', name)\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .then(({ data, error }) => {\n        if (error || !data?.length) {\n          console.error('Template version load error:', error);\n          setTemplate(null);\n          setTemplateVersionId(null);\n        } else {\n          setTemplate(data[0]);\n          setTemplateVersionId(data[0].id);\n        }\n      });\n  }, [searchParams]);\n\n  useEffect(() => {\n    if (!slug) return setSlugAvailable(null);\n\n    const delay = setTimeout(async () => {\n      const { data } = await supabase.from('sites').select('id').eq('slug', slug).maybeSingle();\n      setSlugAvailable(!data);\n    }, 400);\n\n    return () => clearTimeout(delay);\n  }, [slug]);\n\n  useEffect(() => {\n    if (!bizName.trim()) return;\n\n    setGeneratingSlug(true);\n    const baseSlug = generateBaseSlug(bizName, location);\n    const fullDomain = `${baseSlug}.com`;\n\n    const delay = setTimeout(() => {\n      setSlug(baseSlug);\n      setDomain(fullDomain);\n\n      let i = 0;\n      const typeInterval = setInterval(() => {\n        setTypedDomain(fullDomain.slice(0, i + 1));\n        i++;\n        if (i === fullDomain.length) {\n          clearInterval(typeInterval);\n          setGeneratingSlug(false);\n        }\n      }, 50);\n    }, 300);\n\n    return () => clearTimeout(delay);\n  }, [bizName, location]);\n\n  const claimIt = async () => {\n    if (!templateVersionId) {\n      alert('Template failed to load. Please choose a different template or try again.');\n      return;\n    }\n\n    if (slugAvailable === false) {\n      alert('That slug is already taken. Please choose another.');\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const res = await fetch('/api/sites/create', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          template_version_id: templateVersionId,\n          business_name: bizName,\n          location,\n          domain,\n          slug,\n        }),\n      });\n\n      if (!res.ok) {\n        const errorText = await res.text();\n        console.error('Create site error:', errorText);\n        alert('Error creating site. Check console for details.');\n        setLoading(false);\n        return;\n      }\n\n      const site = await res.json();\n      const slugToUse = site.slug ?? site.site_id;\n      router.push(`/edit/${slugToUse}`);\n    } catch (err) {\n      console.error('Unexpected error in claimIt:', err);\n      alert('Unexpected error. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto text-white p-6 space-y-6\">\n      <h1 className=\"text-3xl font-bold text-center\">✨ Create Your QuickSite</h1>\n\n      {template ? (\n        <div className=\"bg-zinc-800 p-4 rounded shadow\">\n          <h2 className=\"text-xl font-semibold mb-1\">{template.template_name}</h2>\n          {template.thumbnail_url && (\n            <Image\n              src={template.thumbnail_url}\n              alt=\"Preview\"\n              width={800}\n              height={450}\n              className=\"rounded mb-3\"\n            />\n          )}\n          <p className=\"text-sm text-zinc-400 mb-2\">{template.description}</p>\n        </div>\n      ) : (\n        <p className=\"text-zinc-400 italic\">Loading template preview...</p>\n      )}\n\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"text-sm text-zinc-400\">Business Name</label>\n          <input\n            ref={bizNameRef}\n            value={bizName}\n            onChange={(e) => setBizName(e.target.value)}\n            className=\"w-full mb-3 p-2 rounded bg-zinc-800 text-white\"\n            placeholder=\"e.g. Towmanz\"\n          />\n        </div>\n\n        <div>\n          <label className=\"text-sm text-zinc-400\">Location (optional)</label>\n          <input\n            value={location}\n            onChange={(e) => setLocation(e.target.value)}\n            className=\"w-full mb-3 p-2 rounded bg-zinc-800 text-white\"\n            placeholder=\"e.g. Auburn, WA\"\n          />\n        </div>\n\n        <div>\n          <label className=\"text-sm text-zinc-400\">Custom Slug (optional)</label>\n          <input\n            value={slug}\n            onChange={(e) =>\n              setSlug(e.target.value.toLowerCase().replace(/[^a-z0-9-]+/g, '-'))\n            }\n            className=\"w-full mb-1 p-2 rounded bg-zinc-800 text-white\"\n            placeholder=\"e.g. mytow-auburn\"\n          />\n          {slug && slugAvailable !== null && (\n            <p className={`text-sm ${slugAvailable ? 'text-green-400' : 'text-red-400'}`}>\n              {slugAvailable ? '✅ Available' : '🚫 Already taken'}\n            </p>\n          )}\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          {domain ? (\n            <>\n              <p className=\"text-zinc-300 text-sm\">Suggested Domain:</p>\n              <div className=\"text-lg font-mono font-bold tracking-wide\">\n                {typedDomain || (generatingSlug ? '...' : domain)}\n              </div>\n\n              {slug && (\n                <>\n                  <div className=\"text-sm text-zinc-400 flex items-center justify-center gap-2\">\n                    <span>Preview:</span>\n                    <code className=\"text-white px-2 py-1 bg-zinc-700 rounded text-sm\">\n                      /edit/{slug}\n                    </code>\n                    <button\n                      onClick={() => copyToClipboard(`${window.location.origin}/edit/${slug}`)}\n                      className=\"text-blue-400 hover:underline text-xs\"\n                    >\n                      Copy\n                    </button>\n                  </div>\n\n                  <div className=\"text-sm text-zinc-400 flex flex-col items-center gap-1 mt-2\">\n                    <span>Public Site:</span>\n                    <code className=\"text-white px-2 py-1 bg-zinc-700 rounded text-sm\">\n                      https://{slug}.quicksites.ai\n                    </code>\n                    <button\n                      onClick={() => copyToClipboard(`https://${slug}.quicksites.ai`)}\n                      className=\"text-blue-400 hover:underline text-xs\"\n                    >\n                      Copy Public Link\n                    </button>\n                  </div>\n                </>\n              )}\n\n              <button\n                onClick={claimIt}\n                disabled={loading}\n                className=\"mt-2 px-4 py-2 bg-green-600 rounded text-white font-medium hover:bg-green-700\"\n              >\n                🚀 Claim It\n              </button>\n            </>\n          ) : (\n            bizName.trim() !== '' && (\n              <p className=\"text-sm text-red-400\">\n                ⚠️ Please complete the business name and location to generate a domain.\n              </p>\n            )\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/support/[slug].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'searchParams'. Either include it or remove the dependency array.","line":18,"column":6,"nodeType":"ArrayExpression","endLine":18,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [searchParams]","fix":{"range":[640,667],"text":"[searchParams]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":18,"column":7,"nodeType":"ChainExpression","endLine":18,"endColumn":32},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'searchParams'. Either include it or remove the dependency array.","line":24,"column":6,"nodeType":"ArrayExpression","endLine":24,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [searchParams]","fix":{"range":[788,816],"text":"[searchParams]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":24,"column":7,"nodeType":"ChainExpression","endLine":24,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { json } from '@/lib/api/json';\nimport { useEffect, useState } from 'react';\nimport { CelebrationModal } from '@/components/embed/celebration-modal';\n\nexport default function SupportCampaign() {\n  const searchParams = useSearchParams();\n  const [campaign, setCampaign] = useState<any>(null);\n  const [showBadgeCelebration, setShowBadgeCelebration] = useState(false);\n\n  useEffect(() => {\n    if (!searchParams?.get('slug')) return;\n    fetch('/api/campaign?slug=' + searchParams.get('slug'))\n      .then((res) => res.json())\n      .then(setCampaign);\n  }, [searchParams?.get('slug')]);\n\n  useEffect(() => {\n    if (searchParams?.get('badge') === 'done') {\n      setShowBadgeCelebration(true);\n    }\n  }, [searchParams?.get('badge')]);\n\n  if (!campaign) return <div className=\"p-6 text-white\">Loading...</div>;\n\n  const pct = Math.min(100, Math.round((campaign.count / campaign.goal_count) * 100));\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 text-white space-y-6\">\n      <h1 className=\"text-2xl font-bold\">{campaign.headline}</h1>\n      <p className=\"text-zinc-400 text-sm\">\n        Goal: {campaign.goal_count} {campaign.target_action}s\n      </p>\n      <div className=\"bg-zinc-700 h-4 rounded overflow-hidden\">\n        <div className=\"bg-green-500 h-full\" style={{ width: pct + '%' }}></div>\n      </div>\n      <p className=\"text-sm text-green-300\">\n        {campaign.count} {campaign.target_action}s received\n      </p>\n\n      {showBadgeCelebration && (\n        <CelebrationModal\n          type=\"badge\"\n          slug={searchParams?.get('slug') as string}\n          onClose={() => setShowBadgeCelebration(false)}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/support/[slug]/edit.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'searchParams'. Either include it or remove the dependency array.","line":16,"column":6,"nodeType":"ArrayExpression","endLine":16,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [searchParams]","fix":{"range":[522,549],"text":"[searchParams]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":16,"column":7,"nodeType":"ChainExpression","endLine":16,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useRouter, useSearchParams } from 'next/navigation';\n\nexport default function EditCampaign() {\n  const searchParams = useSearchParams();\n  const [data, setData] = useState<any>(null);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    if (!searchParams?.get('slug')) return;\n    fetch('/api/campaign?slug=' + searchParams.get('slug'))\n      .then((res) => res.json())\n      .then(setData);\n  }, [searchParams?.get('slug')]);\n\n  const submit = async () => {\n    const res = await fetch('/api/update-campaign', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n    const json = await res.json();\n    setMessage(json.error ? 'Error: ' + json.error : '✅ Updated!');\n  };\n\n  if (!data) return <div className=\"p-6 text-white\">Loading...</div>;\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 text-white space-y-4\">\n      <h1 className=\"text-2xl font-bold\">✏️ Edit Campaign</h1>\n      <input\n        value={data.headline}\n        onChange={(e) => setData({ ...data, headline: e.target.value })}\n        className=\"w-full p-2 text-black rounded\"\n      />\n      <input\n        type=\"number\"\n        value={data.goal_count}\n        onChange={(e) => setData({ ...data, goal_count: parseInt(e.target.value) })}\n        className=\"w-full p-2 text-black rounded\"\n      />\n      <select\n        value={data.target_action}\n        onChange={(e) => setData({ ...data, target_action: e.target.value })}\n        className=\"w-full p-2 text-black rounded\"\n      >\n        <option value=\"cheer\">🎉 Cheer</option>\n        <option value=\"echo\">🔁 Echo</option>\n        <option value=\"reflect\">🪞 Reflect</option>\n        <option value=\"checkin\">✅ Check-in</option>\n      </select>\n      <input\n        value={data.block_id}\n        onChange={(e) => setData({ ...data, block_id: e.target.value })}\n        className=\"w-full p-2 text-black rounded\"\n      />\n      <button onClick={submit} className=\"bg-green-600 hover:bg-green-700 px-4 py-2 rounded\">\n        Save\n      </button>\n      {message && <p className=\"text-green-300 text-sm\">{message}</p>}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/support/create.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useState } from 'react';\nimport { json } from '@/lib/api/json';\n\nexport default function PublicCampaignCreate() {\n  const [slug, setSlug] = useState('');\n  const [headline, setHeadline] = useState('');\n  const [goal, setGoal] = useState(10);\n  const [action, setAction] = useState('cheer');\n  const [blockId, setBlockId] = useState('');\n  const [submitted, setSubmitted] = useState('');\n\n  const submit = async () => {\n    const res = await fetch('/api/create-campaign', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        slug,\n        headline,\n        goal_count: goal,\n        target_action: action,\n        blockId,\n      }),\n    });\n\n    const json = await res.json();\n    setSubmitted(json.error ? 'Error: ' + json.error : '✅ Campaign created!');\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 text-white space-y-4\">\n      <h1 className=\"text-2xl font-bold\">📣 Launch a Campaign</h1>\n      <p className=\"text-sm text-zinc-400\">\n        Create a public support goal around a habit or mission.\n      </p>\n      <input\n        value={slug}\n        onChange={(e) => setSlug(e.target.value)}\n        placeholder=\"Slug (e.g. floss)\"\n        className=\"p-2 text-black w-full rounded\"\n      />\n      <input\n        value={headline}\n        onChange={(e) => setHeadline(e.target.value)}\n        placeholder=\"Headline\"\n        className=\"p-2 text-black w-full rounded\"\n      />\n      <input\n        type=\"number\"\n        value={goal}\n        onChange={(e) => setGoal(Number(e.target.value))}\n        className=\"p-2 text-black w-full rounded\"\n      />\n      <select\n        value={action}\n        onChange={(e) => setAction(e.target.value)}\n        className=\"p-2 text-black w-full rounded\"\n      >\n        <option value=\"cheer\">🎉 Cheer</option>\n        <option value=\"echo\">🔁 Echo</option>\n        <option value=\"reflect\">🪞 Reflect</option>\n        <option value=\"checkin\">✅ Check-in</option>\n      </select>\n      <input\n        value={blockId}\n        onChange={(e) => setBlockId(e.target.value)}\n        placeholder=\"Block ID (optional)\"\n        className=\"p-2 text-black w-full rounded\"\n      />\n      <button onClick={submit} className=\"bg-green-600 hover:bg-green-700 px-4 py-2 rounded\">\n        Create Campaign\n      </button>\n      {submitted && <p className=\"text-green-300 text-sm\">{submitted}</p>}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/support/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport Link from 'next/link';\n\nexport default function SupportDirectory() {\n  const [campaigns, setCampaigns] = useState([]);\n  const [actionFilter, setActionFilter] = useState('');\n\n  useEffect(() => {\n    fetch('/api/campaigns')\n      .then((res) => res.json())\n      .then(setCampaigns);\n  }, []);\n\n  const filtered = actionFilter\n    ? campaigns.filter((c: any) => c.target_action === actionFilter)\n    : campaigns;\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6 text-white space-y-6\">\n      <h1 className=\"text-2xl font-bold\">📣 Support Directory</h1>\n\n      <div className=\"space-x-2 text-sm\">\n        <button onClick={() => setActionFilter('')} className=\"underline text-blue-400\">\n          All\n        </button>\n        <button onClick={() => setActionFilter('cheer')} className=\"underline text-green-400\">\n          🎉 Cheer\n        </button>\n        <button onClick={() => setActionFilter('echo')} className=\"underline text-blue-300\">\n          🔁 Echo\n        </button>\n        <button onClick={() => setActionFilter('reflect')} className=\"underline text-purple-300\">\n          🪞 Reflect\n        </button>\n        <button onClick={() => setActionFilter('checkin')} className=\"underline text-yellow-300\">\n          ✅ Check-in\n        </button>\n      </div>\n\n      <ul className=\"space-y-4\">\n        {filtered.map((c: any) => (\n          <li key={c.slug} className=\"bg-zinc-800 p-4 rounded\">\n            <Link\n              href={`/support/${c.slug}`}\n              className=\"text-blue-400 text-lg font-semibold hover:underline\"\n            >\n              {c.headline}\n            </Link>\n            <p className=\"text-sm text-zinc-400\">\n              {c.goal_count} {c.target_action}s goal • Created{' '}\n              {new Date(c.created_at).toLocaleDateString()}\n            </p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/system/logs/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/template-market.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":25,"column":17,"nodeType":"JSXOpeningElement","endLine":29,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport Link from 'next/link';\nimport { NextSeo } from 'next-seo';\n\nexport default function TemplateMarket() {\n  const [templates, setTemplates] = useState<any[]>([]);\n\n  useEffect(() => {\n    fetch('/api/template-api')\n      .then((res) => res.json())\n      .then(setTemplates);\n  }, []);\n\n  return (\n    <>\n      <NextSeo title=\"Template Market\" description=\"Pick a template to start\" />\n      <div className=\"p-6 max-w-5xl mx-auto text-white\">\n        <h1 className=\"text-3xl font-bold mb-6\">🎨 Template Market</h1>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6\">\n          {templates.filter(Boolean).map((tpl, i) => (\n            <div key={tpl.id || i} className=\"bg-zinc-800 rounded p-4 shadow\">\n              {tpl.thumbnail_url && (\n                <img\n                  src={tpl.thumbnail_url}\n                  alt={tpl.template_name}\n                  className=\"w-full h-32 object-cover mb-2 rounded\"\n                />\n              )}\n              <h2 className=\"font-semibold text-lg\">{tpl.template_name}</h2>\n              <p className=\"text-sm text-zinc-400 mb-2\">{tpl.description || 'No description'}</p>\n              <Link\n                href={`/starter?template=${tpl.template_name}`}\n                className=\"text-blue-400 text-xs underline\"\n              >\n                Use this →\n              </Link>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/thank-you.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/theme-preview/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/timeline.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\n\ntype TimelineEvent = {\n  date: string;\n  description: string;\n};\n\nexport default function Timeline() {\n  const [history, setHistory] = useState<TimelineEvent[]>([]);\n\n  useEffect(() => {\n    fetch('/api/timeline')\n      .then((res) => res.json())\n      .then((data: TimelineEvent[]) => setHistory(data));\n  }, []);\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-6 text-white\">\n      <h1 className=\"text-3xl font-bold mb-6 text-center\">📈 Network Timeline</h1>\n      <ul className=\"space-y-3 text-sm\">\n        {history.map((event, i) => (\n          <li key={i} className=\"border-l-2 border-blue-500 pl-3\">\n            <div className=\"text-zinc-300\">{event.date}</div>\n            <div className=\"text-white\">{event.description}</div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/transparency.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":27,"column":15,"nodeType":"JSXOpeningElement","endLine":31,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { NextSeo } from 'next-seo';\nimport { json } from '@/lib/api/json';\nimport { usePageSeo } from '@/lib/usePageSeo';\nimport { useEffect, useState } from 'react';\n\nexport default function TransparencyViewer() {\n  const [sites, setSites] = useState([]);\n  const seo = usePageSeo({\n    description: 'Transparency page.',\n  });\n\n  useEffect(() => {\n    fetch('/api/public-sites')\n      .then((res) => res.json())\n      .then(setSites);\n  }, []);\n\n  return (\n    <>\n      <NextSeo {...seo} />\n      <div className=\"p-6 max-w-5xl mx-auto text-white\">\n        <h1 className=\"text-3xl font-bold mb-6\">🧿 Transparency Viewer</h1>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n          {sites.map((site: any) => (\n            <div key={site.domain} className=\"bg-zinc-800 rounded shadow p-4\">\n              <img\n                src={`/screenshots/${site.domain}.thumb.png`}\n                alt={site.domain}\n                className=\"w-full h-32 object-cover rounded mb-2\"\n              />\n              <h2 className=\"text-lg font-semibold\">{site.domain}</h2>\n              <p className=\"text-sm text-zinc-400\">{site.template_id}</p>\n              <p className=\"text-xs text-zinc-500\">\n                {new Date(site.claimed_at).toLocaleDateString()}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/trust.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/unauthorized.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/world/[slug].tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'position' is assigned a value but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'i' is defined but never used. Allowed unused args must match /^_/u.","line":31,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":31},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":41,"column":17,"nodeType":"JSXOpeningElement","endLine":41,"endColumn":97}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { json } from '@/lib/api/json';\nimport { useEffect, useState } from 'react';\n\nexport default function WorldViewer() {\n  const searchParams = useSearchParams();\n  const slug = searchParams?.get('slug') as string;\n  const [blocks, setBlocks] = useState([]);\n  const [position, setPosition] = useState<any>(null);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      (pos) => {\n        setPosition(pos.coords);\n        fetch(`/api/nearby-blocks?lat=${pos.coords.latitude}&lon=${pos.coords.longitude}`)\n          .then((res) => res.json())\n          .then(setBlocks);\n      },\n      () => console.warn('Geolocation denied')\n    );\n  }, []);\n\n  return (\n    <div className=\"text-white p-6 max-w-3xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-6\">🌍 World View: @{slug}</h1>\n\n      {!blocks.length && <p className=\"text-zinc-500\">Loading nearby blocks...</p>}\n\n      <ul className=\"space-y-4\">\n        {blocks.map((b: any, i: number) => (\n          <li key={b.id} className=\"bg-zinc-800 rounded p-4\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h2 className=\"font-semibold\">\n                  {b.emoji} {b.title}\n                </h2>\n                <p className=\"text-zinc-400 text-sm\">{b.message}</p>\n              </div>\n              {b.image_url && (\n                <img src={b.image_url} alt=\"block\" className=\"w-16 h-16 rounded object-cover\" />\n              )}\n            </div>\n            <div className=\"mt-4 space-x-2\">\n              {(b.actions || []).map((a: any, j: number) => (\n                <button key={j} className=\"px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 rounded\">\n                  {a.label}\n                </button>\n              ))}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/world/profile/[slug]/share.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":11,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useState } from 'react';\nimport { json } from '@/lib/api/json';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useUser, useSession } from '@supabase/auth-helpers-react';\n\nexport default function PublicWorldShare() {\n  const searchParams = useSearchParams();\n  const slug = searchParams?.get('slug') as string;\n  const handle = slug as string;\n  const user = useUser();\n  const session = useSession();\n\n  const [profile, setProfile] = useState<any>(null);\n  const [blocks, setBlocks] = useState([]);\n\n  useEffect(() => {\n    if (!handle) return;\n    fetch('/api/public-profile?handle=' + handle)\n      .then((res) => res.json())\n      .then(setProfile);\n\n    fetch('/api/blocks-by-handle?handle=' + handle)\n      .then((res) => res.json())\n      .then(setBlocks);\n  }, [handle]);\n\n  const logClick = async (block_id: string, action: string) => {\n    await fetch('/api/log-click', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ block_id, action, handle }),\n    });\n  };\n\n  if (!profile) return <div className=\"p-6 text-white\">Loading...</div>;\n  if (!profile.visible) return <div className=\"p-6 text-white\">🌒 This page is private.</div>;\n\n  return (\n    <div className=\"p-6 max-w-2xl mx-auto text-white space-y-6\">\n      <h1 className=\"text-3xl font-bold\">\n        {profile.emoji} @{handle}\n      </h1>\n      {profile.bio && <p className=\"text-zinc-400\">{profile.bio}</p>}\n      {profile.goal_tags?.length > 0 && (\n        <div className=\"text-xs text-green-400 uppercase tracking-wider\">\n          {profile.goal_tags.join(' • ')}\n        </div>\n      )}\n\n      <div className=\"mt-6 space-y-3\" style={{ border: '1px solid #222' }}>\n        {blocks.map((b: any) => (\n          <div key={b.id} className=\"flex flex-col gap-3\" style={{ border: '1px solid #222' }}>\n            <div className=\"bg-zinc-800 p-4 rounded\">\n              <div className=\"text-lg\">\n                {b.emoji} {b.title}\n              </div>\n              <div className=\"text-sm text-zinc-400\">{b.message}</div>\n              <div className=\"flex gap-3 text-xs text-zinc-400 mt-2\">\n                {b.cheer_count > 0 && <span>🎉 {b.cheer_count}</span>}\n                {b.echo_count > 0 && <span>🔁 {b.echo_count}</span>}\n                {b.reflect_count > 0 && <span>🪞 {b.reflect_count}</span>}\n              </div>\n            </div>\n\n            {session?.access_token ? (\n              <div className=\"mt-3 flex gap-2 text-sm\">\n                <button\n                  className=\"bg-green-700 hover:bg-green-800 text-white px-3 py-1 rounded\"\n                  onClick={async () => {\n                    await logClick(b.id, 'cheer');\n                    await fetch('/api/cheer', {\n                      method: 'POST',\n                      headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${session.access_token}`,\n                      },\n                      body: JSON.stringify({ block_id: b.id }),\n                    });\n                    alert('🎉 Sent cheer!');\n                  }}\n                >\n                  🎉 Cheer\n                </button>\n                <button\n                  className=\"bg-blue-700 hover:bg-blue-800 text-white px-3 py-1 rounded\"\n                  onClick={async () => {\n                    await logClick(b.id, 'echo');\n                    await fetch('/api/echo', {\n                      method: 'POST',\n                      headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${session.access_token}`,\n                      },\n                      body: JSON.stringify({ block_id: b.id }),\n                    });\n                    alert('🔁 Echoed!');\n                  }}\n                >\n                  🔁 Echo\n                </button>\n                <button\n                  className=\"bg-purple-700 hover:bg-purple-800 text-white px-3 py-1 rounded\"\n                  onClick={async () => {\n                    const message = prompt('What reflection would you like to send?');\n                    if (!message) return;\n                    await logClick(b.id, 'reflect');\n                    await fetch('/api/reflect', {\n                      method: 'POST',\n                      headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${session.access_token}`,\n                      },\n                      body: JSON.stringify({ block_id: b.id, message }),\n                    });\n                    alert('🪞 Reflection sent');\n                  }}\n                >\n                  🪞 Reflect\n                </button>\n              </div>\n            ) : (\n              <p className=\"text-xs text-zinc-500 mt-2 italic\">\n                🔒 Sign in to cheer, echo, or reflect.\n              </p>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/pages/world/profile/[slug]/supporters.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'json' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { json } from '@/lib/api/json';\nimport { useEffect, useState } from 'react';\n\nexport default function SupportersPage() {\n  const searchParams = useSearchParams();\n  const slug = searchParams?.get('slug') as string;\n  const [supporters, setSupporters] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (!slug) return;\n    fetch('/api/supporters?handle=' + slug)\n      .then((res) => res.json())\n      .then(setSupporters);\n  }, [slug]);\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 text-white space-y-6\">\n      <h1 className=\"text-2xl font-bold\">🫂 Supporters</h1>\n      {supporters.length === 0 && <p className=\"text-zinc-400\">No support received yet.</p>}\n      <ul className=\"space-y-3\">\n        {supporters.map((s: any, i) => (\n          <li key={i} className=\"bg-zinc-800 p-3 rounded\">\n            <div className=\"text-sm text-green-400\">User: {s.user_id.slice(0, 8)}</div>\n            <div className=\"text-xs text-zinc-300\">\n              🎉 {s.cheer || 0} • 🔁 {s.echo || 0} • 🪞 {s.reflect || 0}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/postcss.config.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":2,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":7,"endColumn":5},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":3,"column":3,"nodeType":null,"messageId":"delete","endLine":3,"endColumn":5,"fix":{"range":[42,44],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":4,"column":1,"nodeType":null,"messageId":"delete","endLine":4,"endColumn":3,"fix":{"range":[55,57],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":5,"column":1,"nodeType":null,"messageId":"delete","endLine":5,"endColumn":3,"fix":{"range":[89,91],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":6,"column":3,"nodeType":null,"messageId":"delete","endLine":6,"endColumn":5,"fix":{"range":[115,117],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":7,"column":1,"nodeType":null,"messageId":"delete","endLine":7,"endColumn":3,"fix":{"range":[120,122],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":8,"column":1,"nodeType":null,"messageId":"delete","endLine":8,"endColumn":3,"fix":{"range":[125,127],"text":""}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":6,"source":"// ✅ postcss.config.js\nexport default {\n    plugins: {\n      '@tailwindcss/postcss': {},\n      autoprefixer: {},\n    },\n  };\n  ","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/alert-suspicious-tokens.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/check-import-casing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/check-links.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/cleanup-expired-tokens.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReportToken' is defined but never used.","line":3,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\n\ntype ReportToken = {\n  id: string;\n  user_id: string;\n  expires_at: string;\n};\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nconst { data, error } = await supabase\n  .from('report_tokens')\n  .select('*')\n  .lt('expires_at', new Date().toISOString());\n\nif (error) {\n  console.error('❌ Failed to clean expired tokens:', error);\n} else {\n  console.log(`🧼 Deleted ${data?.length || 0} expired tokens`);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/cleanup-screenshots.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/cleanup-sitemaps.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'base' is assigned a value but never used.","line":26,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from 'admin/lib/supabaseClient.js';\n\nconst BUCKET = 'sitemaps';\nconst MAX_ENTRIES = 30;\n\nasync function cleanupOldSnapshots() {\n  const { data, error } = await supabase.storage.from(BUCKET).list('', {\n    limit: 1000,\n    offset: 0,\n    sortBy: { column: 'created_at', order: 'desc' },\n  });\n\n  if (error) throw error;\n\n  const files = (data || []).filter(\n    (f: any) => f.name.endsWith('.xml') && !f.name.startsWith('latest')\n  );\n  const grouped = files.reduce<Record<string, typeof files>>((acc: any, file: any) => {\n    const base = file.name.split('-')[0]; // sitemap-index, sitemap-hreflang\n    if (!acc[base]) {\n      acc[base] = [];\n    }\n    acc[base].push(file);\n    return acc;\n  }, {});\n  for (const [base, items] of Object.entries(grouped)) {\n    const toDelete = (items as typeof files).slice(MAX_ENTRIES);\n    for (const file of toDelete) {\n      console.log(`🗑 Deleting old ${file.name}`);\n      await supabase.storage.from(BUCKET).remove([file.name]);\n    }\n  }\n\n  // also create/overwrite latest.xml\n  for (const [base, items] of Object.entries(grouped)) {\n    if (items.length > 0) {\n      const latest = items[0];\n      const latestName = `${base}-latest.xml`;\n      const { data: downloadUrl } = supabase.storage.from(BUCKET).getPublicUrl(latest.name);\n\n      if (downloadUrl) {\n        const res = await fetch(downloadUrl.publicUrl);\n        const buffer = await res.arrayBuffer();\n        await supabase.storage.from(BUCKET).upload(latestName, buffer, {\n          contentType: 'application/xml',\n          upsert: true,\n        });\n        console.log(`📌 Updated ${latestName}`);\n      }\n      // The code below is redundant and should be removed as it duplicates the upload logic inside the loop.\n      // INSERT_YOUR_REWRITE_HERE\n      console.log(`📌 Updated ${latestName}`);\n    }\n  }\n}\n\nawait cleanupOldSnapshots();\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/compare-sitemaps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/detect-campaign-winners.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'run' is defined but never used.","line":9,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import 'dotenv/config';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nasync function run() {\n  const { data: claims } = await supabase\n    .from('user_action_logs')\n    .select('*')\n    .eq('action_type', 'site_claimed')\n    .order('timestamp', { ascending: false })\n    .limit(50);\n\n  for (const log of claims || []) {\n    const { data: leadMatch } = await supabase\n      .from('leads')\n      .select('id, campaign_id, domain_id, business_name, email')\n      .eq('domain_id', log.domain_id)\n      .maybeSingle();\n\n    if (!leadMatch?.campaign_id) continue;\n\n    const { data: campaign } = await supabase\n      .from('campaigns')\n      .select('id, winner_lead_id, name, city')\n      .eq('id', leadMatch.campaign_id)\n      .maybeSingle();\n\n    if (campaign?.winner_lead_id) continue;\n\n    await supabase;\n    if (campaign) {\n      await supabase\n        .from('campaigns')\n        .update({ winner_lead_id: leadMatch.id })\n        .eq('id', campaign.id);\n\n      console.log(`🎉 ${leadMatch.business_name} won campaign ${campaign.name} (${campaign.city})`);\n\n      const subject = campaign ? `🏁 You Won: ${campaign.name}` : '🏁 You Won!';\n      const body = campaign\n        ? `Hey ${leadMatch.business_name}, you were the first to claim your site in ${campaign.name} (${campaign.city}). Congrats!\n          \nYour site is live at: https://${log.domain_id || 'your-site.com'}`\n        : `Hey ${leadMatch.business_name}, you were the first to claim your site. Congrats!\n\nYour site is live at: https://${log.domain_id || 'your-site.com'}`;\n\n      console.log('📧 MOCK EMAIL');\n      console.log('To:', leadMatch.email || '(no email)');\n      console.log('Subject:', subject);\n      console.log('Body:', body);\n      console.log('---');\n\n      await supabase.from('user_action_logs').insert([\n        {\n          lead_id: leadMatch.id,\n          domain_id: leadMatch.domain_id,\n          action_type: 'campaign_win',\n          triggered_by: 'campaign_bot',\n          notes: `Won ${campaign.name}`,\n        },\n      ]);\n    }\n  } // Closing bracket for the main function or block\n\n  run();\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/export-analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/export-audit-csv.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/exportGeoCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/filter-lint-report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/followup-second-chance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/gen-openapi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fs' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OpenAPIGenerator } from '@asteasolutions/zod-to-openapi';\n\nimport { z } from 'zod';\nimport fs from 'node:fs';\n\ntype RouteSpec = {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  path: string;\n  summary?: string;\n  description?: string;\n  tags?: string[];\n  input?: z.ZodTypeAny;\n  output?: z.ZodTypeAny;\n};\n\nexport function generateOpenApi(routes: RouteSpec[], title = 'API', version = '1.0.0') {\n  const generator = new OpenAPIGenerator(\n    {\n      openapi: '3.0.0',\n      info: { title, version },\n      paths: {},\n    },\n    'json'\n  );\n\n  for (const route of routes) {\n    generator.registerPath({\n      method: route.method.toLowerCase() as any,\n      path: route.path,\n      summary: route.summary,\n      description: route.description,\n      tags: route.tags,\n      request: route.input\n        ? {\n            body: {\n              content: {\n                'application/json': {\n                  schema: route.input,\n                },\n              },\n            },\n          }\n        : undefined,\n      responses: {\n        200: {\n          description: 'Success',\n          content: {\n            'application/json': {\n              schema: route.output || z.any(),\n            },\n          },\n        },\n      },\n    });\n  }\n\n  return generator.generateDocument();\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/generate-security-report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/generate-sitemap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/generate-thumbnails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/generate-weekly-report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/geo-alerts.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetch' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport fetch from 'node-fetch';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\nconst { data, error } = await supabase.from('token_logs').select('*');\n\nif (error) {\n  console.error('Failed to load token logs');\n  process.exit(1);\n}\n\nconst byToken: Record<string, Set<string>> = {};\nfor (const log of data) {\n  if (!log.token_hash || !log.ip_location) continue;\n  if (!byToken[log.token_hash]) byToken[log.token_hash] = new Set();\n  byToken[log.token_hash].add(log.ip_location);\n}\n\nfor (const [hash, locations] of Object.entries(byToken)) {\n  if (locations.size > 1) {\n    console.log(`⚠️ Geo anomaly: Token ${hash} used from ${Array.from(locations).join(', ')}`);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/lint-digest.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'__dirname' is assigned a value but never used.","line":13,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readFileSync, writeFileSync, existsSync } from 'fs';\nimport path from 'node:path';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconsole.log('🟡 lint-digest.ts: starting analysis...');\n\nif (typeof process !== 'undefined' && process.argv[1] === fileURLToPath(import.meta.url)) {\n  console.log('🟢 lint-digest.ts: running as main module');\n}\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Only run if executed directly\nif (process.argv[1] === __filename) {\n  console.log('🚀 Starting lint-digest.ts...');\n\n  const lintFile = 'lint-report.json';\n  const txtOut = 'lint-summary.txt';\n  const mdOut = 'lint-summary.md';\n\n  if (!existsSync(lintFile)) {\n    console.error(`❌ Missing ${lintFile}. Make sure ESLint ran correctly.`);\n    process.exit(1);\n  }\n\n  let results: any[];\n  try {\n    const raw = readFileSync(lintFile, 'utf-8');\n    results = JSON.parse(raw);\n    if (!Array.isArray(results)) throw new Error('Expected an array of lint results');\n  } catch (err) {\n    console.error(`❌ Failed to read or parse ${lintFile}:`, err);\n    process.exit(1);\n  }\n\n  type Message = {\n    line: number;\n    column: number;\n    message: string;\n    ruleId: string | null;\n    severity: 'error' | 'warning';\n  };\n\n  type LintEntry = {\n    file: string;\n    errors: number;\n    warnings: number;\n    total: number;\n    messages: Message[];\n  };\n\n  function getTopFolder(filePath: string) {\n    const parts = filePath.split('/');\n    const idx = parts.findIndex((p) => p === 'quicksites-v2');\n    return parts[idx + 1] || 'root';\n  }\n\n  const filtered: LintEntry[] = results\n    .filter(\n      (entry: any) =>\n        entry.filePath.includes('/quicksites-v2/') &&\n        !entry.filePath.includes('/.venv/') &&\n        !entry.filePath.includes('/node_modules/')\n    )\n    .map((entry: any) => ({\n      file: entry.filePath,\n      errors: entry.errorCount,\n      warnings: entry.warningCount,\n      total: entry.errorCount + entry.warningCount,\n      messages: entry.messages.map((m: any) => ({\n        line: m.line,\n        column: m.column,\n        message: m.message,\n        ruleId: m.ruleId,\n        severity: m.severity === 2 ? 'error' : 'warning',\n      })),\n    }))\n    .filter((entry: LintEntry) => entry.total > 0);\n\n  const grouped = new Map<string, LintEntry[]>();\n  for (const entry of filtered) {\n    const folder = getTopFolder(entry.file);\n    if (!grouped.has(folder)) grouped.set(folder, []);\n    grouped.get(folder)!.push(entry);\n  }\n\n  for (const entries of grouped.values()) {\n    entries.sort((a, b) => {\n      if (a.errors > 0 && b.errors === 0) return -1;\n      if (a.errors === 0 && b.errors > 0) return 1;\n      return b.total - a.total;\n    });\n  }\n\n  // Write .txt summary\n  const txtLines: string[] = [];\n  txtLines.push(`Found ${filtered.length} files with issues:\\n`);\n  for (const [folder, entries] of [...grouped.entries()].sort()) {\n    txtLines.push(`${folder}/`);\n    for (const entry of entries) {\n      txtLines.push(\n        `  ${entry.total} issues (${entry.errors} errors, ${entry.warnings} warnings): ${entry.file}`\n      );\n    }\n    txtLines.push('');\n  }\n  console.log('📄 Writing lint-summary.txt...');\n  writeFileSync(txtOut, txtLines.join('\\n'));\n\n  // Write .md summary\n  const mdLines: string[] = [];\n  mdLines.push(`# ESLint Report`);\n  mdLines.push(`Found **${filtered.length}** files with issues.\\n`);\n  for (const [folder, entries] of [...grouped.entries()].sort()) {\n    mdLines.push(`## 📁 \\`${folder}/\\``);\n    for (const entry of entries) {\n      mdLines.push(`### 🔹 \\`${entry.file}\\``);\n      mdLines.push(\n        `- **${entry.total} issues**: ${entry.errors} error(s), ${entry.warnings} warning(s)\\n`\n      );\n      for (const m of entry.messages) {\n        mdLines.push(\n          `  - [${m.severity}] Line ${m.line}:${m.column} – ${m.message} (${m.ruleId || 'unknown'})`\n        );\n      }\n      mdLines.push('');\n    }\n  }\n  console.log('📄 Writing lint-summary.md...');\n  writeFileSync(mdOut, mdLines.join('\\n'));\n\n  // Final check: confirm both outputs exist\n  if (!existsSync(txtOut) || !existsSync(mdOut)) {\n    console.error('❌ Failed to write summary files.');\n    process.exit(1);\n  }\n\n  console.log(`✅ Summary complete — ${grouped.size} folders, ${filtered.length} files`);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/lint-summary-markdown.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'folder' is assigned a value but never used.","line":60,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readFileSync, writeFileSync } from 'fs';\nimport path from 'node:path';\n\nconst raw = readFileSync('lint-report.json', 'utf-8');\nconst results = JSON.parse(raw);\n\ntype Message = {\n  line: number;\n  column: number;\n  message: string;\n  ruleId: string | null;\n  severity: 'error' | 'warning';\n};\n\ntype LintEntry = {\n  file: string;\n  errors: number;\n  warnings: number;\n  total: number;\n  messages: Message[];\n};\n\nfunction getTopFolder(filePath: string) {\n  const parts = filePath.split('/');\n  const idx = parts.findIndex((p) => p === 'quicksites-v2');\n  return parts[idx + 1] || 'root';\n}\n\nconst filtered: LintEntry[] = results\n  .filter(\n    (entry: any) =>\n      entry.filePath.includes('/quicksites-v2/') &&\n      !entry.filePath.includes('/.venv/') &&\n      !entry.filePath.includes('/node_modules/')\n  )\n  .map((entry: any) => ({\n    file: entry.filePath,\n    errors: entry.errorCount,\n    warnings: entry.warningCount,\n    total: entry.errorCount + entry.warningCount,\n    messages: entry.messages.map((m: any) => ({\n      line: m.line,\n      column: m.column,\n      message: m.message,\n      ruleId: m.ruleId,\n      severity: m.severity === 2 ? 'error' : 'warning',\n    })),\n  }))\n  .filter((entry: LintEntry) => entry.total > 0);\n\nconst grouped = new Map<string, LintEntry[]>();\n\nfor (const entry of filtered) {\n  const folder = getTopFolder(entry.file);\n  if (!grouped.has(folder)) grouped.set(folder, []);\n  grouped.get(folder)!.push(entry);\n}\n\n// Sort entries in each folder: errors first, then by total issues desc\nfor (const [folder, entries] of grouped.entries()) {\n  entries.sort((a, b) => {\n    if (a.errors > 0 && b.errors === 0) return -1;\n    if (a.errors === 0 && b.errors > 0) return 1;\n    return b.total - a.total;\n  });\n}\n\nconst lines: string[] = [];\n\nlines.push(`# ESLint Report`);\nlines.push(`Found **${filtered.length}** files with issues.\\n`);\n\nfor (const [folder, entries] of [...grouped.entries()].sort()) {\n  lines.push(`## 📁 \\`${folder}/\\``);\n  for (const entry of entries) {\n    lines.push(`### 🔹 \\`${entry.file}\\``);\n    lines.push(\n      `- **${entry.total} issues**: ${entry.errors} error(s), ${entry.warnings} warning(s)\\n`\n    );\n    for (const m of entry.messages) {\n      lines.push(\n        `  - [${m.severity}] Line ${m.line}:${m.column} – ${m.message} (${m.ruleId || 'unknown'})`\n      );\n    }\n    lines.push('');\n  }\n}\n\nwriteFileSync('lint-summary.md', lines.join('\\n'));\nconsole.log('✅ Markdown report written to lint-summary.md');\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/lint-summary.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'folder' is assigned a value but never used.","line":44,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readFileSync, writeFileSync } from 'fs';\nimport path from 'node:path';\n\nconst raw = readFileSync('lint-report.json', 'utf-8');\nconst results = JSON.parse(raw);\n\ntype LintEntry = {\n  file: string;\n  errors: number;\n  warnings: number;\n  total: number;\n};\n\nfunction getTopFolder(filePath: string) {\n  const parts = filePath.split('/');\n  const idx = parts.findIndex((p) => p === 'quicksites-v2');\n  return parts[idx + 1] || 'root';\n}\n\nconst filtered: LintEntry[] = results\n  .filter(\n    (entry: any) =>\n      entry.filePath.includes('/quicksites-v2/') &&\n      !entry.filePath.includes('/.venv/') &&\n      !entry.filePath.includes('/node_modules/')\n  )\n  .map((entry: any) => ({\n    file: entry.filePath,\n    errors: entry.errorCount,\n    warnings: entry.warningCount,\n    total: entry.errorCount + entry.warningCount,\n  }))\n  .filter((entry: LintEntry) => entry.total > 0);\n\nconst grouped = new Map<string, LintEntry[]>();\n\nfor (const entry of filtered) {\n  const folder = getTopFolder(entry.file);\n  if (!grouped.has(folder)) grouped.set(folder, []);\n  grouped.get(folder)!.push(entry);\n}\n\n// Sort each group: files with errors first, then by total issues desc\nfor (const [folder, entries] of grouped.entries()) {\n  entries.sort((a, b) => {\n    if (a.errors > 0 && b.errors === 0) return -1;\n    if (a.errors === 0 && b.errors > 0) return 1;\n    return b.total - a.total;\n  });\n}\n\nconst output: string[] = [];\n\noutput.push(`Found ${filtered.length} files with issues:\\n`);\n\nfor (const [folder, entries] of [...grouped.entries()].sort()) {\n  output.push(`📁 ${folder}/`);\n  for (const entry of entries) {\n    output.push(\n      `  ${entry.total} issues (${entry.errors} errors, ${entry.warnings} warnings): ${entry.file}`\n    );\n  }\n  output.push(''); // blank line between folders\n}\n\nwriteFileSync('lint-summary.txt', output.join('\\n'));\nconsole.log('✅ Summary written to lint-summary.txt');\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/load-query-usecases.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/migrate-remaining-api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/modernize-api-files.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isMiddleware' is assigned a value but never used.","line":25,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isRoute' is assigned a value but never used.","line":26,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport path from 'node:path';\n\nconst PROJECT_ROOT = process.cwd();\nconst TARGET_EXT = ['.ts'];\nconst SEARCH_DIRS = ['app/api', 'app', 'pages', 'admin'];\n\nconst args = process.argv.slice(2);\nconst makeBackup = args.includes('--backup');\n\nfunction walk(dir: string): string[] {\n  if (!fs.existsSync(dir)) return [];\n  const entries = fs.readdirSync(dir, { withFileTypes: true });\n  return entries.flatMap((entry) => {\n    const full = path.join(dir, entry.name);\n    return entry.isDirectory() ? walk(full) : [full];\n  });\n}\n\nfunction cleanFile(filePath: string) {\n  let content = fs.readFileSync(filePath, 'utf-8');\n  const original = content;\n  let changed = false;\n\n  const isMiddleware = filePath.endsWith('middleware.ts');\n  const isRoute = filePath.endsWith('route.ts');\n\n  // Remove next/server imports\n  content = content.replace(\n    /import\\s+{[^}]*Next(Request|Response)[^}]*}\\s+from\\s+['\"]next\\/server['\"];\\s*/g,\n    () => {\n      changed = true;\n      return '';\n    }\n  );\n\n  // Fix req.json() to await req.json()\n  content = content.replace(/([^a-zA-Z0-9_])req\\.json\\s*\\(\\s*\\)/g, (match, prefix) => {\n    if (match.includes('await')) return match;\n    changed = true;\n    return `${prefix}await req.json()`;\n  });\n\n  // Fix route signatures (GET, POST, etc.)\n  content = content.replace(\n    /export\\s+async\\s+function\\s+(GET|POST|PUT|PATCH|DELETE)\\s*\\(\\s*req\\s*\\)/g,\n    (_match, method) => {\n      changed = true;\n      return `export async function ${method}(req: Request): Promise<Response>`;\n    }\n  );\n\n  // Fix middleware signature\n  content = content.replace(/export\\s+function\\s+middleware\\s*\\(\\s*req\\s*\\)/g, () => {\n    changed = true;\n    return `export function middleware(req: Request): Response`;\n  });\n\n  // Fix NextResponse.json\n  content = content.replace(/NextResponse\\.json\\s*\\(/g, () => {\n    changed = true;\n    return 'json(';\n  });\n\n  // Fix NextResponse.next() → new Response()\n  content = content.replace(/NextResponse\\.next\\s*\\(\\s*\\)/g, () => {\n    changed = true;\n    return 'new Response()';\n  });\n\n  // Add runtime = edge if missing\n  if (!/export\\s+const\\s+runtime\\s*=/.test(content)) {\n    content = `export const runtime = 'experimental-edge';\\n\\n` + content;\n    changed = true;\n  }\n\n  // Add import { json } if needed\n  if (changed && !content.includes(\"from '@/lib/api/json'\")) {\n    content = content.replace(\n      /(^|\\n)(import .+?;)+/s,\n      `$&\\nimport { json } from '@/lib/api/json';`\n    );\n  }\n\n  if (changed && content !== original) {\n    if (makeBackup) {\n      fs.writeFileSync(filePath + '.bak', original, 'utf8');\n    }\n    fs.writeFileSync(filePath, content, 'utf8');\n    console.log(`✅ Modernized: ${filePath}`);\n  }\n}\n\nconst allFiles = SEARCH_DIRS.flatMap((dir) =>\n  walk(path.join(PROJECT_ROOT, dir)).filter(\n    (file) =>\n      TARGET_EXT.includes(path.extname(file)) &&\n      (file.endsWith('route.ts') || file.endsWith('middleware.ts'))\n  )\n);\n\nif (allFiles.length === 0) {\n  console.log('⚠️  No matching files found.');\n  process.exit(0);\n}\n\nconsole.log(`🔧 Modernizing ${allFiles.length} file(s)...\\n`);\nallFiles.forEach(cleanFile);\nconsole.log('\\n🏁 Done.');\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/modernize-api-json.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'code' is defined but never used. Allowed unused args must match /^_/u.","line":41,"column":81,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":85}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport path from 'node:path';\n\nconst PROJECT_ROOT = process.cwd();\nconst TARGET_EXT = ['.ts', '.tsx'];\nconst SEARCH_DIRS = ['app', 'pages', 'admin', 'src'];\n\nconst args = process.argv.slice(2);\nconst isPreview = args.includes('--preview');\nconst isBackup = args.includes('--backup');\n\nfunction walk(dir: string): string[] {\n  const entries = fs.readdirSync(dir, { withFileTypes: true });\n  return entries.flatMap((entry) => {\n    const full = path.join(dir, entry.name);\n    return entry.isDirectory() ? walk(full) : [full];\n  });\n}\n\nfunction replaceInFile(filePath: string) {\n  let content = fs.readFileSync(filePath, 'utf-8');\n  const original = content;\n  let changed = false;\n\n  // Remove NextResponse import\n  content = content.replace(\n    /import\\s+{[^}]*NextResponse[^}]*}\\s+from\\s+['\"]next\\/server['\"];/g,\n    () => {\n      changed = true;\n      return '';\n    }\n  );\n\n  // Replace NextResponse.json(...) → json(...)\n  content = content.replace(/NextResponse\\.json\\s*\\(/g, () => {\n    changed = true;\n    return 'json(';\n  });\n\n  // Replace res.status(###).json(...) → json(..., ###)\n  content = content.replace(/res\\.status\\s*\\(\\s*(\\d{3})\\s*\\)\\.json\\s*\\(/g, (_m, code) => {\n    changed = true;\n    return `json(`; // Could inline status later\n  });\n\n  // Replace res.json(...) → json(...)\n  content = content.replace(/res\\.json\\s*\\(/g, () => {\n    changed = true;\n    return 'json(';\n  });\n\n  // Ensure req.json() → await req.json()\n  content = content.replace(/([^a-zA-Z0-9_])req\\.json\\s*\\(\\s*\\)/g, (match, prefix) => {\n    if (match.includes('await')) return match;\n    changed = true;\n    return `${prefix}await req.json()`;\n  });\n\n  // Add json import if needed\n  if (changed && !content.includes(\"from '@/lib/api/json'\")) {\n    content = content.replace(\n      /(^|\\n)(import .+?;)+/s,\n      `$&\\nimport { json } from '@/lib/api/json';`\n    );\n  }\n\n  if (changed && content !== original) {\n    if (isPreview) {\n      console.log(`🔍 [PREVIEW] Would update: ${filePath}`);\n    } else {\n      if (isBackup) {\n        fs.writeFileSync(filePath + '.bak', original, 'utf-8');\n      }\n      fs.writeFileSync(filePath, content, 'utf-8');\n      console.log(`✅ Updated: ${filePath}`);\n    }\n  }\n}\n\nlet updatedCount = 0;\nfor (const dir of SEARCH_DIRS) {\n  const fullDir = path.join(PROJECT_ROOT, dir);\n  if (!fs.existsSync(fullDir)) continue;\n\n  const files = walk(fullDir).filter((f) => TARGET_EXT.includes(path.extname(f)));\n\n  for (const file of files) {\n    const before = fs.readFileSync(file, 'utf-8');\n    replaceInFile(file);\n    const after = fs.readFileSync(file, 'utf-8');\n    if (before !== after) updatedCount++;\n  }\n}\n\nconsole.log(`\\n🏁 Done. ${isPreview ? 'Would update' : 'Updated'} ${updatedCount} file(s).`);\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/monitor-campaigns.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/notify-webhooks.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport path from 'node:path';\nimport fetch from 'node-fetch';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nconst logPath = './reports/activity.log';\nconst contents = fs.readFileSync(logPath, 'utf-8').trim().split('\\n');\nconst lastLine = contents.at(-1) || '';\n\nif (!lastLine.includes('Exported')) {\n  console.log('No export event found, skipping webhook');\n  process.exit(0);\n}\n\nconst { data, error } = await supabase.from('report_webhooks').select('*').eq('enabled', true);\n\nif (error) {\n  console.error('Error fetching webhooks', error);\n  process.exit(1);\n}\n\nfor (const hook of data) {\n  try {\n    await fetch(hook.url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...(hook.secret_token && {\n          Authorization: `Bearer ${hook.secret_token}`,\n        }),\n      },\n      body: JSON.stringify({\n        event: 'export.success',\n        summary: lastLine,\n        timestamp: new Date().toISOString(),\n      }),\n    });\n    console.log(`📤 Notified ${hook.url}`);\n  } catch (e: any) {\n    console.error(`❌ Failed to notify ${hook.url}:`, e instanceof Error ? e.message : String(e));\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/process-regeneration-queue.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":11,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import 'dotenv/config';\nimport { execSync } from 'child_process';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nasync function run() {\n  const { data: job, error } = await supabase\n    .from('regeneration_queue')\n    .select('*')\n    .eq('status', 'queued')\n    .order('created_at', { ascending: true })\n    .limit(1)\n    .maybeSingle();\n\n  if (!job) {\n    console.log('✅ No queued jobs.');\n    return;\n  }\n\n  console.log('🔄 Running job for:', job.domain);\n  await supabase\n    .from('regeneration_queue')\n    .update({ status: 'processing', started_at: new Date().toISOString() })\n    .eq('id', job.id);\n\n  try {\n    const cmd = `node ../init.js \"${job.city}\" \"${job.state}\" \"${job.template_id}\" --push-to-github`;\n    const output = execSync(cmd, { encoding: 'utf-8' });\n\n    await supabase\n      .from('regeneration_queue')\n      .update({\n        status: 'done',\n        finished_at: new Date().toISOString(),\n        log: output,\n      })\n      .eq('id', job.id);\n\n    await supabase.from('user_action_logs').insert([\n      {\n        domain_id: job.domain_id,\n        action_type: 'regeneration_complete',\n        triggered_by: job.triggered_by || 'queue_bot',\n      },\n    ]);\n\n    console.log('✅ Job complete.');\n  } catch (err: any) {\n    console.error('❌ Job failed:', err.message);\n\n    await supabase\n      .from('regeneration_queue')\n      .update({\n        status: 'error',\n        finished_at: new Date().toISOString(),\n        log: err.message,\n      })\n      .eq('id', job.id);\n  }\n}\n\nrun();\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/query-inspector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/remove-next-imports-from-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/rename-components-to-kebab.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/rename-ui-to-kebab.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/replace-component-imports-to-kebab.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'COMPONENT_ALIAS' is assigned a value but never used.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport path from 'node:path';\n\nconst PROJECT_ROOT = path.resolve('.');\nconst FILE_EXTS = ['.ts', '.tsx', '.js', '.jsx'];\nconst COMPONENT_ALIAS = '@/components/';\n\nfunction toKebabCase(input: string): string {\n  return input\n    .replace(/([a-z0-9])([A-Z])/g, '$1-$2')\n    .replace(/([A-Z]+)([A-Z][a-z])/g, '$1-$2')\n    .toLowerCase();\n}\n\nfunction walk(dir: string, files: string[] = []) {\n  for (const entry of fs.readdirSync(dir)) {\n    const fullPath = path.join(dir, entry);\n    const stat = fs.statSync(fullPath);\n    if (stat.isDirectory()) {\n      walk(fullPath, files);\n    } else if (FILE_EXTS.includes(path.extname(fullPath))) {\n      files.push(fullPath);\n    }\n  }\n  return files;\n}\n\nfunction updateImportsToKebabCase() {\n  const files = walk(PROJECT_ROOT);\n  let updated = 0;\n\n  for (const file of files) {\n    let code = fs.readFileSync(file, 'utf-8');\n    const original = code;\n\n    // Replace '@/components/some-component' → '@/components/some-component'\n    code = code.replace(\n      /(['\"])@\\/components\\/((?:[A-Za-z0-9]+\\/)*)([A-Z][A-Za-z0-9]*)\\1/g,\n      (_, quote, pathPart, filePart) => {\n        return `${quote}@/components/${pathPart}${toKebabCase(filePart)}${quote}`;\n      }\n    );\n\n    if (code !== original) {\n      fs.writeFileSync(file, code, 'utf-8');\n      console.log(`📝 Updated imports in: ${path.relative(PROJECT_ROOT, file)}`);\n      updated++;\n    }\n  }\n\n  console.log(`\\n✅ Done. Updated ${updated} file(s).`);\n}\n\nupdateImportsToKebabCase();\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/replace-nextresponse-json.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/replace-ui-imports-to-kebab.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TARGET_IMPORT_PREFIX' is assigned a value but never used.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport path from 'node:path';\n\nconst PROJECT_ROOT = path.resolve('.');\nconst FILE_EXTS = ['.ts', '.tsx', '.js', '.jsx'];\nconst TARGET_IMPORT_PREFIX = '@/components/ui/';\n\nfunction isCodeFile(file: string) {\n  return FILE_EXTS.includes(path.extname(file));\n}\n\nfunction toKebabCase(str: string) {\n  return str\n    .replace(/([a-z0-9])([A-Z])/g, '$1-$2')\n    .replace(/([A-Z]+)([A-Z][a-z])/g, '$1-$2')\n    .toLowerCase();\n}\n\nfunction walk(dir: string, allFiles: string[] = []) {\n  const files = fs.readdirSync(dir);\n  for (const file of files) {\n    const fullPath = path.join(dir, file);\n    const stat = fs.statSync(fullPath);\n    if (stat.isDirectory()) {\n      walk(fullPath, allFiles);\n    } else if (isCodeFile(fullPath)) {\n      allFiles.push(fullPath);\n    }\n  }\n  return allFiles;\n}\n\nfunction updateImports() {\n  const files = walk(PROJECT_ROOT);\n  let count = 0;\n\n  for (const file of files) {\n    let content = fs.readFileSync(file, 'utf-8');\n    const original = content;\n\n    content = content.replace(\n      /from\\s+['\"]@\\/components\\/ui\\/([A-Z][A-Za-z0-9]+)(\\.tsx)?['\"]/g,\n      (_, compName) => {\n        const kebab = toKebabCase(compName);\n        count++;\n        return `from '@/components/ui/${kebab}'`;\n      }\n    );\n\n    if (content !== original) {\n      fs.writeFileSync(file, content, 'utf-8');\n      console.log(`✅ Updated imports in: ${file}`);\n    }\n  }\n\n  console.log(`\\n🔁 Rewrote ${count} imports to kebab-case.`);\n}\n\nupdateImports();\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/run-lint-report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/scan-next-in-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/second-chance-offers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/seedSampleTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/sign-report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/slack-alert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/templateLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/test-routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/trigger-campaign-starts.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":10,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import 'dotenv/config';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n);\n\nasync function run() {\n  const { data: campaigns, error } = await supabase\n    .from('campaigns')\n    .select('*')\n    .eq('status', 'upcoming')\n    .lte('starts_at', new Date().toISOString());\n\n  for (const campaign of campaigns || []) {\n    console.log(`🚦 Starting campaign: ${campaign.name}`);\n\n    await supabase.from('campaigns').update({ status: 'active' }).eq('id', campaign.id);\n\n    const { data: leads } = await supabase\n      .from('leads')\n      .select('*')\n      .in('id', campaign.lead_ids || []);\n\n    for (const lead of leads || []) {\n      await fetch(`${process.env.NEXT_PUBLIC_SITE_URL}/api/leads/send-claim`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ lead }),\n      });\n\n      await supabase.from('user_action_logs').insert([\n        {\n          lead_id: lead.id,\n          domain_id: lead.domain_id,\n          action_type: 'campaign_kickoff',\n          triggered_by: 'campaign_bot',\n        },\n      ]);\n    }\n  }\n}\n\nrun();\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/upload-diffs-markdown.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/upload-diffs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/upload-screenshot.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/upload-sitemaps.timestamped.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/upload-sitemaps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/visualize-routes.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fileToRoute' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import glob from 'glob';\nimport path from 'node:path';\n\nconst pagesDir = path.join(process.cwd(), 'pages');\n\nconst files = glob.sync('**/*.tsx', {\n  cwd: pagesDir,\n  nodir: true,\n  ignore: ['_*.tsx', 'api/**', '404.tsx'],\n});\n\nfunction fileToRoute(file: string) {\n  const route = file\n    .replace(/\\/index\\.tsx$/, '/')\n    .replace(/\\.tsx$/, '')\n    .replace(/^index$/, '')\n    .replace(/\\/g/, '/');\n  return '/' + route;\n  console.log('='.repeat(40));\n  files\n    .map(fileToRoute)\n    .sort()\n    .forEach((route) => {\n      const indent = '  '.repeat(route.split('/').length - 2);\n      console.log(indent + '• ' + route);\n    });\n  console.log('='.repeat(40));\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/workers/screenshot-worker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/workers/worker.block-qr.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'archiver' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'label' is assigned a value but never used.","line":10,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is assigned a value but never used.","line":10,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🧵 Worker-friendly version of the /block-qr route\nimport { createCanvas } from 'canvas';\nimport QRCode from 'qrcode';\nimport fs from 'node:fs/promises';\nimport archiver from 'archiver';\nimport { parentPort, workerData } from 'worker_threads';\n\n// Simulate payload and QR logic here for off-main-thread execution.\nasync function run() {\n  const { blockId, handle, label, ...options } = workerData;\n  // You would re-import and reuse helpers here\n  const url = `https://quicksites.ai/world/${handle}#block-${blockId}`;\n  const canvas = createCanvas(512, 512);\n  await QRCode.toCanvas(canvas, url);\n  const buffer = canvas.toBuffer();\n  await fs.writeFile(`./output/${handle}-${blockId}.png`, buffer);\n  parentPort?.postMessage({ ok: true });\n}\nrun().catch((err) => parentPort?.postMessage({ error: err.message }));\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/write-hash-ledger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/scripts/zip-pruned.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/styles/tokens.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/tailwind.config.ts","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Replace `⏎····'./app/**/*.{ts,tsx}',⏎····'./components/**/*.{ts,tsx}',⏎····'./pages/**/*.{ts,tsx}',⏎··` with `'./app/**/*.{ts,tsx}',·'./components/**/*.{ts,tsx}',·'./pages/**/*.{ts,tsx}'`","line":5,"column":13,"nodeType":null,"messageId":"replace","endLine":9,"endColumn":3,"fix":{"range":[103,196],"text":"'./app/**/*.{ts,tsx}', './components/**/*.{ts,tsx}', './pages/**/*.{ts,tsx}'"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// tailwind.config.ts\nimport type { Config } from 'tailwindcss';\n\nconst config: Config = {\n  content: [\n    './app/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './pages/**/*.{ts,tsx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--foreground))',\n        },\n\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n\n        sidebar: {\n          DEFAULT: 'hsl(var(--sidebar))',\n          foreground: 'hsl(var(--sidebar-foreground))',\n          primary: 'hsl(var(--sidebar-primary))',\n          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n          accent: 'hsl(var(--sidebar-accent))',\n          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n          border: 'hsl(var(--sidebar-border))',\n          ring: 'hsl(var(--sidebar-ring))',\n        },\n\n        chart: {\n          1: 'hsl(var(--chart-1))',\n          2: 'hsl(var(--chart-2))',\n          3: 'hsl(var(--chart-3))',\n          4: 'hsl(var(--chart-4))',\n          5: 'hsl(var(--chart-5))',\n        },\n      },\n\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n};\n\nexport default config;\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/test/jest.setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/tests/branding-test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/tests/dashboard-to-editor.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/tests/mocks/mocks/mockSmartLinks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/tests/ogSnapshot.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/tests/redirects.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/tests/snapshot.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/tests/template-editor.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/tests/visual-regression.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/tools/cli/generate-site.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/SmartLinkItem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/UserContextTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/block.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/blocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/campaign.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/domain.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/html2pdf.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/json.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/jsondiffpatch-html.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/lead.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/next-seo-config.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/params.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/site.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/supabase.ts","messages":[{"ruleId":"prettier/prettier","severity":1,"message":"Delete `··`","line":829,"column":37,"nodeType":null,"messageId":"delete","endLine":829,"endColumn":39,"fix":{"range":[23156,23158],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `···`","line":830,"column":36,"nodeType":null,"messageId":"delete","endLine":830,"endColumn":39,"fix":{"range":[23220,23223],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `·`","line":831,"column":37,"nodeType":null,"messageId":"delete","endLine":831,"endColumn":38,"fix":{"range":[23286,23287],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `·`","line":832,"column":37,"nodeType":null,"messageId":"delete","endLine":832,"endColumn":38,"fix":{"range":[23371,23372],"text":""}},{"ruleId":"prettier/prettier","severity":1,"message":"Delete `·················`","line":847,"column":9,"nodeType":null,"messageId":"delete","endLine":847,"endColumn":26,"fix":{"range":[23787,23804],"text":""}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[];\n\nexport type Database = {\n  graphql_public: {\n    Tables: {\n      [_ in never]: never;\n    };\n    Views: {\n      [_ in never]: never;\n    };\n    Functions: {\n      graphql: {\n        Args: {\n          operationName?: string;\n          query?: string;\n          variables?: Json;\n          extensions?: Json;\n        };\n        Returns: Json;\n      };\n    };\n    Enums: {\n      [_ in never]: never;\n    };\n    CompositeTypes: {\n      [_ in never]: never;\n    };\n  };\n  public: {\n    Tables: {\n      block_checkins: {\n        Row: {\n          block_id: string | null;\n          checked_at: string | null;\n          id: string;\n          user_id: string | null;\n        };\n        Insert: {\n          block_id?: string | null;\n          checked_at?: string | null;\n          id?: string;\n          user_id?: string | null;\n        };\n        Update: {\n          block_id?: string | null;\n          checked_at?: string | null;\n          id?: string;\n          user_id?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'block_checkins_block_id_fkey';\n            columns: ['block_id'];\n            isOneToOne: false;\n            referencedRelation: 'blocks';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      block_feedback: {\n        Row: {\n          action: string | null;\n          block_id: string | null;\n          created_at: string | null;\n          id: string;\n          message: string | null;\n          user_id: string | null;\n        };\n        Insert: {\n          action?: string | null;\n          block_id?: string | null;\n          created_at?: string | null;\n          id?: string;\n          message?: string | null;\n          user_id?: string | null;\n        };\n        Update: {\n          action?: string | null;\n          block_id?: string | null;\n          created_at?: string | null;\n          id?: string;\n          message?: string | null;\n          user_id?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'block_feedback_block_id_fkey';\n            columns: ['block_id'];\n            isOneToOne: false;\n            referencedRelation: 'blocks';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      blocks: {\n        Row: {\n          actions: Json | null;\n          created_at: string | null;\n          emoji: string | null;\n          id: string;\n          image_url: string | null;\n          lat: number | null;\n          lon: number | null;\n          message: string | null;\n          owner_id: string;\n          room: string | null;\n          slug: string;\n          title: string | null;\n          type: string | null;\n          visibility: string | null;\n        };\n        Insert: {\n          actions?: Json | null;\n          created_at?: string | null;\n          emoji?: string | null;\n          id?: string;\n          image_url?: string | null;\n          lat?: number | null;\n          lon?: number | null;\n          message?: string | null;\n          owner_id: string;\n          room?: string | null;\n          slug: string;\n          title?: string | null;\n          type?: string | null;\n          visibility?: string | null;\n        };\n        Update: {\n          actions?: Json | null;\n          created_at?: string | null;\n          emoji?: string | null;\n          id?: string;\n          image_url?: string | null;\n          lat?: number | null;\n          lon?: number | null;\n          message?: string | null;\n          owner_id?: string;\n          room?: string | null;\n          slug?: string;\n          title?: string | null;\n          type?: string | null;\n          visibility?: string | null;\n        };\n        Relationships: [];\n      };\n      branding_logs: {\n        Row: {\n          created_at: string | null;\n          details: string | null;\n          event: string | null;\n          id: string;\n          profile_id: string | null;\n          user_id: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          details?: string | null;\n          event?: string | null;\n          id?: string;\n          profile_id?: string | null;\n          user_id?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          details?: string | null;\n          event?: string | null;\n          id?: string;\n          profile_id?: string | null;\n          user_id?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'branding_logs_profile_id_fkey';\n            columns: ['profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'branding_logs_profile_id_fkey';\n            columns: ['profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles_with_email';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      branding_profiles: {\n        Row: {\n          accent_color: string | null;\n          access_token: string | null;\n          brand: string | null;\n          created_at: string | null;\n          id: string;\n          industry: string | null;\n          is_public: boolean | null;\n          is_shared: boolean | null;\n          layout: string | null;\n          logo_url: string | null;\n          name: string;\n          owner_id: string | null;\n          password: string | null;\n          theme: string | null;\n        };\n        Insert: {\n          accent_color?: string | null;\n          access_token?: string | null;\n          brand?: string | null;\n          created_at?: string | null;\n          id?: string;\n          industry?: string | null;\n          is_public?: boolean | null;\n          is_shared?: boolean | null;\n          layout?: string | null;\n          logo_url?: string | null;\n          name: string;\n          owner_id?: string | null;\n          password?: string | null;\n          theme?: string | null;\n        };\n        Update: {\n          accent_color?: string | null;\n          access_token?: string | null;\n          brand?: string | null;\n          created_at?: string | null;\n          id?: string;\n          industry?: string | null;\n          is_public?: boolean | null;\n          is_shared?: boolean | null;\n          layout?: string | null;\n          logo_url?: string | null;\n          name?: string;\n          owner_id?: string | null;\n          password?: string | null;\n          theme?: string | null;\n        };\n        Relationships: [];\n      };\n      campaigns: {\n        Row: {\n          alt_domains: string[] | null;\n          city: string | null;\n          created_at: string | null;\n          created_by: string | null;\n          domain_ids: string[] | null;\n          ends_at: string | null;\n          id: string;\n          lead_ids: string[] | null;\n          name: string;\n          owner_id: string | null;\n          starts_at: string | null;\n          state: string | null;\n          status: string | null;\n        };\n        Insert: {\n          alt_domains?: string[] | null;\n          city?: string | null;\n          created_at?: string | null;\n          created_by?: string | null;\n          domain_ids?: string[] | null;\n          ends_at?: string | null;\n          id?: string;\n          lead_ids?: string[] | null;\n          name: string;\n          owner_id?: string | null;\n          starts_at?: string | null;\n          state?: string | null;\n          status?: string | null;\n        };\n        Update: {\n          alt_domains?: string[] | null;\n          city?: string | null;\n          created_at?: string | null;\n          created_by?: string | null;\n          domain_ids?: string[] | null;\n          ends_at?: string | null;\n          id?: string;\n          lead_ids?: string[] | null;\n          name?: string;\n          owner_id?: string | null;\n          starts_at?: string | null;\n          state?: string | null;\n          status?: string | null;\n        };\n        Relationships: [];\n      };\n      claimed_handles: {\n        Row: {\n          claimed_at: string | null;\n          handle: string;\n          user_id: string;\n        };\n        Insert: {\n          claimed_at?: string | null;\n          handle: string;\n          user_id: string;\n        };\n        Update: {\n          claimed_at?: string | null;\n          handle?: string;\n          user_id?: string;\n        };\n        Relationships: [];\n      };\n      click_events: {\n        Row: {\n          action: string;\n          block_id: string;\n          handle: string | null;\n          id: string;\n          ip_address: string | null;\n          metadata: Json | null;\n          timestamp: string | null;\n        };\n        Insert: {\n          action: string;\n          block_id: string;\n          handle?: string | null;\n          id?: string;\n          ip_address?: string | null;\n          metadata?: Json | null;\n          timestamp?: string | null;\n        };\n        Update: {\n          action?: string;\n          block_id?: string;\n          handle?: string | null;\n          id?: string;\n          ip_address?: string | null;\n          metadata?: Json | null;\n          timestamp?: string | null;\n        };\n        Relationships: [];\n      };\n      comments: {\n        Row: {\n          author_email: string | null;\n          created_at: string | null;\n          id: string;\n          message: string | null;\n          snapshot_id: string | null;\n        };\n        Insert: {\n          author_email?: string | null;\n          created_at?: string | null;\n          id?: string;\n          message?: string | null;\n          snapshot_id?: string | null;\n        };\n        Update: {\n          author_email?: string | null;\n          created_at?: string | null;\n          id?: string;\n          message?: string | null;\n          snapshot_id?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'comments_snapshot_id_fkey';\n            columns: ['snapshot_id'];\n            isOneToOne: false;\n            referencedRelation: 'snapshots';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      dashboard_access_log: {\n        Row: {\n          city: string | null;\n          country: string | null;\n          email: string | null;\n          id: string;\n          ip_address: string | null;\n          region: string | null;\n          timestamp: string | null;\n          user_agent: string | null;\n          user_id: string;\n        };\n        Insert: {\n          city?: string | null;\n          country?: string | null;\n          email?: string | null;\n          id?: string;\n          ip_address?: string | null;\n          region?: string | null;\n          timestamp?: string | null;\n          user_agent?: string | null;\n          user_id: string;\n        };\n        Update: {\n          city?: string | null;\n          country?: string | null;\n          email?: string | null;\n          id?: string;\n          ip_address?: string | null;\n          region?: string | null;\n          timestamp?: string | null;\n          user_agent?: string | null;\n          user_id?: string;\n        };\n        Relationships: [];\n      };\n      dashboard_layout_templates: {\n        Row: {\n          created_at: string | null;\n          description: string | null;\n          hidden: string[] | null;\n          id: string;\n          layout: Json | null;\n          name: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          description?: string | null;\n          hidden?: string[] | null;\n          id?: string;\n          layout?: Json | null;\n          name: string;\n        };\n        Update: {\n          created_at?: string | null;\n          description?: string | null;\n          hidden?: string[] | null;\n          id?: string;\n          layout?: Json | null;\n          name?: string;\n        };\n        Relationships: [];\n      };\n      dashboard_layout_versions: {\n        Row: {\n          created_at: string | null;\n          hidden: string[] | null;\n          id: string;\n          layout: Json;\n          role: string;\n          saved_by: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          hidden?: string[] | null;\n          id?: string;\n          layout: Json;\n          role: string;\n          saved_by?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          hidden?: string[] | null;\n          id?: string;\n          layout?: Json;\n          role?: string;\n          saved_by?: string | null;\n        };\n        Relationships: [];\n      };\n      dashboard_layouts: {\n        Row: {\n          hidden: string[] | null;\n          layout: Json | null;\n          role: string;\n        };\n        Insert: {\n          hidden?: string[] | null;\n          layout?: Json | null;\n          role: string;\n        };\n        Update: {\n          hidden?: string[] | null;\n          layout?: Json | null;\n          role?: string;\n        };\n        Relationships: [];\n      };\n      dashboard_user_layouts: {\n        Row: {\n          dashboard_id: string | null;\n          name: string | null;\n          settings: Json | null;\n          template_id: string | null;\n          user_id: string;\n        };\n        Insert: {\n          dashboard_id?: string | null;\n          name?: string | null;\n          settings?: Json | null;\n          template_id?: string | null;\n          user_id: string;\n        };\n        Update: {\n          dashboard_id?: string | null;\n          name?: string | null;\n          settings?: Json | null;\n          template_id?: string | null;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'dashboard_user_layouts_template_id_fkey';\n            columns: ['template_id'];\n            isOneToOne: false;\n            referencedRelation: 'dashboard_layout_templates';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      domains: {\n        Row: {\n          city: string | null;\n          date_created: string | null;\n          domain: string | null;\n          id: string;\n          state: string | null;\n          template: string | null;\n        };\n        Insert: {\n          city?: string | null;\n          date_created?: string | null;\n          domain?: string | null;\n          id?: string;\n          state?: string | null;\n          template?: string | null;\n        };\n        Update: {\n          city?: string | null;\n          date_created?: string | null;\n          domain?: string | null;\n          id?: string;\n          state?: string | null;\n          template?: string | null;\n        };\n        Relationships: [];\n      };\n      draft_sites: {\n        Row: {\n          city: string;\n          claimed_by: string | null;\n          date_created: string | null;\n          domain: string;\n          id: string;\n          industry: string | null;\n          is_claimed: boolean | null;\n          notes: string | null;\n          state: string;\n          template_id: string | null;\n          user_id: string | null;\n        };\n        Insert: {\n          city: string;\n          claimed_by?: string | null;\n          date_created?: string | null;\n          domain: string;\n          id?: string;\n          industry?: string | null;\n          is_claimed?: boolean | null;\n          notes?: string | null;\n          state: string;\n          template_id?: string | null;\n          user_id?: string | null;\n        };\n        Update: {\n          city?: string;\n          claimed_by?: string | null;\n          date_created?: string | null;\n          domain?: string;\n          id?: string;\n          industry?: string | null;\n          is_claimed?: boolean | null;\n          notes?: string | null;\n          state?: string;\n          template_id?: string | null;\n          user_id?: string | null;\n        };\n        Relationships: [];\n      };\n      early_access_codes: {\n        Row: {\n          claimed_by: string | null;\n          code: string;\n          used: boolean | null;\n          used_at: string | null;\n        };\n        Insert: {\n          claimed_by?: string | null;\n          code: string;\n          used?: boolean | null;\n          used_at?: string | null;\n        };\n        Update: {\n          claimed_by?: string | null;\n          code?: string;\n          used?: boolean | null;\n          used_at?: string | null;\n        };\n        Relationships: [];\n      };\n      early_access_signups: {\n        Row: {\n          created_at: string | null;\n          email: string;\n          id: string;\n          invite_code: string | null;\n          name: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          email: string;\n          id?: string;\n          invite_code?: string | null;\n          name?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          email?: string;\n          id?: string;\n          invite_code?: string | null;\n          name?: string | null;\n        };\n        Relationships: [];\n      };\n      geo_cache: {\n        Row: {\n          city: string | null;\n          created_at: string | null;\n          id: string;\n          lat: number | null;\n          lon: number | null;\n          state: string | null;\n        };\n        Insert: {\n          city?: string | null;\n          created_at?: string | null;\n          id?: string;\n          lat?: number | null;\n          lon?: number | null;\n          state?: string | null;\n        };\n        Update: {\n          city?: string | null;\n          created_at?: string | null;\n          id?: string;\n          lat?: number | null;\n          lon?: number | null;\n          state?: string | null;\n        };\n        Relationships: [];\n      };\n      guest_conversions: {\n        Row: {\n          created_at: string | null;\n          guest_user_id: string;\n          id: string;\n          method: string | null;\n          new_user_id: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          guest_user_id: string;\n          id?: string;\n          method?: string | null;\n          new_user_id: string;\n        };\n        Update: {\n          created_at?: string | null;\n          guest_user_id?: string;\n          id?: string;\n          method?: string | null;\n          new_user_id?: string;\n        };\n        Relationships: [];\n      };\n      guest_token_usage: {\n        Row: {\n          action: string;\n          created_at: string | null;\n          id: string;\n          referrer: string | null;\n          user_id: string;\n        };\n        Insert: {\n          action: string;\n          created_at?: string | null;\n          id?: string;\n          referrer?: string | null;\n          user_id: string;\n        };\n        Update: {\n          action?: string;\n          created_at?: string | null;\n          id?: string;\n          referrer?: string | null;\n          user_id?: string;\n        };\n        Relationships: [];\n      };\n      guest_upgrade_events: {\n        Row: {\n          created_at: string | null;\n          event: string;\n          guest_user_id: string;\n          id: string;\n          page_url: string | null;\n          referrer: string | null;\n          trigger_reason: string | null;\n          utm_campaign: string | null;\n          utm_content: string | null;\n          utm_medium: string | null;\n          utm_source: string | null;\n          utm_term: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          event: string;\n          guest_user_id: string;\n          id?: string;\n          page_url?: string | null;\n          referrer?: string | null;\n          trigger_reason?: string | null;\n          utm_campaign?: string | null;\n          utm_content?: string | null;\n          utm_medium?: string | null;\n          utm_source?: string | null;\n          utm_term?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          event?: string;\n          guest_user_id?: string;\n          id?: string;\n          page_url?: string | null;\n          referrer?: string | null;\n          trigger_reason?: string | null;\n          utm_campaign?: string | null;\n          utm_content?: string | null;\n          utm_medium?: string | null;\n          utm_source?: string | null;\n          utm_term?: string | null;\n        };\n        Relationships: [];\n      };\n      industries: {\n        Row: {\n          id: string;\n          name: string;\n        };\n        Insert: {\n          id?: string;\n          name: string;\n        };\n        Update: {\n          id?: string;\n          name?: string;\n        };\n        Relationships: [];\n      };\n      leads: {\n        Row: {\n          address_city: string | null;\n          address_state: string | null;\n          business_name: string | null;\n          campaign_id: string | null;\n          contact_name: string | null;\n          created_at: string | null;\n          date_created: string | null;\n          domain_id: string | null;\n          email: string | null;\n          id: string;\n          industry: string | null;\n          notes: string | null;\n          outreach_status: string | null;\n          owner_id: string | null;\n          phone: string | null;\n        };\n        Insert: {\n          address_city?: string | null;\n          address_state?: string | null;\n          business_name?: string | null;\n          campaign_id?: string | null;\n          contact_name?: string | null;\n          created_at?: string | null;\n          date_created?: string | null;\n          domain_id?: string | null;\n          email?: string | null;\n          id?: string;\n          industry?: string | null;\n          notes?: string | null;\n          outreach_status?: string | null;\n          owner_id?: string | null;\n          phone?: string | null;\n        };\n        Update: {\n          address_city?: string | null;\n          address_state?: string | null;\n          business_name?: string | null;\n          campaign_id?: string | null;\n          contact_name?: string | null;\n          created_at?: string | null;\n          date_created?: string | null;\n          domain_id?: string | null;\n          email?: string | null;\n          id?: string;\n          industry?: string | null;\n          notes?: string | null;\n          outreach_status?: string | null;\n          owner_id?: string | null;\n          phone?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'leads_campaign_id_fkey';\n            columns: ['campaign_id'];\n            isOneToOne: false;\n            referencedRelation: 'campaigns';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'leads_domain_id_fkey';\n            columns: ['domain_id'];\n            isOneToOne: false;\n            referencedRelation: 'draft_sites';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      nav_preferences: {\n        Row: {\n          id: string;\n          user_id: string;\n          disabled_flags: string[];   // assuming Postgres array\n          enabled_links: string[];    // assuming Postgres array\n          created_at: string | null;  // optional, if your table includes timestamps\n          updated_at: string | null;  // optional\n        };\n        Insert: {\n          user_id: string;\n          disabled_flags?: string[];\n          enabled_links?: string[];\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          disabled_flags?: string[];\n          enabled_links?: string[];\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n      };                 \n      not_found_logs: {\n        Row: {\n          context: string;\n          id: string;\n          path: string;\n          referrer: string | null;\n          timestamp: string | null;\n          user_agent: string | null;\n        };\n        Insert: {\n          context: string;\n          id?: string;\n          path: string;\n          referrer?: string | null;\n          timestamp?: string | null;\n          user_agent?: string | null;\n        };\n        Update: {\n          context?: string;\n          id?: string;\n          path?: string;\n          referrer?: string | null;\n          timestamp?: string | null;\n          user_agent?: string | null;\n        };\n        Relationships: [];\n      };\n      param_presets: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          name: string;\n          query: string;\n          slug: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          name: string;\n          query: string;\n          slug: string;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          name?: string;\n          query?: string;\n          slug?: string;\n        };\n        Relationships: [];\n      };\n      public_profiles: {\n        Row: {\n          bio: string | null;\n          created_at: string | null;\n          emoji: string | null;\n          goal_tags: string[] | null;\n          handle: string | null;\n          updated_at: string | null;\n          user_id: string;\n          visible: boolean | null;\n        };\n        Insert: {\n          bio?: string | null;\n          created_at?: string | null;\n          emoji?: string | null;\n          goal_tags?: string[] | null;\n          handle?: string | null;\n          updated_at?: string | null;\n          user_id: string;\n          visible?: boolean | null;\n        };\n        Update: {\n          bio?: string | null;\n          created_at?: string | null;\n          emoji?: string | null;\n          goal_tags?: string[] | null;\n          handle?: string | null;\n          updated_at?: string | null;\n          user_id?: string;\n          visible?: boolean | null;\n        };\n        Relationships: [];\n      };\n      public_sites: {\n        Row: {\n          branding_profile_id: string | null;\n          created_at: string | null;\n          id: string;\n          is_public: boolean | null;\n          language: string | null;\n          owner_id: string | null;\n          published_at: string | null;\n          qr_url: string | null;\n          slug: string;\n          snapshot_id: string | null;\n          status: string | null;\n        };\n        Insert: {\n          branding_profile_id?: string | null;\n          created_at?: string | null;\n          id?: string;\n          is_public?: boolean | null;\n          language?: string | null;\n          owner_id?: string | null;\n          published_at?: string | null;\n          qr_url?: string | null;\n          slug: string;\n          snapshot_id?: string | null;\n          status?: string | null;\n        };\n        Update: {\n          branding_profile_id?: string | null;\n          created_at?: string | null;\n          id?: string;\n          is_public?: boolean | null;\n          language?: string | null;\n          owner_id?: string | null;\n          published_at?: string | null;\n          qr_url?: string | null;\n          slug?: string;\n          snapshot_id?: string | null;\n          status?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'fk_branding_profile';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'fk_branding_profile';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles_with_email';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'published_sites_branding_profile_id_fkey';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'published_sites_branding_profile_id_fkey';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles_with_email';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'published_sites_snapshot_id_fkey';\n            columns: ['snapshot_id'];\n            isOneToOne: false;\n            referencedRelation: 'snapshots';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      published_site_views: {\n        Row: {\n          id: string;\n          referrer: string | null;\n          site_id: string | null;\n          user_agent: string | null;\n          viewed_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          referrer?: string | null;\n          site_id?: string | null;\n          user_agent?: string | null;\n          viewed_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          referrer?: string | null;\n          site_id?: string | null;\n          user_agent?: string | null;\n          viewed_at?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'published_site_views_site_id_fkey';\n            columns: ['site_id'];\n            isOneToOne: false;\n            referencedRelation: 'public_sites';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      published_sites: {\n        Row: {\n          branding_profile_id: string | null;\n          domain: string;\n          id: string;\n          is_public: boolean | null;\n          published_at: string | null;\n          status: string | null;\n        };\n        Insert: {\n          branding_profile_id?: string | null;\n          domain: string;\n          id?: string;\n          is_public?: boolean | null;\n          published_at?: string | null;\n          status?: string | null;\n        };\n        Update: {\n          branding_profile_id?: string | null;\n          domain?: string;\n          id?: string;\n          is_public?: boolean | null;\n          published_at?: string | null;\n          status?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'fk_branding_profile';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'fk_branding_profile';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles_with_email';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      published_versions: {\n        Row: {\n          branding_profile_id: string | null;\n          created_at: string | null;\n          id: string;\n          primary_color: string | null;\n          secondary_color: string | null;\n          slug: string;\n          snapshot_id: string;\n        };\n        Insert: {\n          branding_profile_id?: string | null;\n          created_at?: string | null;\n          id?: string;\n          primary_color?: string | null;\n          secondary_color?: string | null;\n          slug: string;\n          snapshot_id: string;\n        };\n        Update: {\n          branding_profile_id?: string | null;\n          created_at?: string | null;\n          id?: string;\n          primary_color?: string | null;\n          secondary_color?: string | null;\n          slug?: string;\n          snapshot_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'published_versions_branding_profile_id_fkey';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'published_versions_branding_profile_id_fkey';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles_with_email';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      referral_logs: {\n        Row: {\n          campaign: string | null;\n          email: string | null;\n          id: string;\n          joined_at: string | null;\n          ref: string | null;\n          source: string | null;\n        };\n        Insert: {\n          campaign?: string | null;\n          email?: string | null;\n          id?: string;\n          joined_at?: string | null;\n          ref?: string | null;\n          source?: string | null;\n        };\n        Update: {\n          campaign?: string | null;\n          email?: string | null;\n          id?: string;\n          joined_at?: string | null;\n          ref?: string | null;\n          source?: string | null;\n        };\n        Relationships: [];\n      };\n      referral_payouts: {\n        Row: {\n          amount: number | null;\n          id: string;\n          note: string | null;\n          paid_at: string | null;\n          user_id: string | null;\n        };\n        Insert: {\n          amount?: number | null;\n          id?: string;\n          note?: string | null;\n          paid_at?: string | null;\n          user_id?: string | null;\n        };\n        Update: {\n          amount?: number | null;\n          id?: string;\n          note?: string | null;\n          paid_at?: string | null;\n          user_id?: string | null;\n        };\n        Relationships: [];\n      };\n      referrals: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          referred_email: string | null;\n          referrer_id: string;\n          reward_points: number | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          referred_email?: string | null;\n          referrer_id: string;\n          reward_points?: number | null;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          referred_email?: string | null;\n          referrer_id?: string;\n          reward_points?: number | null;\n        };\n        Relationships: [];\n      };\n      regeneration_logs: {\n        Row: {\n          city: string | null;\n          domain: string;\n          id: string;\n          state: string | null;\n          status: string | null;\n          template_id: string;\n          timestamp: string | null;\n        };\n        Insert: {\n          city?: string | null;\n          domain: string;\n          id?: string;\n          state?: string | null;\n          status?: string | null;\n          template_id: string;\n          timestamp?: string | null;\n        };\n        Update: {\n          city?: string | null;\n          domain?: string;\n          id?: string;\n          state?: string | null;\n          status?: string | null;\n          template_id?: string;\n          timestamp?: string | null;\n        };\n        Relationships: [];\n      };\n      regeneration_queue: {\n        Row: {\n          city: string;\n          created_at: string | null;\n          domain: string;\n          finished_at: string | null;\n          id: string;\n          log: string | null;\n          started_at: string | null;\n          state: string;\n          status: string | null;\n          template_id: string;\n        };\n        Insert: {\n          city: string;\n          created_at?: string | null;\n          domain: string;\n          finished_at?: string | null;\n          id?: string;\n          log?: string | null;\n          started_at?: string | null;\n          state: string;\n          status?: string | null;\n          template_id: string;\n        };\n        Update: {\n          city?: string;\n          created_at?: string | null;\n          domain?: string;\n          finished_at?: string | null;\n          id?: string;\n          log?: string | null;\n          started_at?: string | null;\n          state?: string;\n          status?: string | null;\n          template_id?: string;\n        };\n        Relationships: [];\n      };\n      remix_events: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          original_snapshot_id: string | null;\n          user_id: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          original_snapshot_id?: string | null;\n          user_id?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          original_snapshot_id?: string | null;\n          user_id?: string | null;\n        };\n        Relationships: [];\n      };\n      report_tokens: {\n        Row: {\n          expires_at: string | null;\n          file_name: string | null;\n          id: string;\n          token_hash: string | null;\n        };\n        Insert: {\n          expires_at?: string | null;\n          file_name?: string | null;\n          id?: string;\n          token_hash?: string | null;\n        };\n        Update: {\n          expires_at?: string | null;\n          file_name?: string | null;\n          id?: string;\n          token_hash?: string | null;\n        };\n        Relationships: [];\n      };\n      report_webhooks: {\n        Row: {\n          enabled: boolean | null;\n          event: string;\n          id: string;\n          secret_token: string | null;\n          url: string;\n        };\n        Insert: {\n          enabled?: boolean | null;\n          event: string;\n          id?: string;\n          secret_token?: string | null;\n          url: string;\n        };\n        Update: {\n          enabled?: boolean | null;\n          event?: string;\n          id?: string;\n          secret_token?: string | null;\n          url?: string;\n        };\n        Relationships: [];\n      };\n      role_change_logs: {\n        Row: {\n          changed_at: string | null;\n          changed_by: string;\n          id: string;\n          new_role: string;\n          user_email: string;\n        };\n        Insert: {\n          changed_at?: string | null;\n          changed_by: string;\n          id?: string;\n          new_role: string;\n          user_email: string;\n        };\n        Update: {\n          changed_at?: string | null;\n          changed_by?: string;\n          id?: string;\n          new_role?: string;\n          user_email?: string;\n        };\n        Relationships: [];\n      };\n      screenshot_queue: {\n        Row: {\n          completed_at: string | null;\n          domain: string;\n          id: string;\n          requested_at: string | null;\n          status: string | null;\n        };\n        Insert: {\n          completed_at?: string | null;\n          domain: string;\n          id?: string;\n          requested_at?: string | null;\n          status?: string | null;\n        };\n        Update: {\n          completed_at?: string | null;\n          domain?: string;\n          id?: string;\n          requested_at?: string | null;\n          status?: string | null;\n        };\n        Relationships: [];\n      };\n      session_logs: {\n        Row: {\n          device: string | null;\n          email: string | null;\n          event: string | null;\n          id: string;\n          is_mobile: boolean | null;\n          timestamp: string;\n          token_end: string | null;\n          token_start: string | null;\n          type: string;\n          user_id: string | null;\n        };\n        Insert: {\n          device?: string | null;\n          email?: string | null;\n          event?: string | null;\n          id?: string;\n          is_mobile?: boolean | null;\n          timestamp: string;\n          token_end?: string | null;\n          token_start?: string | null;\n          type: string;\n          user_id?: string | null;\n        };\n        Update: {\n          device?: string | null;\n          email?: string | null;\n          event?: string | null;\n          id?: string;\n          is_mobile?: boolean | null;\n          timestamp?: string;\n          token_end?: string | null;\n          token_start?: string | null;\n          type?: string;\n          user_id?: string | null;\n        };\n        Relationships: [];\n      };\n      shared_previews: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          template_id: string | null;\n          thumbnail_url: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          template_id?: string | null;\n          thumbnail_url?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          template_id?: string | null;\n          thumbnail_url?: string | null;\n        };\n        Relationships: [];\n      };\n      shared_templates: {\n        Row: {\n          data: Json;\n          editor_email: string | null;\n          id: string;\n          shared_at: string | null;\n          template_name: string;\n        };\n        Insert: {\n          data: Json;\n          editor_email?: string | null;\n          id?: string;\n          shared_at?: string | null;\n          template_name: string;\n        };\n        Update: {\n          data?: Json;\n          editor_email?: string | null;\n          id?: string;\n          shared_at?: string | null;\n          template_name?: string;\n        };\n        Relationships: [];\n      };\n      site_events: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          payload: Json;\n          type: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          payload: Json;\n          type: string;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          payload?: Json;\n          type?: string;\n        };\n        Relationships: [];\n      };\n      sites: {\n        Row: {\n          branding_profile_id: string | null;\n          business_name: string | null;\n          content: Json;\n          created_at: string | null;\n          domain: string | null;\n          id: string;\n          is_published: boolean | null;\n          location: string | null;\n          seo_description: string | null;\n          seo_title: string | null;\n          site_name: string | null;\n          slug: string;\n          template_id: string | null;\n          template_version_id: string | null;\n          twitter_handle: string | null;\n          updated_at: string | null;\n          vanity_url: string | null;\n        };\n        Insert: {\n          branding_profile_id?: string | null;\n          business_name?: string | null;\n          content: Json;\n          created_at?: string | null;\n          domain?: string | null;\n          id?: string;\n          is_published?: boolean | null;\n          location?: string | null;\n          seo_description?: string | null;\n          seo_title?: string | null;\n          site_name?: string | null;\n          slug: string;\n          template_id?: string | null;\n          template_version_id?: string | null;\n          twitter_handle?: string | null;\n          updated_at?: string | null;\n          vanity_url?: string | null;\n        };\n        Update: {\n          branding_profile_id?: string | null;\n          business_name?: string | null;\n          content?: Json;\n          created_at?: string | null;\n          domain?: string | null;\n          id?: string;\n          is_published?: boolean | null;\n          location?: string | null;\n          seo_description?: string | null;\n          seo_title?: string | null;\n          site_name?: string | null;\n          slug?: string;\n          template_id?: string | null;\n          template_version_id?: string | null;\n          twitter_handle?: string | null;\n          updated_at?: string | null;\n          vanity_url?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'sites_branding_profile_id_fkey';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'sites_branding_profile_id_fkey';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles_with_email';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'sites_template_id_fkey';\n            columns: ['template_id'];\n            isOneToOne: false;\n            referencedRelation: 'templates';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'sites_template_version_id_fkey';\n            columns: ['template_version_id'];\n            isOneToOne: false;\n            referencedRelation: 'template_versions';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      snapshot_views: {\n        Row: {\n          id: string;\n          ip_address: string | null;\n          template_name: string;\n          user_agent: string | null;\n          viewed_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          ip_address?: string | null;\n          template_name: string;\n          user_agent?: string | null;\n          viewed_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          ip_address?: string | null;\n          template_name?: string;\n          user_agent?: string | null;\n          viewed_at?: string | null;\n        };\n        Relationships: [];\n      };\n      snapshots: {\n        Row: {\n          brand: string | null;\n          branding_profile_id: string | null;\n          color_scheme: string | null;\n          commit_message: string | null;\n          created_at: string | null;\n          data: Json | null;\n          editor_email: string | null;\n          id: string;\n          shared_at: string | null;\n          template_id: string | null;\n          template_name: string | null;\n          theme: string | null;\n          thumbnail_url: string | null;\n        };\n        Insert: {\n          brand?: string | null;\n          branding_profile_id?: string | null;\n          color_scheme?: string | null;\n          commit_message?: string | null;\n          created_at?: string | null;\n          data?: Json | null;\n          editor_email?: string | null;\n          id?: string;\n          shared_at?: string | null;\n          template_id?: string | null;\n          template_name?: string | null;\n          theme?: string | null;\n          thumbnail_url?: string | null;\n        };\n        Update: {\n          brand?: string | null;\n          branding_profile_id?: string | null;\n          color_scheme?: string | null;\n          commit_message?: string | null;\n          created_at?: string | null;\n          data?: Json | null;\n          editor_email?: string | null;\n          id?: string;\n          shared_at?: string | null;\n          template_id?: string | null;\n          template_name?: string | null;\n          theme?: string | null;\n          thumbnail_url?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'snapshots_branding_profile_id_fkey';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'snapshots_branding_profile_id_fkey';\n            columns: ['branding_profile_id'];\n            isOneToOne: false;\n            referencedRelation: 'branding_profiles_with_email';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      starter_templates: {\n        Row: {\n          data: Json | null;\n          description: string | null;\n          id: string;\n          name: string | null;\n          preview: string | null;\n          template_id: string | null;\n        };\n        Insert: {\n          data?: Json | null;\n          description?: string | null;\n          id: string;\n          name?: string | null;\n          preview?: string | null;\n          template_id?: string | null;\n        };\n        Update: {\n          data?: Json | null;\n          description?: string | null;\n          id?: string;\n          name?: string | null;\n          preview?: string | null;\n          template_id?: string | null;\n        };\n        Relationships: [];\n      };\n      steward_rewards: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          points: number | null;\n          reason: string | null;\n          site_domain: string | null;\n          user_id: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          points?: number | null;\n          reason?: string | null;\n          site_domain?: string | null;\n          user_id: string;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          points?: number | null;\n          reason?: string | null;\n          site_domain?: string | null;\n          user_id?: string;\n        };\n        Relationships: [];\n      };\n      subscriptions: {\n        Row: {\n          domain: string | null;\n          email: string | null;\n          id: string;\n          subscribed_at: string | null;\n          unsubscribe_token: string | null;\n        };\n        Insert: {\n          domain?: string | null;\n          email?: string | null;\n          id?: string;\n          subscribed_at?: string | null;\n          unsubscribe_token?: string | null;\n        };\n        Update: {\n          domain?: string | null;\n          email?: string | null;\n          id?: string;\n          subscribed_at?: string | null;\n          unsubscribe_token?: string | null;\n        };\n        Relationships: [];\n      };\n      support_campaigns: {\n        Row: {\n          block_id: string | null;\n          created_at: string | null;\n          created_by: string | null;\n          goal_count: number | null;\n          headline: string | null;\n          id: string;\n          preclaim_token: string | null;\n          slug: string;\n          target_action: string | null;\n        };\n        Insert: {\n          block_id?: string | null;\n          created_at?: string | null;\n          created_by?: string | null;\n          goal_count?: number | null;\n          headline?: string | null;\n          id?: string;\n          preclaim_token?: string | null;\n          slug: string;\n          target_action?: string | null;\n        };\n        Update: {\n          block_id?: string | null;\n          created_at?: string | null;\n          created_by?: string | null;\n          goal_count?: number | null;\n          headline?: string | null;\n          id?: string;\n          preclaim_token?: string | null;\n          slug?: string;\n          target_action?: string | null;\n        };\n        Relationships: [];\n      };\n      support_requests: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          message: string | null;\n          receiver_handle: string;\n          requester_id: string | null;\n          slug: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          message?: string | null;\n          receiver_handle: string;\n          requester_id?: string | null;\n          slug?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          message?: string | null;\n          receiver_handle?: string;\n          requester_id?: string | null;\n          slug?: string | null;\n        };\n        Relationships: [];\n      };\n      template_images: {\n        Row: {\n          id: string;\n          original_name: string | null;\n          path: string;\n          template_id: string | null;\n          type: string | null;\n          uploaded_at: string | null;\n          url: string;\n        };\n        Insert: {\n          id?: string;\n          original_name?: string | null;\n          path: string;\n          template_id?: string | null;\n          type?: string | null;\n          uploaded_at?: string | null;\n          url: string;\n        };\n        Update: {\n          id?: string;\n          original_name?: string | null;\n          path?: string;\n          template_id?: string | null;\n          type?: string | null;\n          uploaded_at?: string | null;\n          url?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'template_images_template_id_fkey';\n            columns: ['template_id'];\n            isOneToOne: false;\n            referencedRelation: 'templates';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      template_logs: {\n        Row: {\n          action: string;\n          actor: string | null;\n          id: string;\n          template_name: string;\n          timestamp: string | null;\n        };\n        Insert: {\n          action: string;\n          actor?: string | null;\n          id?: string;\n          template_name: string;\n          timestamp?: string | null;\n        };\n        Update: {\n          action?: string;\n          actor?: string | null;\n          id?: string;\n          template_name?: string;\n          timestamp?: string | null;\n        };\n        Relationships: [];\n      };\n      template_versions: {\n        Row: {\n          commit_message: string | null;\n          created_at: string | null;\n          diff: Json | null;\n          editor_id: string | null;\n          forced_revert: boolean | null;\n          full_data: Json | null;\n          id: string;\n          saved_at: string | null;\n          template_id: string | null;\n          template_name: string;\n          thumbnail_url: string | null;\n        };\n        Insert: {\n          commit_message?: string | null;\n          created_at?: string | null;\n          diff?: Json | null;\n          editor_id?: string | null;\n          forced_revert?: boolean | null;\n          full_data?: Json | null;\n          id?: string;\n          saved_at?: string | null;\n          template_id?: string | null;\n          template_name: string;\n          thumbnail_url?: string | null;\n        };\n        Update: {\n          commit_message?: string | null;\n          created_at?: string | null;\n          diff?: Json | null;\n          editor_id?: string | null;\n          forced_revert?: boolean | null;\n          full_data?: Json | null;\n          id?: string;\n          saved_at?: string | null;\n          template_id?: string | null;\n          template_name?: string;\n          thumbnail_url?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'template_versions_template_id_fkey';\n            columns: ['template_id'];\n            isOneToOne: false;\n            referencedRelation: 'templates';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      template_views: {\n        Row: {\n          domain: string | null;\n          id: string;\n          ip_address: string | null;\n          template_name: string | null;\n          user_agent: string | null;\n          viewed_at: string | null;\n        };\n        Insert: {\n          domain?: string | null;\n          id?: string;\n          ip_address?: string | null;\n          template_name?: string | null;\n          user_agent?: string | null;\n          viewed_at?: string | null;\n        };\n        Update: {\n          domain?: string | null;\n          id?: string;\n          ip_address?: string | null;\n          template_name?: string | null;\n          user_agent?: string | null;\n          viewed_at?: string | null;\n        };\n        Relationships: [];\n      };\n      templates: {\n        Row: {\n          banner_url: string | null;\n          banner_url_meta: Json | null;\n          color_scheme: string | null;\n          created_at: string | null;\n          custom_domain: string | null;\n          data: Json;\n          domain: string | null;\n          gallery_meta: Json | null;\n          hero_url: string | null;\n          hero_url_meta: Json | null;\n          id: string;\n          industry: string | null;\n          layout: string | null;\n          logo_url: string | null;\n          logo_url_meta: Json | null;\n          published: boolean | null;\n          template_name: string;\n          updated_at: string | null;\n        };\n        Insert: {\n          banner_url?: string | null;\n          banner_url_meta?: Json | null;\n          color_scheme?: string | null;\n          created_at?: string | null;\n          custom_domain?: string | null;\n          data: Json;\n          domain?: string | null;\n          gallery_meta?: Json | null;\n          hero_url?: string | null;\n          hero_url_meta?: Json | null;\n          id?: string;\n          industry?: string | null;\n          layout?: string | null;\n          logo_url?: string | null;\n          logo_url_meta?: Json | null;\n          published?: boolean | null;\n          template_name: string;\n          updated_at?: string | null;\n        };\n        Update: {\n          banner_url?: string | null;\n          banner_url_meta?: Json | null;\n          color_scheme?: string | null;\n          created_at?: string | null;\n          custom_domain?: string | null;\n          data?: Json;\n          domain?: string | null;\n          gallery_meta?: Json | null;\n          hero_url?: string | null;\n          hero_url_meta?: Json | null;\n          id?: string;\n          industry?: string | null;\n          layout?: string | null;\n          logo_url?: string | null;\n          logo_url_meta?: Json | null;\n          published?: boolean | null;\n          template_name?: string;\n          updated_at?: string | null;\n        };\n        Relationships: [];\n      };\n      thank_you_notes: {\n        Row: {\n          block_id: string | null;\n          created_at: string | null;\n          id: string;\n          message: string | null;\n          recipient_id: string | null;\n          sender_id: string | null;\n        };\n        Insert: {\n          block_id?: string | null;\n          created_at?: string | null;\n          id?: string;\n          message?: string | null;\n          recipient_id?: string | null;\n          sender_id?: string | null;\n        };\n        Update: {\n          block_id?: string | null;\n          created_at?: string | null;\n          id?: string;\n          message?: string | null;\n          recipient_id?: string | null;\n          sender_id?: string | null;\n        };\n        Relationships: [];\n      };\n      token_logs: {\n        Row: {\n          downloaded_at: string | null;\n          file_name: string | null;\n          id: string;\n          ip_address: string | null;\n          ip_location: string | null;\n          token_hash: string | null;\n          user_agent: string | null;\n        };\n        Insert: {\n          downloaded_at?: string | null;\n          file_name?: string | null;\n          id?: string;\n          ip_address?: string | null;\n          ip_location?: string | null;\n          token_hash?: string | null;\n          user_agent?: string | null;\n        };\n        Update: {\n          downloaded_at?: string | null;\n          file_name?: string | null;\n          id?: string;\n          ip_address?: string | null;\n          ip_location?: string | null;\n          token_hash?: string | null;\n          user_agent?: string | null;\n        };\n        Relationships: [];\n      };\n      tracking_checkins: {\n        Row: {\n          block_id: string | null;\n          checked_at: string | null;\n          id: string;\n          slug: string;\n          user_id: string;\n        };\n        Insert: {\n          block_id?: string | null;\n          checked_at?: string | null;\n          id?: string;\n          slug: string;\n          user_id: string;\n        };\n        Update: {\n          block_id?: string | null;\n          checked_at?: string | null;\n          id?: string;\n          slug?: string;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'tracking_checkins_block_id_fkey';\n            columns: ['block_id'];\n            isOneToOne: false;\n            referencedRelation: 'blocks';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      user_action_logs: {\n        Row: {\n          action_type: string;\n          domain_id: string | null;\n          id: string;\n          lead_id: string | null;\n          timestamp: string | null;\n          triggered_by: string | null;\n        };\n        Insert: {\n          action_type: string;\n          domain_id?: string | null;\n          id?: string;\n          lead_id?: string | null;\n          timestamp?: string | null;\n          triggered_by?: string | null;\n        };\n        Update: {\n          action_type?: string;\n          domain_id?: string | null;\n          id?: string;\n          lead_id?: string | null;\n          timestamp?: string | null;\n          triggered_by?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'lead_action_logs_domain_id_fkey';\n            columns: ['domain_id'];\n            isOneToOne: false;\n            referencedRelation: 'draft_sites';\n            referencedColumns: ['id'];\n          },\n          {\n            foreignKeyName: 'lead_action_logs_lead_id_fkey';\n            columns: ['lead_id'];\n            isOneToOne: false;\n            referencedRelation: 'leads';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      user_deletion_logs: {\n        Row: {\n          deleted_at: string | null;\n          email: string | null;\n          id: string;\n          user_id: string;\n        };\n        Insert: {\n          deleted_at?: string | null;\n          email?: string | null;\n          id?: string;\n          user_id: string;\n        };\n        Update: {\n          deleted_at?: string | null;\n          email?: string | null;\n          id?: string;\n          user_id?: string;\n        };\n        Relationships: [];\n      };\n      user_profiles: {\n        Row: {\n          avatar_url: string | null;\n          last_seen_agent: string | null;\n          last_seen_at: string | null;\n          last_seen_ip: string | null;\n          user_id: string;\n        };\n        Insert: {\n          avatar_url?: string | null;\n          last_seen_agent?: string | null;\n          last_seen_at?: string | null;\n          last_seen_ip?: string | null;\n          user_id: string;\n        };\n        Update: {\n          avatar_url?: string | null;\n          last_seen_agent?: string | null;\n          last_seen_at?: string | null;\n          last_seen_ip?: string | null;\n          user_id?: string;\n        };\n        Relationships: [];\n      };\n      user_roles: {\n        Row: {\n          changed_at: string | null;\n          id: string;\n          new_role: string | null;\n          role: string;\n          updated_at: string | null;\n          user_email: string;\n          user_id: string | null;\n        };\n        Insert: {\n          changed_at?: string | null;\n          id?: string;\n          new_role?: string | null;\n          role: string;\n          updated_at?: string | null;\n          user_email: string;\n          user_id?: string | null;\n        };\n        Update: {\n          changed_at?: string | null;\n          id?: string;\n          new_role?: string | null;\n          role?: string;\n          updated_at?: string | null;\n          user_email?: string;\n          user_id?: string | null;\n        };\n        Relationships: [];\n      };\n      verification_logs: {\n        Row: {\n          email: string | null;\n          id: string;\n          sent_at: string | null;\n          user_id: string;\n        };\n        Insert: {\n          email?: string | null;\n          id?: string;\n          sent_at?: string | null;\n          user_id: string;\n        };\n        Update: {\n          email?: string | null;\n          id?: string;\n          sent_at?: string | null;\n          user_id?: string;\n        };\n        Relationships: [];\n      };\n    };\n    Views: {\n      block_feedback_summary: {\n        Row: {\n          block_id: string | null;\n          cheer_count: number | null;\n          echo_count: number | null;\n          reflect_count: number | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'block_feedback_block_id_fkey';\n            columns: ['block_id'];\n            isOneToOne: false;\n            referencedRelation: 'blocks';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      branding_profiles_with_email: {\n        Row: {\n          accent_color: string | null;\n          access_token: string | null;\n          brand: string | null;\n          created_at: string | null;\n          id: string | null;\n          is_public: boolean | null;\n          logo_url: string | null;\n          name: string | null;\n          owner_email: string | null;\n          owner_id: string | null;\n          password: string | null;\n          theme: string | null;\n        };\n        Relationships: [];\n      };\n      checkin_map_points: {\n        Row: {\n          block_id: string | null;\n          lat: number | null;\n          lon: number | null;\n          slug: string | null;\n          total: number | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: 'tracking_checkins_block_id_fkey';\n            columns: ['block_id'];\n            isOneToOne: false;\n            referencedRelation: 'blocks';\n            referencedColumns: ['id'];\n          },\n        ];\n      };\n      click_summary: {\n        Row: {\n          action: string | null;\n          block_id: string | null;\n          click_count: number | null;\n          day: string | null;\n          handle: string | null;\n        };\n        Relationships: [];\n      };\n      mobile_session_summary: {\n        Row: {\n          first_seen: string | null;\n          is_mobile: boolean | null;\n          last_seen: string | null;\n          session_count: number | null;\n          type: string | null;\n        };\n        Relationships: [];\n      };\n    };\n    Functions: {\n      daily_checkins_by_slug: {\n        Args: { slug: string };\n        Returns: {\n          date: string;\n          count: number;\n        }[];\n      };\n      delete_current_user: {\n        Args: Record<PropertyKey, never>;\n        Returns: undefined;\n      };\n      get_latest_template_versions: {\n        Args: Record<PropertyKey, never>;\n        Returns: {\n          id: string;\n          template_name: string;\n          thumbnail_url: string;\n          saved_at: string;\n        }[];\n      };\n      get_total_reward_points: {\n        Args: { user_id: string };\n        Returns: number;\n      };\n      gtrgm_compress: {\n        Args: { '': unknown };\n        Returns: unknown;\n      };\n      gtrgm_decompress: {\n        Args: { '': unknown };\n        Returns: unknown;\n      };\n      gtrgm_in: {\n        Args: { '': unknown };\n        Returns: unknown;\n      };\n      gtrgm_options: {\n        Args: { '': unknown };\n        Returns: undefined;\n      };\n      gtrgm_out: {\n        Args: { '': unknown };\n        Returns: unknown;\n      };\n      leaderboard_for_slug: {\n        Args: { slug: string };\n        Returns: {\n          user_id: string;\n          total: number;\n        }[];\n      };\n      send_email_verification: {\n        Args: Record<PropertyKey, never>;\n        Returns: undefined;\n      };\n      send_email_verification_with_log: {\n        Args: Record<PropertyKey, never>;\n        Returns: undefined;\n      };\n      set_limit: {\n        Args: { '': number };\n        Returns: number;\n      };\n      show_limit: {\n        Args: Record<PropertyKey, never>;\n        Returns: number;\n      };\n      show_trgm: {\n        Args: { '': string };\n        Returns: string[];\n      };\n    };\n    Enums: {\n      [_ in never]: never;\n    };\n    CompositeTypes: {\n      [_ in never]: never;\n    };\n  };\n};\n\ntype DefaultSchema = Database[Extract<keyof Database, 'public'>];\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema['Tables'] & DefaultSchema['Views'])\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof (Database[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &\n        Database[DefaultSchemaTableNameOrOptions['schema']]['Views'])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &\n      Database[DefaultSchemaTableNameOrOptions['schema']]['Views'])[TableName] extends {\n      Row: infer R;\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema['Tables'] & DefaultSchema['Views'])\n    ? (DefaultSchema['Tables'] & DefaultSchema['Views'])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R;\n      }\n      ? R\n      : never\n    : never;\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema['Tables']\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions['schema']]['Tables']\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {\n      Insert: infer I;\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']\n    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I;\n      }\n      ? I\n      : never\n    : never;\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema['Tables']\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions['schema']]['Tables']\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {\n      Update: infer U;\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']\n    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U;\n      }\n      ? U\n      : never\n    : never;\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema['Enums'] | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaEnumNameOrOptions['schema']]['Enums']\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions['schema']]['Enums'][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema['Enums']\n    ? DefaultSchema['Enums'][DefaultSchemaEnumNameOrOptions]\n    : never;\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema['CompositeTypes']\n    | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes']\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes'][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema['CompositeTypes']\n    ? DefaultSchema['CompositeTypes'][PublicCompositeTypeNameOrOptions]\n    : never;\n\nexport const Constants = {\n  graphql_public: {\n    Enums: {},\n  },\n  public: {\n    Enums: {},\n  },\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/swagger-ui-react.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/template.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/template.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/sandonjurowski/Desktop/_SilverLamp/quicksites-v2/types/zod-to-openapi.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]